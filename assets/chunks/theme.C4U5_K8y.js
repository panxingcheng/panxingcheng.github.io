const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/chunks/VPLocalSearchBox.D6dHohBe.js","assets/chunks/framework.BPIbAgMo.js"])))=>i.map(i=>d[i]);
import{d as F,c as r,r as k,n as P,o as t,a as j,t as x,b as u,w as g,T as rs,e as E,_ as v,u as bs,i as Ns,f as Ms,g as ds,h as B,j as d,k as l,l as Z,m as ts,p as S,q as I,s as Q,v as R,x as os,y as cs,z as ws,A as Is,F as T,B as q,C as H,D as Bs,E as z,G as y,H as M,I as ms,J as Y,K as V,L as X,M as Os,N as As,O as ls,P as Ds,Q as fs,R as ss,S as Ws,U as Vs,V as Rs,W as Ss,X as _s,Y as js,Z as Zs,$ as Hs,a0 as Js,a1 as Us}from"./framework.BPIbAgMo.js";const Gs=F({__name:"VPBadge",props:{text:{},type:{default:"tip"}},setup(e){return(s,i)=>(t(),r("span",{class:P(["VPBadge",s.type])},[k(s.$slots,"default",{},()=>[j(x(s.text),1)])],2))}}),Ks={key:0,class:"VPBackdrop"},Qs=F({__name:"VPBackdrop",props:{show:{type:Boolean}},setup(e){return(s,i)=>(t(),u(rs,{name:"fade"},{default:g(()=>[s.show?(t(),r("div",Ks)):E("",!0)]),_:1}))}}),zs=v(Qs,[["__scopeId","data-v-c79a1216"]]),A=bs;function Ys(e,s){let i,n=!1;return()=>{i&&clearTimeout(i),n?i=setTimeout(e,s):(e(),(n=!0)&&setTimeout(()=>n=!1,s))}}function ps(e){return e.startsWith("/")?e:`/${e}`}function gs(e){const{pathname:s,search:i,hash:n,protocol:a}=new URL(e,"http://a.com");if(Ns(e)||e.startsWith("#")||!a.startsWith("http")||!Ms(s))return e;const{site:p}=A(),h=s.endsWith("/")||s.endsWith(".html")?e:e.replace(/(?:(^\.+)\/)?.*$/,`$1${s.replace(/(\.md)?$/,p.value.cleanUrls?"":".html")}${i}${n}`);return ds(h)}function U({correspondingLink:e=!1}={}){const{site:s,localeIndex:i,page:n,theme:a,hash:p}=A(),h=B(()=>{var c,b;return{label:(c=s.value.locales[i.value])==null?void 0:c.label,link:((b=s.value.locales[i.value])==null?void 0:b.link)||(i.value==="root"?"/":`/${i.value}/`)}});return{localeLinks:B(()=>Object.entries(s.value.locales).flatMap(([c,b])=>h.value.label===b.label?[]:{text:b.label,link:Xs(b.link||(c==="root"?"/":`/${c}/`),a.value.i18nRouting!==!1&&e,n.value.relativePath.slice(h.value.link.length-1),!s.value.cleanUrls)+p.value})),currentLang:h}}function Xs(e,s,i,n){return s?e.replace(/\/$/,"")+ps(i.replace(/(^|\/)index\.md$/,"$1").replace(/\.md$/,n?".html":"")):e}const si={class:"NotFound"},ii={class:"code"},ai={class:"title"},ni={class:"quote"},ei={class:"action"},ti=["href","aria-label"],li=F({__name:"NotFound",setup(e){const{theme:s}=A(),{currentLang:i}=U();return(n,a)=>{var p,h,o,c,b;return t(),r("div",si,[d("p",ii,x(((p=l(s).notFound)==null?void 0:p.code)??"404"),1),d("h1",ai,x(((h=l(s).notFound)==null?void 0:h.title)??"PAGE NOT FOUND"),1),a[0]||(a[0]=d("div",{class:"divider"},null,-1)),d("blockquote",ni,x(((o=l(s).notFound)==null?void 0:o.quote)??"But if you don't change your direction, and if you keep looking, you may end up where you are heading."),1),d("div",ei,[d("a",{class:"link",href:l(ds)(l(i).link),"aria-label":((c=l(s).notFound)==null?void 0:c.linkLabel)??"go to home"},x(((b=l(s).notFound)==null?void 0:b.linkText)??"Take me home"),9,ti)])])}}}),pi=v(li,[["__scopeId","data-v-d6be1790"]]);function xs(e,s){if(Array.isArray(e))return G(e);if(e==null)return[];s=ps(s);const i=Object.keys(e).sort((a,p)=>p.split("/").length-a.split("/").length).find(a=>s.startsWith(ps(a))),n=i?e[i]:[];return Array.isArray(n)?G(n):G(n.items,n.base)}function hi(e){const s=[];let i=0;for(const n in e){const a=e[n];if(a.items){i=s.push(a);continue}s[i]||s.push({items:[]}),s[i].items.push(a)}return s}function ki(e){const s=[];function i(n){for(const a of n)a.text&&a.link&&s.push({text:a.text,link:a.link,docFooterText:a.docFooterText}),a.items&&i(a.items)}return i(e),s}function hs(e,s){return Array.isArray(s)?s.some(i=>hs(e,i)):Z(e,s.link)?!0:s.items?hs(e,s.items):!1}function G(e,s){return[...e].map(i=>{const n={...i},a=n.base||s;return a&&n.link&&(n.link=a+n.link),n.items&&(n.items=G(n.items,a)),n})}function O(){const{frontmatter:e,page:s,theme:i}=A(),n=ts("(min-width: 960px)"),a=S(!1),p=B(()=>{const L=i.value.sidebar,f=s.value.relativePath;return L?xs(L,f):[]}),h=S(p.value);I(p,(L,f)=>{JSON.stringify(L)!==JSON.stringify(f)&&(h.value=p.value)});const o=B(()=>e.value.sidebar!==!1&&h.value.length>0&&e.value.layout!=="home"),c=B(()=>b?e.value.aside==null?i.value.aside==="left":e.value.aside==="left":!1),b=B(()=>e.value.layout==="home"?!1:e.value.aside!=null?!!e.value.aside:i.value.aside!==!1),D=B(()=>o.value&&n.value),C=B(()=>o.value?hi(h.value):[]);function m(){a.value=!0}function _(){a.value=!1}function $(){a.value?_():m()}return{isOpen:a,sidebar:h,sidebarGroups:C,hasSidebar:o,hasAside:b,leftAside:c,isSidebarEnabled:D,open:m,close:_,toggle:$}}function ri(e,s){let i;Q(()=>{i=e.value?document.activeElement:void 0}),R(()=>{window.addEventListener("keyup",n)}),os(()=>{window.removeEventListener("keyup",n)});function n(a){a.key==="Escape"&&e.value&&(s(),i==null||i.focus())}}function di(e){const{page:s,hash:i}=A(),n=S(!1),a=B(()=>e.value.collapsed!=null),p=B(()=>!!e.value.link),h=S(!1),o=()=>{h.value=Z(s.value.relativePath,e.value.link)};I([s,e,i],o),R(o);const c=B(()=>h.value?!0:e.value.items?hs(s.value.relativePath,e.value.items):!1),b=B(()=>!!(e.value.items&&e.value.items.length));Q(()=>{n.value=!!(a.value&&e.value.collapsed)}),cs(()=>{(h.value||c.value)&&(n.value=!1)});function D(){a.value&&(n.value=!n.value)}return{collapsed:n,collapsible:a,isLink:p,isActiveLink:h,hasActiveLink:c,hasChildren:b,toggle:D}}function oi(){const{hasSidebar:e}=O(),s=ts("(min-width: 960px)"),i=ts("(min-width: 1280px)");return{isAsideEnabled:B(()=>!i.value&&!s.value?!1:e.value?i.value:s.value)}}const ci=/\b(?:VPBadge|header-anchor|footnote-ref|ignore-header)\b/,ks=[];function Ps(e){return typeof e.outline=="object"&&!Array.isArray(e.outline)&&e.outline.label||e.outlineTitle||"On this page"}function Es(e){const s=[...document.querySelectorAll(".VPDoc :where(h1,h2,h3,h4,h5,h6)")].filter(i=>i.id&&i.hasChildNodes()).map(i=>{const n=Number(i.tagName[1]);return{element:i,title:gi(i),link:"#"+i.id,level:n}});return Ei(s,e)}function gi(e){let s="";for(const i of e.childNodes)if(i.nodeType===1){if(ci.test(i.className))continue;s+=i.textContent}else i.nodeType===3&&(s+=i.textContent);return s.trim()}function Ei(e,s){if(s===!1)return[];const i=(typeof s=="object"&&!Array.isArray(s)?s.level:s)||2,[n,a]=typeof i=="number"?[i,i]:i==="deep"?[2,6]:i;return ui(e,n,a)}function Fi(e,s){const{isAsideEnabled:i}=oi(),n=Ys(p,100);let a=null;R(()=>{requestAnimationFrame(p),window.addEventListener("scroll",n)}),ws(()=>{h(location.hash)}),os(()=>{window.removeEventListener("scroll",n)});function p(){if(!i.value)return;const o=window.scrollY,c=window.innerHeight,b=document.body.offsetHeight,D=Math.abs(o+c-b)<1,C=ks.map(({element:_,link:$})=>({link:$,top:yi(_)})).filter(({top:_})=>!Number.isNaN(_)).sort((_,$)=>_.top-$.top);if(!C.length){h(null);return}if(o<1){h(null);return}if(D){h(C[C.length-1].link);return}let m=null;for(const{link:_,top:$}of C){if($>o+Is()+4)break;m=_}h(m)}function h(o){a&&a.classList.remove("active"),o==null?a=null:a=e.value.querySelector(`a[href="${decodeURIComponent(o)}"]`);const c=a;c?(c.classList.add("active"),s.value.style.top=c.offsetTop+39+"px",s.value.style.opacity="1"):(s.value.style.top="33px",s.value.style.opacity="0")}}function yi(e){let s=0;for(;e!==document.body;){if(e===null)return NaN;s+=e.offsetTop,e=e.offsetParent}return s}function ui(e,s,i){ks.length=0;const n=[],a=[];return e.forEach(p=>{const h={...p,children:[]};let o=a[a.length-1];for(;o&&o.level>=h.level;)a.pop(),o=a[a.length-1];if(h.element.classList.contains("ignore-header")||o&&"shouldIgnore"in o){a.push({level:h.level,shouldIgnore:!0});return}h.level>i||h.level<s||(ks.push({element:h.element,link:h.link}),o?o.children.push(h):n.push(h),a.push(h))}),n}const Ci=["href","title"],vi=F({__name:"VPDocOutlineItem",props:{headers:{},root:{type:Boolean}},setup(e){function s({target:i}){const n=i.href.split("#")[1],a=document.getElementById(decodeURIComponent(n));a==null||a.focus({preventScroll:!0})}return(i,n)=>{const a=H("VPDocOutlineItem",!0);return t(),r("ul",{class:P(["VPDocOutlineItem",i.root?"root":"nested"])},[(t(!0),r(T,null,q(i.headers,({children:p,link:h,title:o})=>(t(),r("li",null,[d("a",{class:"outline-link",href:h,onClick:s,title:o},x(o),9,Ci),p!=null&&p.length?(t(),u(a,{key:0,headers:p},null,8,["headers"])):E("",!0)]))),256))],2)}}}),Ts=v(vi,[["__scopeId","data-v-b933a997"]]),bi={class:"content"},Bi={"aria-level":"2",class:"outline-title",id:"doc-outline-aria-label",role:"heading"},mi=F({__name:"VPDocAsideOutline",setup(e){const{frontmatter:s,theme:i}=A(),n=Bs([]);z(()=>{n.value=Es(s.value.outline??i.value.outline)});const a=S(),p=S();return Fi(a,p),(h,o)=>(t(),r("nav",{"aria-labelledby":"doc-outline-aria-label",class:P(["VPDocAsideOutline",{"has-outline":n.value.length>0}]),ref_key:"container",ref:a},[d("div",bi,[d("div",{class:"outline-marker",ref_key:"marker",ref:p},null,512),d("div",Bi,x(l(Ps)(l(i))),1),y(Ts,{headers:n.value,root:!0},null,8,["headers"])])],2))}}),Ai=v(mi,[["__scopeId","data-v-a5bbad30"]]),Di={class:"VPDocAsideCarbonAds"},fi=F({__name:"VPDocAsideCarbonAds",props:{carbonAds:{}},setup(e){const s=()=>null;return(i,n)=>(t(),r("div",Di,[y(l(s),{"carbon-ads":i.carbonAds},null,8,["carbon-ads"])]))}}),Si={class:"VPDocAside"},_i=F({__name:"VPDocAside",setup(e){const{theme:s}=A();return(i,n)=>(t(),r("div",Si,[k(i.$slots,"aside-top",{},void 0,!0),k(i.$slots,"aside-outline-before",{},void 0,!0),y(Ai),k(i.$slots,"aside-outline-after",{},void 0,!0),n[0]||(n[0]=d("div",{class:"spacer"},null,-1)),k(i.$slots,"aside-ads-before",{},void 0,!0),l(s).carbonAds?(t(),u(fi,{key:0,"carbon-ads":l(s).carbonAds},null,8,["carbon-ads"])):E("",!0),k(i.$slots,"aside-ads-after",{},void 0,!0),k(i.$slots,"aside-bottom",{},void 0,!0)]))}}),xi=v(_i,[["__scopeId","data-v-3f215769"]]);function Pi(){const{theme:e,page:s}=A();return B(()=>{const{text:i="Edit this page",pattern:n=""}=e.value.editLink||{};let a;return typeof n=="function"?a=n(s.value):a=n.replace(/:path/g,s.value.filePath),{url:a,text:i}})}function Ti(){const{page:e,theme:s,frontmatter:i}=A();return B(()=>{var b,D,C,m,_,$,L,f;const n=xs(s.value.sidebar,e.value.relativePath),a=ki(n),p=$i(a,N=>N.link.replace(/[?#].*$/,"")),h=p.findIndex(N=>Z(e.value.relativePath,N.link)),o=((b=s.value.docFooter)==null?void 0:b.prev)===!1&&!i.value.prev||i.value.prev===!1,c=((D=s.value.docFooter)==null?void 0:D.next)===!1&&!i.value.next||i.value.next===!1;return{prev:o?void 0:{text:(typeof i.value.prev=="string"?i.value.prev:typeof i.value.prev=="object"?i.value.prev.text:void 0)??((C=p[h-1])==null?void 0:C.docFooterText)??((m=p[h-1])==null?void 0:m.text),link:(typeof i.value.prev=="object"?i.value.prev.link:void 0)??((_=p[h-1])==null?void 0:_.link)},next:c?void 0:{text:(typeof i.value.next=="string"?i.value.next:typeof i.value.next=="object"?i.value.next.text:void 0)??(($=p[h+1])==null?void 0:$.docFooterText)??((L=p[h+1])==null?void 0:L.text),link:(typeof i.value.next=="object"?i.value.next.link:void 0)??((f=p[h+1])==null?void 0:f.link)}}})}function $i(e,s){const i=new Set;return e.filter(n=>{const a=s(n);return i.has(a)?!1:i.add(a)})}const w=F({__name:"VPLink",props:{tag:{},href:{},noIcon:{type:Boolean},target:{},rel:{}},setup(e){const s=e,i=B(()=>s.tag??(s.href?"a":"span")),n=B(()=>s.href&&ms.test(s.href)||s.target==="_blank");return(a,p)=>(t(),u(M(i.value),{class:P(["VPLink",{link:a.href,"vp-external-link-icon":n.value,"no-icon":a.noIcon}]),href:a.href?l(gs)(a.href):void 0,target:a.target??(n.value?"_blank":void 0),rel:a.rel??(n.value?"noreferrer":void 0)},{default:g(()=>[k(a.$slots,"default")]),_:3},8,["class","href","target","rel"]))}}),Li={class:"VPLastUpdated"},qi=["datetime"],Ni=F({__name:"VPDocFooterLastUpdated",setup(e){const{theme:s,page:i,lang:n}=A(),a=B(()=>new Date(i.value.lastUpdated)),p=B(()=>a.value.toISOString()),h=S("");return R(()=>{Q(()=>{var o,c,b;h.value=new Intl.DateTimeFormat((c=(o=s.value.lastUpdated)==null?void 0:o.formatOptions)!=null&&c.forceLocale?n.value:void 0,((b=s.value.lastUpdated)==null?void 0:b.formatOptions)??{dateStyle:"short",timeStyle:"short"}).format(a.value)})}),(o,c)=>{var b;return t(),r("p",Li,[j(x(((b=l(s).lastUpdated)==null?void 0:b.text)||l(s).lastUpdatedText||"Last updated")+": ",1),d("time",{datetime:p.value},x(h.value),9,qi)])}}}),Mi=v(Ni,[["__scopeId","data-v-e98dd255"]]),wi={key:0,class:"VPDocFooter"},Ii={key:0,class:"edit-info"},Oi={key:0,class:"edit-link"},Wi={key:1,class:"last-updated"},Vi={key:1,class:"prev-next","aria-labelledby":"doc-footer-aria-label"},Ri={class:"pager"},ji=["innerHTML"],Zi=["innerHTML"],Hi={class:"pager"},Ji=["innerHTML"],Ui=["innerHTML"],Gi=F({__name:"VPDocFooter",setup(e){const{theme:s,page:i,frontmatter:n}=A(),a=Pi(),p=Ti(),h=B(()=>s.value.editLink&&n.value.editLink!==!1),o=B(()=>i.value.lastUpdated),c=B(()=>h.value||o.value||p.value.prev||p.value.next);return(b,D)=>{var C,m,_,$;return c.value?(t(),r("footer",wi,[k(b.$slots,"doc-footer-before",{},void 0,!0),h.value||o.value?(t(),r("div",Ii,[h.value?(t(),r("div",Oi,[y(w,{class:"edit-link-button",href:l(a).url,"no-icon":!0},{default:g(()=>[D[0]||(D[0]=d("span",{class:"vpi-square-pen edit-link-icon"},null,-1)),j(" "+x(l(a).text),1)]),_:1},8,["href"])])):E("",!0),o.value?(t(),r("div",Wi,[y(Mi)])):E("",!0)])):E("",!0),(C=l(p).prev)!=null&&C.link||(m=l(p).next)!=null&&m.link?(t(),r("nav",Vi,[D[1]||(D[1]=d("span",{class:"visually-hidden",id:"doc-footer-aria-label"},"Pager",-1)),d("div",Ri,[(_=l(p).prev)!=null&&_.link?(t(),u(w,{key:0,class:"pager-link prev",href:l(p).prev.link},{default:g(()=>{var L;return[d("span",{class:"desc",innerHTML:((L=l(s).docFooter)==null?void 0:L.prev)||"Previous page"},null,8,ji),d("span",{class:"title",innerHTML:l(p).prev.text},null,8,Zi)]}),_:1},8,["href"])):E("",!0)]),d("div",Hi,[($=l(p).next)!=null&&$.link?(t(),u(w,{key:0,class:"pager-link next",href:l(p).next.link},{default:g(()=>{var L;return[d("span",{class:"desc",innerHTML:((L=l(s).docFooter)==null?void 0:L.next)||"Next page"},null,8,Ji),d("span",{class:"title",innerHTML:l(p).next.text},null,8,Ui)]}),_:1},8,["href"])):E("",!0)])])):E("",!0)])):E("",!0)}}}),Ki=v(Gi,[["__scopeId","data-v-e257564d"]]),Qi={class:"container"},zi={class:"aside-container"},Yi={class:"aside-content"},Xi={class:"content"},sa={class:"content-container"},ia={class:"main"},aa=F({__name:"VPDoc",setup(e){const{theme:s}=A(),i=Y(),{hasSidebar:n,hasAside:a,leftAside:p}=O(),h=B(()=>i.path.replace(/[./]+/g,"_").replace(/_html$/,""));return(o,c)=>{const b=H("Content");return t(),r("div",{class:P(["VPDoc",{"has-sidebar":l(n),"has-aside":l(a)}])},[k(o.$slots,"doc-top",{},void 0,!0),d("div",Qi,[l(a)?(t(),r("div",{key:0,class:P(["aside",{"left-aside":l(p)}])},[c[0]||(c[0]=d("div",{class:"aside-curtain"},null,-1)),d("div",zi,[d("div",Yi,[y(xi,null,{"aside-top":g(()=>[k(o.$slots,"aside-top",{},void 0,!0)]),"aside-bottom":g(()=>[k(o.$slots,"aside-bottom",{},void 0,!0)]),"aside-outline-before":g(()=>[k(o.$slots,"aside-outline-before",{},void 0,!0)]),"aside-outline-after":g(()=>[k(o.$slots,"aside-outline-after",{},void 0,!0)]),"aside-ads-before":g(()=>[k(o.$slots,"aside-ads-before",{},void 0,!0)]),"aside-ads-after":g(()=>[k(o.$slots,"aside-ads-after",{},void 0,!0)]),_:3})])])],2)):E("",!0),d("div",Xi,[d("div",sa,[k(o.$slots,"doc-before",{},void 0,!0),d("main",ia,[y(b,{class:P(["vp-doc",[h.value,l(s).externalLinkIcon&&"external-link-icon-enabled"]])},null,8,["class"])]),y(Ki,null,{"doc-footer-before":g(()=>[k(o.$slots,"doc-footer-before",{},void 0,!0)]),_:3}),k(o.$slots,"doc-after",{},void 0,!0)])])]),k(o.$slots,"doc-bottom",{},void 0,!0)],2)}}}),na=v(aa,[["__scopeId","data-v-39a288b8"]]),ea=F({__name:"VPButton",props:{tag:{},size:{default:"medium"},theme:{default:"brand"},text:{},href:{},target:{},rel:{}},setup(e){const s=e,i=B(()=>s.href&&ms.test(s.href)),n=B(()=>s.tag||(s.href?"a":"button"));return(a,p)=>(t(),u(M(n.value),{class:P(["VPButton",[a.size,a.theme]]),href:a.href?l(gs)(a.href):void 0,target:s.target??(i.value?"_blank":void 0),rel:s.rel??(i.value?"noreferrer":void 0)},{default:g(()=>[j(x(a.text),1)]),_:1},8,["class","href","target","rel"]))}}),ta=v(ea,[["__scopeId","data-v-fa7799d5"]]),la=["src","alt"],pa=F({inheritAttrs:!1,__name:"VPImage",props:{image:{},alt:{}},setup(e){return(s,i)=>{const n=H("VPImage",!0);return s.image?(t(),r(T,{key:0},[typeof s.image=="string"||"src"in s.image?(t(),r("img",V({key:0,class:"VPImage"},typeof s.image=="string"?s.$attrs:{...s.image,...s.$attrs},{src:l(ds)(typeof s.image=="string"?s.image:s.image.src),alt:s.alt??(typeof s.image=="string"?"":s.image.alt||"")}),null,16,la)):(t(),r(T,{key:1},[y(n,V({class:"dark",image:s.image.dark,alt:s.image.alt},s.$attrs),null,16,["image","alt"]),y(n,V({class:"light",image:s.image.light,alt:s.image.alt},s.$attrs),null,16,["image","alt"])],64))],64)):E("",!0)}}}),K=v(pa,[["__scopeId","data-v-8426fc1a"]]),ha={class:"container"},ka={class:"main"},ra={class:"heading"},da=["innerHTML"],oa=["innerHTML"],ca=["innerHTML"],ga={key:0,class:"actions"},Ea={key:0,class:"image"},Fa={class:"image-container"},ya=F({__name:"VPHero",props:{name:{},text:{},tagline:{},image:{},actions:{}},setup(e){const s=X("hero-image-slot-exists");return(i,n)=>(t(),r("div",{class:P(["VPHero",{"has-image":i.image||l(s)}])},[d("div",ha,[d("div",ka,[k(i.$slots,"home-hero-info-before",{},void 0,!0),k(i.$slots,"home-hero-info",{},()=>[d("h1",ra,[i.name?(t(),r("span",{key:0,innerHTML:i.name,class:"name clip"},null,8,da)):E("",!0),i.text?(t(),r("span",{key:1,innerHTML:i.text,class:"text"},null,8,oa)):E("",!0)]),i.tagline?(t(),r("p",{key:0,innerHTML:i.tagline,class:"tagline"},null,8,ca)):E("",!0)],!0),k(i.$slots,"home-hero-info-after",{},void 0,!0),i.actions?(t(),r("div",ga,[(t(!0),r(T,null,q(i.actions,a=>(t(),r("div",{key:a.link,class:"action"},[y(ta,{tag:"a",size:"medium",theme:a.theme,text:a.text,href:a.link,target:a.target,rel:a.rel},null,8,["theme","text","href","target","rel"])]))),128))])):E("",!0),k(i.$slots,"home-hero-actions-after",{},void 0,!0)]),i.image||l(s)?(t(),r("div",Ea,[d("div",Fa,[n[0]||(n[0]=d("div",{class:"image-bg"},null,-1)),k(i.$slots,"home-hero-image",{},()=>[i.image?(t(),u(K,{key:0,class:"image-src",image:i.image},null,8,["image"])):E("",!0)],!0)])])):E("",!0)])],2))}}),ua=v(ya,[["__scopeId","data-v-4f9c455b"]]),Ca=F({__name:"VPHomeHero",setup(e){const{frontmatter:s}=A();return(i,n)=>l(s).hero?(t(),u(ua,{key:0,class:"VPHomeHero",name:l(s).hero.name,text:l(s).hero.text,tagline:l(s).hero.tagline,image:l(s).hero.image,actions:l(s).hero.actions},{"home-hero-info-before":g(()=>[k(i.$slots,"home-hero-info-before")]),"home-hero-info":g(()=>[k(i.$slots,"home-hero-info")]),"home-hero-info-after":g(()=>[k(i.$slots,"home-hero-info-after")]),"home-hero-actions-after":g(()=>[k(i.$slots,"home-hero-actions-after")]),"home-hero-image":g(()=>[k(i.$slots,"home-hero-image")]),_:3},8,["name","text","tagline","image","actions"])):E("",!0)}}),va={class:"box"},ba={key:0,class:"icon"},Ba=["innerHTML"],ma=["innerHTML"],Aa=["innerHTML"],Da={key:4,class:"link-text"},fa={class:"link-text-value"},Sa=F({__name:"VPFeature",props:{icon:{},title:{},details:{},link:{},linkText:{},rel:{},target:{}},setup(e){return(s,i)=>(t(),u(w,{class:"VPFeature",href:s.link,rel:s.rel,target:s.target,"no-icon":!0,tag:s.link?"a":"div"},{default:g(()=>[d("article",va,[typeof s.icon=="object"&&s.icon.wrap?(t(),r("div",ba,[y(K,{image:s.icon,alt:s.icon.alt,height:s.icon.height||48,width:s.icon.width||48},null,8,["image","alt","height","width"])])):typeof s.icon=="object"?(t(),u(K,{key:1,image:s.icon,alt:s.icon.alt,height:s.icon.height||48,width:s.icon.width||48},null,8,["image","alt","height","width"])):s.icon?(t(),r("div",{key:2,class:"icon",innerHTML:s.icon},null,8,Ba)):E("",!0),d("h2",{class:"title",innerHTML:s.title},null,8,ma),s.details?(t(),r("p",{key:3,class:"details",innerHTML:s.details},null,8,Aa)):E("",!0),s.linkText?(t(),r("div",Da,[d("p",fa,[j(x(s.linkText)+" ",1),i[0]||(i[0]=d("span",{class:"vpi-arrow-right link-text-icon"},null,-1))])])):E("",!0)])]),_:1},8,["href","rel","target","tag"]))}}),_a=v(Sa,[["__scopeId","data-v-a3976bdc"]]),xa={key:0,class:"VPFeatures"},Pa={class:"container"},Ta={class:"items"},$a=F({__name:"VPFeatures",props:{features:{}},setup(e){const s=e,i=B(()=>{const n=s.features.length;if(n){if(n===2)return"grid-2";if(n===3)return"grid-3";if(n%3===0)return"grid-6";if(n>3)return"grid-4"}else return});return(n,a)=>n.features?(t(),r("div",xa,[d("div",Pa,[d("div",Ta,[(t(!0),r(T,null,q(n.features,p=>(t(),r("div",{key:p.title,class:P(["item",[i.value]])},[y(_a,{icon:p.icon,title:p.title,details:p.details,link:p.link,"link-text":p.linkText,rel:p.rel,target:p.target},null,8,["icon","title","details","link","link-text","rel","target"])],2))),128))])])])):E("",!0)}}),La=v($a,[["__scopeId","data-v-a6181336"]]),qa=F({__name:"VPHomeFeatures",setup(e){const{frontmatter:s}=A();return(i,n)=>l(s).features?(t(),u(La,{key:0,class:"VPHomeFeatures",features:l(s).features},null,8,["features"])):E("",!0)}}),Na=F({__name:"VPHomeContent",setup(e){const{width:s}=Os({initialWidth:0,includeScrollbar:!1});return(i,n)=>(t(),r("div",{class:"vp-doc container",style:As(l(s)?{"--vp-offset":`calc(50% - ${l(s)/2}px)`}:{})},[k(i.$slots,"default",{},void 0,!0)],4))}}),Ma=v(Na,[["__scopeId","data-v-8e2d4988"]]),wa=F({__name:"VPHome",setup(e){const{frontmatter:s,theme:i}=A();return(n,a)=>{const p=H("Content");return t(),r("div",{class:P(["VPHome",{"external-link-icon-enabled":l(i).externalLinkIcon}])},[k(n.$slots,"home-hero-before",{},void 0,!0),y(Ca,null,{"home-hero-info-before":g(()=>[k(n.$slots,"home-hero-info-before",{},void 0,!0)]),"home-hero-info":g(()=>[k(n.$slots,"home-hero-info",{},void 0,!0)]),"home-hero-info-after":g(()=>[k(n.$slots,"home-hero-info-after",{},void 0,!0)]),"home-hero-actions-after":g(()=>[k(n.$slots,"home-hero-actions-after",{},void 0,!0)]),"home-hero-image":g(()=>[k(n.$slots,"home-hero-image",{},void 0,!0)]),_:3}),k(n.$slots,"home-hero-after",{},void 0,!0),k(n.$slots,"home-features-before",{},void 0,!0),y(qa),k(n.$slots,"home-features-after",{},void 0,!0),l(s).markdownStyles!==!1?(t(),u(Ma,{key:0},{default:g(()=>[y(p)]),_:1})):(t(),u(p,{key:1}))],2)}}}),Ia=v(wa,[["__scopeId","data-v-8b561e3d"]]),Oa={},Wa={class:"VPPage"};function Va(e,s){const i=H("Content");return t(),r("div",Wa,[k(e.$slots,"page-top"),y(i),k(e.$slots,"page-bottom")])}const Ra=v(Oa,[["render",Va]]),ja=F({__name:"VPContent",setup(e){const{page:s,frontmatter:i}=A(),{hasSidebar:n}=O();return(a,p)=>(t(),r("div",{class:P(["VPContent",{"has-sidebar":l(n),"is-home":l(i).layout==="home"}]),id:"VPContent"},[l(s).isNotFound?k(a.$slots,"not-found",{key:0},()=>[y(pi)],!0):l(i).layout==="page"?(t(),u(Ra,{key:1},{"page-top":g(()=>[k(a.$slots,"page-top",{},void 0,!0)]),"page-bottom":g(()=>[k(a.$slots,"page-bottom",{},void 0,!0)]),_:3})):l(i).layout==="home"?(t(),u(Ia,{key:2},{"home-hero-before":g(()=>[k(a.$slots,"home-hero-before",{},void 0,!0)]),"home-hero-info-before":g(()=>[k(a.$slots,"home-hero-info-before",{},void 0,!0)]),"home-hero-info":g(()=>[k(a.$slots,"home-hero-info",{},void 0,!0)]),"home-hero-info-after":g(()=>[k(a.$slots,"home-hero-info-after",{},void 0,!0)]),"home-hero-actions-after":g(()=>[k(a.$slots,"home-hero-actions-after",{},void 0,!0)]),"home-hero-image":g(()=>[k(a.$slots,"home-hero-image",{},void 0,!0)]),"home-hero-after":g(()=>[k(a.$slots,"home-hero-after",{},void 0,!0)]),"home-features-before":g(()=>[k(a.$slots,"home-features-before",{},void 0,!0)]),"home-features-after":g(()=>[k(a.$slots,"home-features-after",{},void 0,!0)]),_:3})):l(i).layout&&l(i).layout!=="doc"?(t(),u(M(l(i).layout),{key:3})):(t(),u(na,{key:4},{"doc-top":g(()=>[k(a.$slots,"doc-top",{},void 0,!0)]),"doc-bottom":g(()=>[k(a.$slots,"doc-bottom",{},void 0,!0)]),"doc-footer-before":g(()=>[k(a.$slots,"doc-footer-before",{},void 0,!0)]),"doc-before":g(()=>[k(a.$slots,"doc-before",{},void 0,!0)]),"doc-after":g(()=>[k(a.$slots,"doc-after",{},void 0,!0)]),"aside-top":g(()=>[k(a.$slots,"aside-top",{},void 0,!0)]),"aside-outline-before":g(()=>[k(a.$slots,"aside-outline-before",{},void 0,!0)]),"aside-outline-after":g(()=>[k(a.$slots,"aside-outline-after",{},void 0,!0)]),"aside-ads-before":g(()=>[k(a.$slots,"aside-ads-before",{},void 0,!0)]),"aside-ads-after":g(()=>[k(a.$slots,"aside-ads-after",{},void 0,!0)]),"aside-bottom":g(()=>[k(a.$slots,"aside-bottom",{},void 0,!0)]),_:3}))],2))}}),Za=v(ja,[["__scopeId","data-v-1428d186"]]),Ha={class:"container"},Ja=["innerHTML"],Ua=["innerHTML"],Ga=F({__name:"VPFooter",setup(e){const{theme:s,frontmatter:i}=A(),{hasSidebar:n}=O();return(a,p)=>l(s).footer&&l(i).footer!==!1?(t(),r("footer",{key:0,class:P(["VPFooter",{"has-sidebar":l(n)}])},[d("div",Ha,[l(s).footer.message?(t(),r("p",{key:0,class:"message",innerHTML:l(s).footer.message},null,8,Ja)):E("",!0),l(s).footer.copyright?(t(),r("p",{key:1,class:"copyright",innerHTML:l(s).footer.copyright},null,8,Ua)):E("",!0)])],2)):E("",!0)}}),Ka=v(Ga,[["__scopeId","data-v-e315a0ad"]]);function Qa(){const{theme:e,frontmatter:s}=A(),i=Bs([]),n=B(()=>i.value.length>0);return z(()=>{i.value=Es(s.value.outline??e.value.outline)}),{headers:i,hasLocalNav:n}}const za={class:"menu-text"},Ya={class:"header"},Xa={class:"outline"},sn=F({__name:"VPLocalNavOutlineDropdown",props:{headers:{},navHeight:{}},setup(e){const s=e,{theme:i}=A(),n=S(!1),a=S(0),p=S(),h=S();function o(C){var m;(m=p.value)!=null&&m.contains(C.target)||(n.value=!1)}I(n,C=>{if(C){document.addEventListener("click",o);return}document.removeEventListener("click",o)}),ls("Escape",()=>{n.value=!1}),z(()=>{n.value=!1});function c(){n.value=!n.value,a.value=window.innerHeight+Math.min(window.scrollY-s.navHeight,0)}function b(C){C.target.classList.contains("outline-link")&&(h.value&&(h.value.style.transition="none"),Ds(()=>{n.value=!1}))}function D(){n.value=!1,window.scrollTo({top:0,left:0,behavior:"smooth"})}return(C,m)=>(t(),r("div",{class:"VPLocalNavOutlineDropdown",style:As({"--vp-vh":a.value+"px"}),ref_key:"main",ref:p},[C.headers.length>0?(t(),r("button",{key:0,onClick:c,class:P({open:n.value})},[d("span",za,x(l(Ps)(l(i))),1),m[0]||(m[0]=d("span",{class:"vpi-chevron-right icon"},null,-1))],2)):(t(),r("button",{key:1,onClick:D},x(l(i).returnToTopLabel||"Return to top"),1)),y(rs,{name:"flyout"},{default:g(()=>[n.value?(t(),r("div",{key:0,ref_key:"items",ref:h,class:"items",onClick:b},[d("div",Ya,[d("a",{class:"top-link",href:"#",onClick:D},x(l(i).returnToTopLabel||"Return to top"),1)]),d("div",Xa,[y(Ts,{headers:C.headers},null,8,["headers"])])],512)):E("",!0)]),_:1})],4))}}),an=v(sn,[["__scopeId","data-v-8a42e2b4"]]),nn={class:"container"},en=["aria-expanded"],tn={class:"menu-text"},ln=F({__name:"VPLocalNav",props:{open:{type:Boolean}},emits:["open-menu"],setup(e){const{theme:s,frontmatter:i}=A(),{hasSidebar:n}=O(),{headers:a}=Qa(),{y:p}=fs(),h=S(0);R(()=>{h.value=parseInt(getComputedStyle(document.documentElement).getPropertyValue("--vp-nav-height"))}),z(()=>{a.value=Es(i.value.outline??s.value.outline)});const o=B(()=>a.value.length===0),c=B(()=>o.value&&!n.value),b=B(()=>({VPLocalNav:!0,"has-sidebar":n.value,empty:o.value,fixed:c.value}));return(D,C)=>l(i).layout!=="home"&&(!c.value||l(p)>=h.value)?(t(),r("div",{key:0,class:P(b.value)},[d("div",nn,[l(n)?(t(),r("button",{key:0,class:"menu","aria-expanded":D.open,"aria-controls":"VPSidebarNav",onClick:C[0]||(C[0]=m=>D.$emit("open-menu"))},[C[1]||(C[1]=d("span",{class:"vpi-align-left menu-icon"},null,-1)),d("span",tn,x(l(s).sidebarMenuLabel||"Menu"),1)],8,en)):E("",!0),y(an,{headers:l(a),navHeight:h.value},null,8,["headers","navHeight"])])],2)):E("",!0)}}),pn=v(ln,[["__scopeId","data-v-a6f0e41e"]]);function hn(){const e=S(!1);function s(){e.value=!0,window.addEventListener("resize",a)}function i(){e.value=!1,window.removeEventListener("resize",a)}function n(){e.value?i():s()}function a(){window.outerWidth>=768&&i()}const p=Y();return I(()=>p.path,i),{isScreenOpen:e,openScreen:s,closeScreen:i,toggleScreen:n}}const kn={},rn={class:"VPSwitch",type:"button",role:"switch"},dn={class:"check"},on={key:0,class:"icon"};function cn(e,s){return t(),r("button",rn,[d("span",dn,[e.$slots.default?(t(),r("span",on,[k(e.$slots,"default",{},void 0,!0)])):E("",!0)])])}const gn=v(kn,[["render",cn],["__scopeId","data-v-1d5665e3"]]),En=F({__name:"VPSwitchAppearance",setup(e){const{isDark:s,theme:i}=A(),n=X("toggle-appearance",()=>{s.value=!s.value}),a=S("");return cs(()=>{a.value=s.value?i.value.lightModeSwitchTitle||"Switch to light theme":i.value.darkModeSwitchTitle||"Switch to dark theme"}),(p,h)=>(t(),u(gn,{title:a.value,class:"VPSwitchAppearance","aria-checked":l(s),onClick:l(n)},{default:g(()=>h[0]||(h[0]=[d("span",{class:"vpi-sun sun"},null,-1),d("span",{class:"vpi-moon moon"},null,-1)])),_:1},8,["title","aria-checked","onClick"]))}}),Fs=v(En,[["__scopeId","data-v-5337faa4"]]),Fn={key:0,class:"VPNavBarAppearance"},yn=F({__name:"VPNavBarAppearance",setup(e){const{site:s}=A();return(i,n)=>l(s).appearance&&l(s).appearance!=="force-dark"&&l(s).appearance!=="force-auto"?(t(),r("div",Fn,[y(Fs)])):E("",!0)}}),un=v(yn,[["__scopeId","data-v-6c893767"]]),ys=S();let $s=!1,es=0;function Cn(e){const s=S(!1);if(ss){!$s&&vn(),es++;const i=I(ys,n=>{var a,p,h;n===e.el.value||(a=e.el.value)!=null&&a.contains(n)?(s.value=!0,(p=e.onFocus)==null||p.call(e)):(s.value=!1,(h=e.onBlur)==null||h.call(e))});os(()=>{i(),es--,es||bn()})}return Ws(s)}function vn(){document.addEventListener("focusin",Ls),$s=!0,ys.value=document.activeElement}function bn(){document.removeEventListener("focusin",Ls)}function Ls(){ys.value=document.activeElement}const Bn={class:"VPMenuLink"},mn=["innerHTML"],An=F({__name:"VPMenuLink",props:{item:{}},setup(e){const{page:s}=A();return(i,n)=>(t(),r("div",Bn,[y(w,{class:P({active:l(Z)(l(s).relativePath,i.item.activeMatch||i.item.link,!!i.item.activeMatch)}),href:i.item.link,target:i.item.target,rel:i.item.rel,"no-icon":i.item.noIcon},{default:g(()=>[d("span",{innerHTML:i.item.text},null,8,mn)]),_:1},8,["class","href","target","rel","no-icon"])]))}}),is=v(An,[["__scopeId","data-v-35975db6"]]),Dn={class:"VPMenuGroup"},fn={key:0,class:"title"},Sn=F({__name:"VPMenuGroup",props:{text:{},items:{}},setup(e){return(s,i)=>(t(),r("div",Dn,[s.text?(t(),r("p",fn,x(s.text),1)):E("",!0),(t(!0),r(T,null,q(s.items,n=>(t(),r(T,null,["link"in n?(t(),u(is,{key:0,item:n},null,8,["item"])):E("",!0)],64))),256))]))}}),_n=v(Sn,[["__scopeId","data-v-69e747b5"]]),xn={class:"VPMenu"},Pn={key:0,class:"items"},Tn=F({__name:"VPMenu",props:{items:{}},setup(e){return(s,i)=>(t(),r("div",xn,[s.items?(t(),r("div",Pn,[(t(!0),r(T,null,q(s.items,n=>(t(),r(T,{key:JSON.stringify(n)},["link"in n?(t(),u(is,{key:0,item:n},null,8,["item"])):"component"in n?(t(),u(M(n.component),V({key:1,ref_for:!0},n.props),null,16)):(t(),u(_n,{key:2,text:n.text,items:n.items},null,8,["text","items"]))],64))),128))])):E("",!0),k(s.$slots,"default",{},void 0,!0)]))}}),$n=v(Tn,[["__scopeId","data-v-b98bc113"]]),Ln=["aria-expanded","aria-label"],qn={key:0,class:"text"},Nn=["innerHTML"],Mn={key:1,class:"vpi-more-horizontal icon"},wn={class:"menu"},In=F({__name:"VPFlyout",props:{icon:{},button:{},label:{},items:{}},setup(e){const s=S(!1),i=S();Cn({el:i,onBlur:n});function n(){s.value=!1}return(a,p)=>(t(),r("div",{class:"VPFlyout",ref_key:"el",ref:i,onMouseenter:p[1]||(p[1]=h=>s.value=!0),onMouseleave:p[2]||(p[2]=h=>s.value=!1)},[d("button",{type:"button",class:"button","aria-haspopup":"true","aria-expanded":s.value,"aria-label":a.label,onClick:p[0]||(p[0]=h=>s.value=!s.value)},[a.button||a.icon?(t(),r("span",qn,[a.icon?(t(),r("span",{key:0,class:P([a.icon,"option-icon"])},null,2)):E("",!0),a.button?(t(),r("span",{key:1,innerHTML:a.button},null,8,Nn)):E("",!0),p[3]||(p[3]=d("span",{class:"vpi-chevron-down text-icon"},null,-1))])):(t(),r("span",Mn))],8,Ln),d("div",wn,[y($n,{items:a.items},{default:g(()=>[k(a.$slots,"default",{},void 0,!0)]),_:3},8,["items"])])],544))}}),us=v(In,[["__scopeId","data-v-cf11d7a2"]]),On=["href","aria-label","innerHTML"],Wn=F({__name:"VPSocialLink",props:{icon:{},link:{},ariaLabel:{}},setup(e){const s=e,i=S();R(async()=>{var p;await Ds();const a=(p=i.value)==null?void 0:p.children[0];a instanceof HTMLElement&&a.className.startsWith("vpi-social-")&&(getComputedStyle(a).maskImage||getComputedStyle(a).webkitMaskImage)==="none"&&a.style.setProperty("--icon",`url('https://api.iconify.design/simple-icons/${s.icon}.svg')`)});const n=B(()=>typeof s.icon=="object"?s.icon.svg:`<span class="vpi-social-${s.icon}"></span>`);return(a,p)=>(t(),r("a",{ref_key:"el",ref:i,class:"VPSocialLink no-icon",href:a.link,"aria-label":a.ariaLabel??(typeof a.icon=="string"?a.icon:""),target:"_blank",rel:"noopener",innerHTML:n.value},null,8,On))}}),Vn=v(Wn,[["__scopeId","data-v-bd121fe5"]]),Rn={class:"VPSocialLinks"},jn=F({__name:"VPSocialLinks",props:{links:{}},setup(e){return(s,i)=>(t(),r("div",Rn,[(t(!0),r(T,null,q(s.links,({link:n,icon:a,ariaLabel:p})=>(t(),u(Vn,{key:n,icon:a,link:n,ariaLabel:p},null,8,["icon","link","ariaLabel"]))),128))]))}}),Cs=v(jn,[["__scopeId","data-v-7bc22406"]]),Zn={key:0,class:"group translations"},Hn={class:"trans-title"},Jn={key:1,class:"group"},Un={class:"item appearance"},Gn={class:"label"},Kn={class:"appearance-action"},Qn={key:2,class:"group"},zn={class:"item social-links"},Yn=F({__name:"VPNavBarExtra",setup(e){const{site:s,theme:i}=A(),{localeLinks:n,currentLang:a}=U({correspondingLink:!0}),p=B(()=>n.value.length&&a.value.label||s.value.appearance||i.value.socialLinks);return(h,o)=>p.value?(t(),u(us,{key:0,class:"VPNavBarExtra",label:"extra navigation"},{default:g(()=>[l(n).length&&l(a).label?(t(),r("div",Zn,[d("p",Hn,x(l(a).label),1),(t(!0),r(T,null,q(l(n),c=>(t(),u(is,{key:c.link,item:c},null,8,["item"]))),128))])):E("",!0),l(s).appearance&&l(s).appearance!=="force-dark"&&l(s).appearance!=="force-auto"?(t(),r("div",Jn,[d("div",Un,[d("p",Gn,x(l(i).darkModeSwitchLabel||"Appearance"),1),d("div",Kn,[y(Fs)])])])):E("",!0),l(i).socialLinks?(t(),r("div",Qn,[d("div",zn,[y(Cs,{class:"social-links-list",links:l(i).socialLinks},null,8,["links"])])])):E("",!0)]),_:1})):E("",!0)}}),Xn=v(Yn,[["__scopeId","data-v-bb2aa2f0"]]),se=["aria-expanded"],ie=F({__name:"VPNavBarHamburger",props:{active:{type:Boolean}},emits:["click"],setup(e){return(s,i)=>(t(),r("button",{type:"button",class:P(["VPNavBarHamburger",{active:s.active}]),"aria-label":"mobile navigation","aria-expanded":s.active,"aria-controls":"VPNavScreen",onClick:i[0]||(i[0]=n=>s.$emit("click"))},i[1]||(i[1]=[d("span",{class:"container"},[d("span",{class:"top"}),d("span",{class:"middle"}),d("span",{class:"bottom"})],-1)]),10,se))}}),ae=v(ie,[["__scopeId","data-v-e5dd9c1c"]]),ne=["innerHTML"],ee=F({__name:"VPNavBarMenuLink",props:{item:{}},setup(e){const{page:s}=A();return(i,n)=>(t(),u(w,{class:P({VPNavBarMenuLink:!0,active:l(Z)(l(s).relativePath,i.item.activeMatch||i.item.link,!!i.item.activeMatch)}),href:i.item.link,target:i.item.target,rel:i.item.rel,"no-icon":i.item.noIcon,tabindex:"0"},{default:g(()=>[d("span",{innerHTML:i.item.text},null,8,ne)]),_:1},8,["class","href","target","rel","no-icon"]))}}),te=v(ee,[["__scopeId","data-v-e56f3d57"]]),le=F({__name:"VPNavBarMenuGroup",props:{item:{}},setup(e){const s=e,{page:i}=A(),n=p=>"component"in p?!1:"link"in p?Z(i.value.relativePath,p.link,!!s.item.activeMatch):p.items.some(n),a=B(()=>n(s.item));return(p,h)=>(t(),u(us,{class:P({VPNavBarMenuGroup:!0,active:l(Z)(l(i).relativePath,p.item.activeMatch,!!p.item.activeMatch)||a.value}),button:p.item.text,items:p.item.items},null,8,["class","button","items"]))}}),pe={key:0,"aria-labelledby":"main-nav-aria-label",class:"VPNavBarMenu"},he=F({__name:"VPNavBarMenu",setup(e){const{theme:s}=A();return(i,n)=>l(s).nav?(t(),r("nav",pe,[n[0]||(n[0]=d("span",{id:"main-nav-aria-label",class:"visually-hidden"}," Main Navigation ",-1)),(t(!0),r(T,null,q(l(s).nav,a=>(t(),r(T,{key:JSON.stringify(a)},["link"in a?(t(),u(te,{key:0,item:a},null,8,["item"])):"component"in a?(t(),u(M(a.component),V({key:1,ref_for:!0},a.props),null,16)):(t(),u(le,{key:2,item:a},null,8,["item"]))],64))),128))])):E("",!0)}}),ke=v(he,[["__scopeId","data-v-dc692963"]]);function re(e){const{localeIndex:s,theme:i}=A();function n(a){var $,L,f;const p=a.split("."),h=($=i.value.search)==null?void 0:$.options,o=h&&typeof h=="object",c=o&&((f=(L=h.locales)==null?void 0:L[s.value])==null?void 0:f.translations)||null,b=o&&h.translations||null;let D=c,C=b,m=e;const _=p.pop();for(const N of p){let W=null;const J=m==null?void 0:m[N];J&&(W=m=J);const as=C==null?void 0:C[N];as&&(W=C=as);const ns=D==null?void 0:D[N];ns&&(W=D=ns),J||(m=W),as||(C=W),ns||(D=W)}return(D==null?void 0:D[_])??(C==null?void 0:C[_])??(m==null?void 0:m[_])??""}return n}const de=["aria-label"],oe={class:"DocSearch-Button-Container"},ce={class:"DocSearch-Button-Placeholder"},vs=F({__name:"VPNavBarSearchButton",setup(e){const i=re({button:{buttonText:"Search",buttonAriaLabel:"Search"}});return(n,a)=>(t(),r("button",{type:"button",class:"DocSearch DocSearch-Button","aria-label":l(i)("button.buttonAriaLabel")},[d("span",oe,[a[0]||(a[0]=d("span",{class:"vp-icon DocSearch-Search-Icon"},null,-1)),d("span",ce,x(l(i)("button.buttonText")),1)]),a[1]||(a[1]=d("span",{class:"DocSearch-Button-Keys"},[d("kbd",{class:"DocSearch-Button-Key"}),d("kbd",{class:"DocSearch-Button-Key"},"K")],-1))],8,de))}}),ge={class:"VPNavBarSearch"},Ee={id:"local-search"},Fe={key:1,id:"docsearch"},ye=F({__name:"VPNavBarSearch",setup(e){const s=Vs(()=>Rs(()=>import("./VPLocalSearchBox.D6dHohBe.js"),__vite__mapDeps([0,1]))),i=()=>null,{theme:n}=A(),a=S(!1),p=S(!1);R(()=>{});function h(){a.value||(a.value=!0,setTimeout(o,16))}function o(){const C=new Event("keydown");C.key="k",C.metaKey=!0,window.dispatchEvent(C),setTimeout(()=>{document.querySelector(".DocSearch-Modal")||o()},16)}function c(C){const m=C.target,_=m.tagName;return m.isContentEditable||_==="INPUT"||_==="SELECT"||_==="TEXTAREA"}const b=S(!1);ls("k",C=>{(C.ctrlKey||C.metaKey)&&(C.preventDefault(),b.value=!0)}),ls("/",C=>{c(C)||(C.preventDefault(),b.value=!0)});const D="local";return(C,m)=>{var _;return t(),r("div",ge,[l(D)==="local"?(t(),r(T,{key:0},[b.value?(t(),u(l(s),{key:0,onClose:m[0]||(m[0]=$=>b.value=!1)})):E("",!0),d("div",Ee,[y(vs,{onClick:m[1]||(m[1]=$=>b.value=!0)})])],64)):l(D)==="algolia"?(t(),r(T,{key:1},[a.value?(t(),u(l(i),{key:0,algolia:((_=l(n).search)==null?void 0:_.options)??l(n).algolia,onVnodeBeforeMount:m[2]||(m[2]=$=>p.value=!0)},null,8,["algolia"])):E("",!0),p.value?E("",!0):(t(),r("div",Fe,[y(vs,{onClick:h})]))],64)):E("",!0)])}}}),ue=F({__name:"VPNavBarSocialLinks",setup(e){const{theme:s}=A();return(i,n)=>l(s).socialLinks?(t(),u(Cs,{key:0,class:"VPNavBarSocialLinks",links:l(s).socialLinks},null,8,["links"])):E("",!0)}}),Ce=v(ue,[["__scopeId","data-v-0394ad82"]]),ve=["href","rel","target"],be=["innerHTML"],Be={key:2},me=F({__name:"VPNavBarTitle",setup(e){const{site:s,theme:i}=A(),{hasSidebar:n}=O(),{currentLang:a}=U(),p=B(()=>{var c;return typeof i.value.logoLink=="string"?i.value.logoLink:(c=i.value.logoLink)==null?void 0:c.link}),h=B(()=>{var c;return typeof i.value.logoLink=="string"||(c=i.value.logoLink)==null?void 0:c.rel}),o=B(()=>{var c;return typeof i.value.logoLink=="string"||(c=i.value.logoLink)==null?void 0:c.target});return(c,b)=>(t(),r("div",{class:P(["VPNavBarTitle",{"has-sidebar":l(n)}])},[d("a",{class:"title",href:p.value??l(gs)(l(a).link),rel:h.value,target:o.value},[k(c.$slots,"nav-bar-title-before",{},void 0,!0),l(i).logo?(t(),u(K,{key:0,class:"logo",image:l(i).logo},null,8,["image"])):E("",!0),l(i).siteTitle?(t(),r("span",{key:1,innerHTML:l(i).siteTitle},null,8,be)):l(i).siteTitle===void 0?(t(),r("span",Be,x(l(s).title),1)):E("",!0),k(c.$slots,"nav-bar-title-after",{},void 0,!0)],8,ve)],2))}}),Ae=v(me,[["__scopeId","data-v-1168a8e4"]]),De={class:"items"},fe={class:"title"},Se=F({__name:"VPNavBarTranslations",setup(e){const{theme:s}=A(),{localeLinks:i,currentLang:n}=U({correspondingLink:!0});return(a,p)=>l(i).length&&l(n).label?(t(),u(us,{key:0,class:"VPNavBarTranslations",icon:"vpi-languages",label:l(s).langMenuLabel||"Change language"},{default:g(()=>[d("div",De,[d("p",fe,x(l(n).label),1),(t(!0),r(T,null,q(l(i),h=>(t(),u(is,{key:h.link,item:h},null,8,["item"]))),128))])]),_:1},8,["label"])):E("",!0)}}),_e=v(Se,[["__scopeId","data-v-88af2de4"]]),xe={class:"wrapper"},Pe={class:"container"},Te={class:"title"},$e={class:"content"},Le={class:"content-body"},qe=F({__name:"VPNavBar",props:{isScreenOpen:{type:Boolean}},emits:["toggle-screen"],setup(e){const s=e,{y:i}=fs(),{hasSidebar:n}=O(),{frontmatter:a}=A(),p=S({});return cs(()=>{p.value={"has-sidebar":n.value,home:a.value.layout==="home",top:i.value===0,"screen-open":s.isScreenOpen}}),(h,o)=>(t(),r("div",{class:P(["VPNavBar",p.value])},[d("div",xe,[d("div",Pe,[d("div",Te,[y(Ae,null,{"nav-bar-title-before":g(()=>[k(h.$slots,"nav-bar-title-before",{},void 0,!0)]),"nav-bar-title-after":g(()=>[k(h.$slots,"nav-bar-title-after",{},void 0,!0)]),_:3})]),d("div",$e,[d("div",Le,[k(h.$slots,"nav-bar-content-before",{},void 0,!0),y(ye,{class:"search"}),y(ke,{class:"menu"}),y(_e,{class:"translations"}),y(un,{class:"appearance"}),y(Ce,{class:"social-links"}),y(Xn,{class:"extra"}),k(h.$slots,"nav-bar-content-after",{},void 0,!0),y(ae,{class:"hamburger",active:h.isScreenOpen,onClick:o[0]||(o[0]=c=>h.$emit("toggle-screen"))},null,8,["active"])])])])]),o[1]||(o[1]=d("div",{class:"divider"},[d("div",{class:"divider-line"})],-1))],2))}}),Ne=v(qe,[["__scopeId","data-v-6aa21345"]]),Me={key:0,class:"VPNavScreenAppearance"},we={class:"text"},Ie=F({__name:"VPNavScreenAppearance",setup(e){const{site:s,theme:i}=A();return(n,a)=>l(s).appearance&&l(s).appearance!=="force-dark"&&l(s).appearance!=="force-auto"?(t(),r("div",Me,[d("p",we,x(l(i).darkModeSwitchLabel||"Appearance"),1),y(Fs)])):E("",!0)}}),Oe=v(Ie,[["__scopeId","data-v-b44890b2"]]),We=["innerHTML"],Ve=F({__name:"VPNavScreenMenuLink",props:{item:{}},setup(e){const s=X("close-screen");return(i,n)=>(t(),u(w,{class:"VPNavScreenMenuLink",href:i.item.link,target:i.item.target,rel:i.item.rel,"no-icon":i.item.noIcon,onClick:l(s)},{default:g(()=>[d("span",{innerHTML:i.item.text},null,8,We)]),_:1},8,["href","target","rel","no-icon","onClick"]))}}),Re=v(Ve,[["__scopeId","data-v-df37e6dd"]]),je=["innerHTML"],Ze=F({__name:"VPNavScreenMenuGroupLink",props:{item:{}},setup(e){const s=X("close-screen");return(i,n)=>(t(),u(w,{class:"VPNavScreenMenuGroupLink",href:i.item.link,target:i.item.target,rel:i.item.rel,"no-icon":i.item.noIcon,onClick:l(s)},{default:g(()=>[d("span",{innerHTML:i.item.text},null,8,je)]),_:1},8,["href","target","rel","no-icon","onClick"]))}}),qs=v(Ze,[["__scopeId","data-v-3e9c20e4"]]),He={class:"VPNavScreenMenuGroupSection"},Je={key:0,class:"title"},Ue=F({__name:"VPNavScreenMenuGroupSection",props:{text:{},items:{}},setup(e){return(s,i)=>(t(),r("div",He,[s.text?(t(),r("p",Je,x(s.text),1)):E("",!0),(t(!0),r(T,null,q(s.items,n=>(t(),u(qs,{key:n.text,item:n},null,8,["item"]))),128))]))}}),Ge=v(Ue,[["__scopeId","data-v-8133b170"]]),Ke=["aria-controls","aria-expanded"],Qe=["innerHTML"],ze=["id"],Ye={key:0,class:"item"},Xe={key:1,class:"item"},st={key:2,class:"group"},it=F({__name:"VPNavScreenMenuGroup",props:{text:{},items:{}},setup(e){const s=e,i=S(!1),n=B(()=>`NavScreenGroup-${s.text.replace(" ","-").toLowerCase()}`);function a(){i.value=!i.value}return(p,h)=>(t(),r("div",{class:P(["VPNavScreenMenuGroup",{open:i.value}])},[d("button",{class:"button","aria-controls":n.value,"aria-expanded":i.value,onClick:a},[d("span",{class:"button-text",innerHTML:p.text},null,8,Qe),h[0]||(h[0]=d("span",{class:"vpi-plus button-icon"},null,-1))],8,Ke),d("div",{id:n.value,class:"items"},[(t(!0),r(T,null,q(p.items,o=>(t(),r(T,{key:JSON.stringify(o)},["link"in o?(t(),r("div",Ye,[y(qs,{item:o},null,8,["item"])])):"component"in o?(t(),r("div",Xe,[(t(),u(M(o.component),V({ref_for:!0},o.props,{"screen-menu":""}),null,16))])):(t(),r("div",st,[y(Ge,{text:o.text,items:o.items},null,8,["text","items"])]))],64))),128))],8,ze)],2))}}),at=v(it,[["__scopeId","data-v-b9ab8c58"]]),nt={key:0,class:"VPNavScreenMenu"},et=F({__name:"VPNavScreenMenu",setup(e){const{theme:s}=A();return(i,n)=>l(s).nav?(t(),r("nav",nt,[(t(!0),r(T,null,q(l(s).nav,a=>(t(),r(T,{key:JSON.stringify(a)},["link"in a?(t(),u(Re,{key:0,item:a},null,8,["item"])):"component"in a?(t(),u(M(a.component),V({key:1,ref_for:!0},a.props,{"screen-menu":""}),null,16)):(t(),u(at,{key:2,text:a.text||"",items:a.items},null,8,["text","items"]))],64))),128))])):E("",!0)}}),tt=F({__name:"VPNavScreenSocialLinks",setup(e){const{theme:s}=A();return(i,n)=>l(s).socialLinks?(t(),u(Cs,{key:0,class:"VPNavScreenSocialLinks",links:l(s).socialLinks},null,8,["links"])):E("",!0)}}),lt={class:"list"},pt=F({__name:"VPNavScreenTranslations",setup(e){const{localeLinks:s,currentLang:i}=U({correspondingLink:!0}),n=S(!1);function a(){n.value=!n.value}return(p,h)=>l(s).length&&l(i).label?(t(),r("div",{key:0,class:P(["VPNavScreenTranslations",{open:n.value}])},[d("button",{class:"title",onClick:a},[h[0]||(h[0]=d("span",{class:"vpi-languages icon lang"},null,-1)),j(" "+x(l(i).label)+" ",1),h[1]||(h[1]=d("span",{class:"vpi-chevron-down icon chevron"},null,-1))]),d("ul",lt,[(t(!0),r(T,null,q(l(s),o=>(t(),r("li",{key:o.link,class:"item"},[y(w,{class:"link",href:o.link},{default:g(()=>[j(x(o.text),1)]),_:2},1032,["href"])]))),128))])],2)):E("",!0)}}),ht=v(pt,[["__scopeId","data-v-858fe1a4"]]),kt={class:"container"},rt=F({__name:"VPNavScreen",props:{open:{type:Boolean}},setup(e){const s=S(null),i=Ss(ss?document.body:null);return(n,a)=>(t(),u(rs,{name:"fade",onEnter:a[0]||(a[0]=p=>i.value=!0),onAfterLeave:a[1]||(a[1]=p=>i.value=!1)},{default:g(()=>[n.open?(t(),r("div",{key:0,class:"VPNavScreen",ref_key:"screen",ref:s,id:"VPNavScreen"},[d("div",kt,[k(n.$slots,"nav-screen-content-before",{},void 0,!0),y(et,{class:"menu"}),y(ht,{class:"translations"}),y(Oe,{class:"appearance"}),y(tt,{class:"social-links"}),k(n.$slots,"nav-screen-content-after",{},void 0,!0)])],512)):E("",!0)]),_:3}))}}),dt=v(rt,[["__scopeId","data-v-f2779853"]]),ot={key:0,class:"VPNav"},ct=F({__name:"VPNav",setup(e){const{isScreenOpen:s,closeScreen:i,toggleScreen:n}=hn(),{frontmatter:a}=A(),p=B(()=>a.value.navbar!==!1);return _s("close-screen",i),Q(()=>{ss&&document.documentElement.classList.toggle("hide-nav",!p.value)}),(h,o)=>p.value?(t(),r("header",ot,[y(Ne,{"is-screen-open":l(s),onToggleScreen:l(n)},{"nav-bar-title-before":g(()=>[k(h.$slots,"nav-bar-title-before",{},void 0,!0)]),"nav-bar-title-after":g(()=>[k(h.$slots,"nav-bar-title-after",{},void 0,!0)]),"nav-bar-content-before":g(()=>[k(h.$slots,"nav-bar-content-before",{},void 0,!0)]),"nav-bar-content-after":g(()=>[k(h.$slots,"nav-bar-content-after",{},void 0,!0)]),_:3},8,["is-screen-open","onToggleScreen"]),y(dt,{open:l(s)},{"nav-screen-content-before":g(()=>[k(h.$slots,"nav-screen-content-before",{},void 0,!0)]),"nav-screen-content-after":g(()=>[k(h.$slots,"nav-screen-content-after",{},void 0,!0)]),_:3},8,["open"])])):E("",!0)}}),gt=v(ct,[["__scopeId","data-v-ae24b3ad"]]),Et=["role","tabindex"],Ft={key:1,class:"items"},yt=F({__name:"VPSidebarItem",props:{item:{},depth:{}},setup(e){const s=e,{collapsed:i,collapsible:n,isLink:a,isActiveLink:p,hasActiveLink:h,hasChildren:o,toggle:c}=di(B(()=>s.item)),b=B(()=>o.value?"section":"div"),D=B(()=>a.value?"a":"div"),C=B(()=>o.value?s.depth+2===7?"p":`h${s.depth+2}`:"p"),m=B(()=>a.value?void 0:"button"),_=B(()=>[[`level-${s.depth}`],{collapsible:n.value},{collapsed:i.value},{"is-link":a.value},{"is-active":p.value},{"has-active":h.value}]);function $(f){"key"in f&&f.key!=="Enter"||!s.item.link&&c()}function L(){s.item.link&&c()}return(f,N)=>{const W=H("VPSidebarItem",!0);return t(),u(M(b.value),{class:P(["VPSidebarItem",_.value])},{default:g(()=>[f.item.text?(t(),r("div",V({key:0,class:"item",role:m.value},js(f.item.items?{click:$,keydown:$}:{},!0),{tabindex:f.item.items&&0}),[N[1]||(N[1]=d("div",{class:"indicator"},null,-1)),f.item.link?(t(),u(w,{key:0,tag:D.value,class:"link",href:f.item.link,rel:f.item.rel,target:f.item.target},{default:g(()=>[(t(),u(M(C.value),{class:"text",innerHTML:f.item.text},null,8,["innerHTML"]))]),_:1},8,["tag","href","rel","target"])):(t(),u(M(C.value),{key:1,class:"text",innerHTML:f.item.text},null,8,["innerHTML"])),f.item.collapsed!=null&&f.item.items&&f.item.items.length?(t(),r("div",{key:2,class:"caret",role:"button","aria-label":"toggle section",onClick:L,onKeydown:Zs(L,["enter"]),tabindex:"0"},N[0]||(N[0]=[d("span",{class:"vpi-chevron-right caret-icon"},null,-1)]),32)):E("",!0)],16,Et)):E("",!0),f.item.items&&f.item.items.length?(t(),r("div",Ft,[f.depth<5?(t(!0),r(T,{key:0},q(f.item.items,J=>(t(),u(W,{key:J.text,item:J,depth:f.depth+1},null,8,["item","depth"]))),128)):E("",!0)])):E("",!0)]),_:1},8,["class"])}}}),ut=v(yt,[["__scopeId","data-v-b3fd67f8"]]),Ct=F({__name:"VPSidebarGroup",props:{items:{}},setup(e){const s=S(!0);let i=null;return R(()=>{i=setTimeout(()=>{i=null,s.value=!1},300)}),Hs(()=>{i!=null&&(clearTimeout(i),i=null)}),(n,a)=>(t(!0),r(T,null,q(n.items,p=>(t(),r("div",{key:p.text,class:P(["group",{"no-transition":s.value}])},[y(ut,{item:p,depth:0},null,8,["item"])],2))),128))}}),vt=v(Ct,[["__scopeId","data-v-c40bc020"]]),bt={class:"nav",id:"VPSidebarNav","aria-labelledby":"sidebar-aria-label",tabindex:"-1"},Bt=F({__name:"VPSidebar",props:{open:{type:Boolean}},setup(e){const{sidebarGroups:s,hasSidebar:i}=O(),n=e,a=S(null),p=Ss(ss?document.body:null);I([n,a],()=>{var o;n.open?(p.value=!0,(o=a.value)==null||o.focus()):p.value=!1},{immediate:!0,flush:"post"});const h=S(0);return I(s,()=>{h.value+=1},{deep:!0}),(o,c)=>l(i)?(t(),r("aside",{key:0,class:P(["VPSidebar",{open:o.open}]),ref_key:"navEl",ref:a,onClick:c[0]||(c[0]=Js(()=>{},["stop"]))},[c[2]||(c[2]=d("div",{class:"curtain"},null,-1)),d("nav",bt,[c[1]||(c[1]=d("span",{class:"visually-hidden",id:"sidebar-aria-label"}," Sidebar Navigation ",-1)),k(o.$slots,"sidebar-nav-before",{},void 0,!0),(t(),u(vt,{items:l(s),key:h.value},null,8,["items"])),k(o.$slots,"sidebar-nav-after",{},void 0,!0)])],2)):E("",!0)}}),mt=v(Bt,[["__scopeId","data-v-319d5ca6"]]),At=F({__name:"VPSkipLink",setup(e){const{theme:s}=A(),i=Y(),n=S();I(()=>i.path,()=>n.value.focus());function a({target:p}){const h=document.getElementById(decodeURIComponent(p.hash).slice(1));if(h){const o=()=>{h.removeAttribute("tabindex"),h.removeEventListener("blur",o)};h.setAttribute("tabindex","-1"),h.addEventListener("blur",o),h.focus(),window.scrollTo(0,0)}}return(p,h)=>(t(),r(T,null,[d("span",{ref_key:"backToTop",ref:n,tabindex:"-1"},null,512),d("a",{href:"#VPContent",class:"VPSkipLink visually-hidden",onClick:a},x(l(s).skipToContentLabel||"Skip to content"),1)],64))}}),Dt=v(At,[["__scopeId","data-v-0b0ada53"]]),ft=F({__name:"Layout",setup(e){const{isOpen:s,open:i,close:n}=O(),a=Y();I(()=>a.path,n),ri(s,n);const{frontmatter:p}=A(),h=Us(),o=B(()=>!!h["home-hero-image"]);return _s("hero-image-slot-exists",o),(c,b)=>{const D=H("Content");return l(p).layout!==!1?(t(),r("div",{key:0,class:P(["Layout",l(p).pageClass])},[k(c.$slots,"layout-top",{},void 0,!0),y(Dt),y(zs,{class:"backdrop",show:l(s),onClick:l(n)},null,8,["show","onClick"]),y(gt,null,{"nav-bar-title-before":g(()=>[k(c.$slots,"nav-bar-title-before",{},void 0,!0)]),"nav-bar-title-after":g(()=>[k(c.$slots,"nav-bar-title-after",{},void 0,!0)]),"nav-bar-content-before":g(()=>[k(c.$slots,"nav-bar-content-before",{},void 0,!0)]),"nav-bar-content-after":g(()=>[k(c.$slots,"nav-bar-content-after",{},void 0,!0)]),"nav-screen-content-before":g(()=>[k(c.$slots,"nav-screen-content-before",{},void 0,!0)]),"nav-screen-content-after":g(()=>[k(c.$slots,"nav-screen-content-after",{},void 0,!0)]),_:3}),y(pn,{open:l(s),onOpenMenu:l(i)},null,8,["open","onOpenMenu"]),y(mt,{open:l(s)},{"sidebar-nav-before":g(()=>[k(c.$slots,"sidebar-nav-before",{},void 0,!0)]),"sidebar-nav-after":g(()=>[k(c.$slots,"sidebar-nav-after",{},void 0,!0)]),_:3},8,["open"]),y(Za,null,{"page-top":g(()=>[k(c.$slots,"page-top",{},void 0,!0)]),"page-bottom":g(()=>[k(c.$slots,"page-bottom",{},void 0,!0)]),"not-found":g(()=>[k(c.$slots,"not-found",{},void 0,!0)]),"home-hero-before":g(()=>[k(c.$slots,"home-hero-before",{},void 0,!0)]),"home-hero-info-before":g(()=>[k(c.$slots,"home-hero-info-before",{},void 0,!0)]),"home-hero-info":g(()=>[k(c.$slots,"home-hero-info",{},void 0,!0)]),"home-hero-info-after":g(()=>[k(c.$slots,"home-hero-info-after",{},void 0,!0)]),"home-hero-actions-after":g(()=>[k(c.$slots,"home-hero-actions-after",{},void 0,!0)]),"home-hero-image":g(()=>[k(c.$slots,"home-hero-image",{},void 0,!0)]),"home-hero-after":g(()=>[k(c.$slots,"home-hero-after",{},void 0,!0)]),"home-features-before":g(()=>[k(c.$slots,"home-features-before",{},void 0,!0)]),"home-features-after":g(()=>[k(c.$slots,"home-features-after",{},void 0,!0)]),"doc-footer-before":g(()=>[k(c.$slots,"doc-footer-before",{},void 0,!0)]),"doc-before":g(()=>[k(c.$slots,"doc-before",{},void 0,!0)]),"doc-after":g(()=>[k(c.$slots,"doc-after",{},void 0,!0)]),"doc-top":g(()=>[k(c.$slots,"doc-top",{},void 0,!0)]),"doc-bottom":g(()=>[k(c.$slots,"doc-bottom",{},void 0,!0)]),"aside-top":g(()=>[k(c.$slots,"aside-top",{},void 0,!0)]),"aside-bottom":g(()=>[k(c.$slots,"aside-bottom",{},void 0,!0)]),"aside-outline-before":g(()=>[k(c.$slots,"aside-outline-before",{},void 0,!0)]),"aside-outline-after":g(()=>[k(c.$slots,"aside-outline-after",{},void 0,!0)]),"aside-ads-before":g(()=>[k(c.$slots,"aside-ads-before",{},void 0,!0)]),"aside-ads-after":g(()=>[k(c.$slots,"aside-ads-after",{},void 0,!0)]),_:3}),y(Ka),k(c.$slots,"layout-bottom",{},void 0,!0)],2)):(t(),u(D,{key:1}))}}}),St=v(ft,[["__scopeId","data-v-5d98c3a5"]]),_t={Layout:St,enhanceApp:({app:e})=>{e.component("Badge",Gs)}},xt=JSON.parse('[{"categories":".NET","title":"存储和检索 JSON 文件","url":"/category/dotnet/存储和检索 JSON 文件.html","excerpt":"","date":{"time":1761912000000,"string":"October 31, 2025"}},{"categories":".NET","title":"文件输入和输出","url":"/category/dotnet/文件输入和输出.html","excerpt":"","date":{"time":1761825600000,"string":"October 30, 2025"}},{"categories":".NET","title":"第一个 EF Core 应用","url":"/category/dotnet/第一个 EF Core 应用.html","excerpt":"","date":{"time":1761307200000,"string":"October 24, 2025"}},{"categories":".NET","title":"在 .NET 中使用 SQLite 数据库","url":"/category/dotnet/在 dotnet 中使用 sqlite 数据库.html","excerpt":"","date":{"time":1761220800000,"string":"October 23, 2025"}},{"categories":".NET","title":"使用 Blazor 构建 Web 应用","url":"/category/dotnet/使用 Blazor 构建 Web 应用.html","excerpt":"","date":{"time":1755950400000,"string":"August 23, 2025"}},{"categories":".NET","title":"了解 ASP.NET Core 基础知识","url":"/category/dotnet/了解 ASP-NET Core 基础知识.html","excerpt":"<h1 id=\\"了解-asp-net-core-基础知识\\" tabindex=\\"-1\\">了解 ASP.NET Core 基础知识 <a class=\\"header-anchor\\" href=\\"#了解-asp-net-core-基础知识\\" aria-label=\\"Permalink to &quot;了解 ASP.NET Core 基础知识&quot;\\">&ZeroWidthSpace;</a></h1>\\n<h2 id=\\"asp-net-core-项目模板\\" tabindex=\\"-1\\">ASP.NET Core 项目模板 <a class=\\"header-anchor\\" href=\\"#asp-net-core-项目模板\\" aria-label=\\"Permalink to &quot;ASP.NET Core 项目模板&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>.NET SDK 包括用于创建 ASP.NET Core 项目和文件的内置模板。 ASP.NET Core 项目模板用于使用必要的文件、文件夹和配置来创建新的 ASP.NET Core 项目，以便高效地搭建并运行项目。</p>\\n<p>安装 .NET SDK 后，可以在终端或命令提示符中运行 .NET CLI （命令行接口）命令。 若要列出内置模板，请运行 <code>dotnet new list</code> 命令：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> dotnet</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> new</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> list</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">这些模板已匹配你的输入:</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">模板名</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                                   短名称</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                      语言</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        标记</span></span></code></pre>\\n</div>","date":{"time":1744459200000,"string":"April 12, 2025"}},{"categories":".NET","title":"使用 ASP.NET Core 控制器创建 Web API","url":"/category/dotnet/使用 ASP-NET Core 控制器创建 Web API.html","excerpt":"","date":{"time":1741867200000,"string":"March 13, 2025"}},{"categories":".NET","title":".NET 入门","url":"/category/dotnet/dotnet 入门.html","excerpt":"","date":{"time":1717588800000,"string":"June 5, 2024"}},{"categories":"Other","title":"OpenVPN","url":"/other/OpenVPN.html","excerpt":"<h1 id=\\"openvpn\\" tabindex=\\"-1\\">OpenVPN <a class=\\"header-anchor\\" href=\\"#openvpn\\" aria-label=\\"Permalink to &quot;OpenVPN&quot;\\">&ZeroWidthSpace;</a></h1>\\n<h2 id=\\"步骤1-安装openvpn和easy-rsa\\" tabindex=\\"-1\\">步骤1 -安装OpenVPN和Easy-RSA <a class=\\"header-anchor\\" href=\\"#步骤1-安装openvpn和easy-rsa\\" aria-label=\\"Permalink to &quot;步骤1 -安装OpenVPN和Easy-RSA&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>Easy-RSA是一种公钥基础设施（PKI）管理工具，您将在OpenVPN服务器上使用它来生成证书请求，然后在CA服务器上验证和签名。</p>\\n<p>首先，更新OpenVPN服务器的软件包索引并安装OpenVPN和Easy-RSA。这两个包都可以在Ubuntu的默认仓库中找到，所以你可以使用<code>apt</code>来安装：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> sudo</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> apt</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> update</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> sudo</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> apt</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> install</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> openvpn</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> easy-rsa</span></span></code></pre>\\n</div><p>接下来，您需要在OpenVPN服务器上创建一个新目录，作为您的非root用户，称为<code>~/easy-rsa</code>：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> mkdir</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ~/easy-rsa</span></span></code></pre>\\n</div><p>现在，您需要从软件包安装到您刚刚创建的<code>easyrsa</code>目录中的<code>~/easy-rsa</code>脚本创建一个符号链接：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ln</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -s</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /usr/share/easy-rsa/</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">*</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ~/easy-rsa/</span></span></code></pre>\\n</div><p>一旦这些程序被安装并移动到系统上的正确位置，下一步就是在OpenVPN服务器上创建公钥基础设施（PKI），以便您可以为将连接到您的VPN的客户端和其他服务器请求和管理TLS证书。</p>\\n<h2 id=\\"步骤2-为openvpn创建pki-公钥基础设施\\" tabindex=\\"-1\\">步骤2 -为OpenVPN创建PKI（公钥基础设施） <a class=\\"header-anchor\\" href=\\"#步骤2-为openvpn创建pki-公钥基础设施\\" aria-label=\\"Permalink to &quot;步骤2 -为OpenVPN创建PKI（公钥基础设施）&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>在创建OpenVPN服务器的私钥和证书之前，您需要在OpenVPN服务器上创建本地公钥基础设施目录。您将使用此目录来管理服务器和客户端的证书请求，而不是直接在CA服务器上进行请求。</p>\\n<p>要在OpenVPN服务器上构建PKI目录，您需要使用一些默认值填充名为<code>vars</code>的文件。首先，您将<code>cd</code>进入<code>easy-rsa</code>目录，然后使用nano或您喜欢的文本编辑器创建和编辑<code>vars</code>文件。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> cd</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ~/easy-rsa</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> nano</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> vars</span></span></code></pre>\\n</div><p>打开文件后，粘贴以下两行：</p>\\n<div class=\\"language-conf vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">conf</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span>set_var EASYRSA_ALGO \\"ec\\"</span></span>\\n<span class=\\"line\\"><span>set_var EASYRSA_DIGEST \\"sha512\\"</span></span></code></pre>\\n</div><p>这是您在OpenVPN服务器上的<code>vars</code>文件中需要的唯一两行，因为它不会用作证书颁发机构。他们将确保您的私钥和证书请求配置为使用现代椭圆曲线加密（ECC）来为您的客户端和OpenVPN服务器生成密钥和安全签名。</p>\\n<p>将OpenVPN CA服务器配置为使用ECC意味着当客户端和服务器尝试建立共享对称密钥时，它们可以使用椭圆曲线算法进行交换。使用ECC进行密钥交换比使用普通的Diffie-Hellman和经典的RSA算法要快得多，因为数字要小得多，计算也更快。</p>\\n<p>一旦您填充了<code>vars</code>文件，您就可以继续创建PKI目录。为此，请运行带有<code>easyrsa</code>选项的<code>init-pki</code>脚本。虽然您已经在CA服务器上运行此命令作为先决条件的一部分，但仍有必要在此处运行它，因为您的OpenVPN服务器和CA服务器具有单独的PKI目录：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ./easyrsa</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> init-pki</span></span></code></pre>\\n</div><p>请注意，在您的OpenVPN服务器上，无需创建证书颁发机构。您的CA服务器单独负责验证和签署证书。VPN服务器上的PKI仅用作存储证书请求和公共证书的方便和集中的地方。</p>\\n<p>在OpenVPN服务器上初始化PKI后，您可以继续进行下一步，即创建OpenVPN服务器证书请求和私钥。</p>\\n<h2 id=\\"步骤3-创建openvpn服务器证书请求和私钥\\" tabindex=\\"-1\\">步骤3 -创建OpenVPN服务器证书请求和私钥 <a class=\\"header-anchor\\" href=\\"#步骤3-创建openvpn服务器证书请求和私钥\\" aria-label=\\"Permalink to &quot;步骤3 -创建OpenVPN服务器证书请求和私钥&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>现在您的OpenVPN服务器已安装所有先决条件，下一步是在OpenVPN服务器上生成私钥和证书签名请求（CSR）。之后，您将请求传输到您的CA进行签名，创建所需的证书。一旦你有一个签名的证书，你会把它传输回OpenVPN服务器，并安装它供服务器使用。</p>\\n<p>首先，以非root用户身份导航到OpenVPN服务器上的<code>~/easy-rsa</code>目录：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> cd</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ~/easy-rsa</span></span></code></pre>\\n</div><p>现在，您将使用<code>easyrsa</code>选项调用<code>gen-req</code>，后跟计算机的通用名称（CN）。CN可以是你喜欢的任何东西，但它可以是有帮助的，使它成为描述性的东西。在本教程中，OpenVPN服务器的CN将是<code>server</code>。请确保包含<code>nopass</code>选项。如果不这样做，将对请求文件进行密码保护，这可能会导致以后的权限问题。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ./easyrsa</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> gen-req</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> server</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> nopass</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Common</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Name</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (eg: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">your</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> user,</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> host,</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> or</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> server</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> name</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) [server]:</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Keypair</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> and</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> certificate</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> request</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> completed.</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Your</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> files</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> are:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">req:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /root/easy-rsa/pki/reqs/server.req</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">key:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /root/easy-rsa/pki/private/server.key</span></span></code></pre>\\n</div><p>这将为服务器创建一个私钥和一个名为<code>server.req</code>的证书请求文件。将服务器密钥复制到<code>/etc/openvpn/server</code>目录：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> sudo</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> cp</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /root/easy-rsa/pki/private/server.key</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /etc/openvpn/server/</span></span></code></pre>\\n</div><p>完成这些步骤后，您已成功为OpenVPN服务器创建了私钥。您还为OpenVPN服务器生成了证书签名请求。CSR现在已准备好供CA签名。在本教程的下一节中，您将学习如何使用CA服务器的私钥对CSR进行签名。</p>\\n<h2 id=\\"步骤4-签署openvpn服务器的证书请求\\" tabindex=\\"-1\\">步骤4 -签署OpenVPN服务器的证书请求 <a class=\\"header-anchor\\" href=\\"#步骤4-签署openvpn服务器的证书请求\\" aria-label=\\"Permalink to &quot;步骤4 -签署OpenVPN服务器的证书请求&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>在上一步中，您为OpenVPN服务器创建了证书签名请求（CSR）和私钥。现在CA服务器需要知道<code>server</code>证书并验证它。一旦CA验证并将证书中继回OpenVPN服务器，信任您的CA的客户端也将能够信任OpenVPN服务器。</p>\\n<p>在OpenVPN服务器上，作为非root用户，使用SCP或其他传输方法将server.req证书请求复制到CA服务器进行签名：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> scp</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /home/sammy/easy-rsa/pki/reqs/server.req</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> sammy@your_ca_server_ip:/tmp</span></span></code></pre>\\n</div><p>如果您遵循了如何在Ubuntu 22.04上设置和配置证书颁发机构（CA）的先决条件教程，下一步是以您创建的用于管理CA的非root用户身份登录CA服务器。您将<code>cd</code>转到创建PK的<code>~/easy-rsa</code>目录，然后使用<code>easyrsa</code>脚本导入证书请求：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> cd</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ~/easy-rsa</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ./easyrsa</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> import-req</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /root/easy-rsa/pki/reqs/server.req</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> server</span></span></code></pre>\\n</div><div class=\\"tip custom-block\\"><p class=\\"custom-block-title\\">本机作为CA服务器</p>\\n<p>要为证书颁发机构创建根公钥和私钥对，请再次运行<code>./easy-rsa</code>命令，这次使用<code>build-ca</code>选项：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> cd</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ~/easy-rsa</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ./easyrsa</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> build-ca</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Enter</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> New</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> CA</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Key</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Passphrase:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Re-Enter</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> New</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> CA</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Key</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Passphrase:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">You</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> are</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> about</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> to</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> be</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> asked</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> to</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> enter</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> information</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> that</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> will</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> be</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> incorporated</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">into</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> your</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> certificate</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> request.</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">What</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> you</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> are</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> about</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> to</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> enter</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> is</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> what</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> is</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> called</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> a</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Distinguished</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Name</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> or</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> a</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> DN.</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">There</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> are</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> quite</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> a</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> few</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> fields</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> but</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> you</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> can</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> leave</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> some</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> blank</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">For</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> some</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> fields</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> there</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> will</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> be</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> a</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> default</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> value,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">If</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> you</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> enter</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'.\',</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> the</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> field</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> will</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> be</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> left</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> blank.</span></span></code></pre>\\n</div></div>\\n","date":{"time":1717070400000,"string":"May 30, 2024"}},{"categories":"Java","title":"Activiti 6","url":"/category/java/Activiti 6.html","excerpt":"","date":{"time":1691841600000,"string":"August 12, 2023"}},{"categories":"Java","title":"OptaPlanner","url":"/category/java/OptaPlanner.html","excerpt":"<h1 id=\\"optaplanner\\" tabindex=\\"-1\\">OptaPlanner <a class=\\"header-anchor\\" href=\\"#optaplanner\\" aria-label=\\"Permalink to &quot;OptaPlanner&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>OptaPlanner 是一个AI(人工智能)约束求解器，它可以优化规划和调度问题，例如:车辆路线规划，人员排班，云端优化，任务分配，会议日程安排，生产车间调度，背包问题及很多其它规划类问题。每个组织都面临着以下挑战: 需要将一组有限的、受约束的资源（如员工，资产，时间 和/或资金）分配到产品或服务中去。OptaPlanner提供更高效的规划，从而降低生产成本并提高服务质量。</p>\\n<p>OptaPlanner是一款轻量级，可嵌入的规划引擎。通过它，我们使普通的Java™程序，即可有效地解决优化问题。它还与其它JVM语言（如Kotlin和Scala）兼容。这些约束被应用于普通业务领域对象，并可以调用现有代码。使用这个引擎，不需要将这些约束以数学规划模型的形式输入。在引擎内部，OptaPlanner将复杂的AI优化算法（如禁忌搜索，模拟退火，延迟接受和其他元启发式算法）与一些非常有效的约束评分计算技术，还有其他最先进的约束求解技术相结合起来。</p>\\n<p>OptaPlanner是一个基于Apache软件许可的开源软件。它使用100％纯Java™编写，可运行在任何JVM上，也可以在Maven中心库中找到。</p>\\n<h2 id=\\"什么是规划问题\\" tabindex=\\"-1\\">什么是规划问题? <a class=\\"header-anchor\\" href=\\"#什么是规划问题\\" aria-label=\\"Permalink to &quot;什么是规划问题?&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>规划问题在有限的资源和特定的约束条件下有一个最优目标。最优目标可以是任意数量的东西，例如:</p>\\n<ul>\\n<li>利润最大化——最优目标导致最高可能的利润。</li>\\n<li>最小化生态足迹——最优目标对环境的影响最小。</li>\\n<li>员工或客户满意度最大化——最优目标优先考虑员工或客户的需求。</li>\\n</ul>\\n<p>实现这些目标的能力取决于可用资源的数量，例如:</p>\\n<ul>\\n<li>人数。</li>\\n<li>时间的总量。</li>\\n<li>预算。</li>\\n<li>实物资产，如机器、车辆、计算机、建筑物等。</li>\\n</ul>\\n<p>还必须考虑到与这些资源有关的具体限制，例如一个人工作的小时数，他们使用某些机器的能力，或设备部件之间的兼容性。</p>\\n<p>OptaPlanner帮助Java程序员有效地解决约束满足问题。在底层，它结合了优化启发式和元启发式，具有非常高效的分数计算。</p>\\n<h3 id=\\"规划问题是np-complete或np-hard\\" tabindex=\\"-1\\">规划问题是NP-complete或NP-hard <a class=\\"header-anchor\\" href=\\"#规划问题是np-complete或np-hard\\" aria-label=\\"Permalink to &quot;规划问题是NP-complete或NP-hard&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>上述所有用例可能都是NP-complete/NP-hard，用外行人的话来说就是:</p>\\n<ul>\\n<li>在合理的时间内验证给定的问题解决方案是很容易的。</li>\\n<li>没有什么灵丹妙药能在合理的时间内找到问题的最优解。</li>\\n</ul>\\n<p>这意味着非常可怕:解决你的问题可能比你想象的要难，因为两种常见的技术是不够的:</p>\\n<ul>\\n<li>蛮力算法(即使是更聪明的变体)将花费太长时间。</li>\\n<li>一个快速的算法，例如在装箱中，首先放入最大的物品，将返回一个远不是最优的解决方案。</li>\\n</ul>\\n<p>通过使用先进的优化算法，OptaPlanner能够在合理的时间内为此类规划问题找到接近最优的解决方案。</p>\\n<h3 id=\\"规划问题有-硬的和软的-约束\\" tabindex=\\"-1\\">规划问题有(硬的和软的)约束 <a class=\\"header-anchor\\" href=\\"#规划问题有-硬的和软的-约束\\" aria-label=\\"Permalink to &quot;规划问题有(硬的和软的)约束&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>通常，规划问题至少有两个层次的约束:</p>\\n<ul>\\n<li>一个(消极的)硬约束不能被打破。例如:一个老师不能同时教两门不同的课。</li>\\n<li>如果可以避免，则不应打破(消极)软约束。A老师不喜欢在星期五下午上课。</li>\\n</ul>\\n<p>有些问题也有积极的约束:</p>\\n<ul>\\n<li>如果可能的话，应该实现积极的软约束(或奖励)。B老师喜欢在星期一上午上课。</li>\\n</ul>\\n<p>一些基本问题(如N个皇后)只有硬约束。有些问题有三个或更多层次的约束，例如硬约束、中等约束和软约束。</p>\\n<p>这些约束定义了规划问题的分数计算(又称适应度函数)。规划问题的每个解决方案都可以打分。使用OptaPlanner，分数约束是用面向对象的语言编写的，比如Java代码。这样的代码简单、灵活且可扩展。</p>\\n<h3 id=\\"规划问题有很大的搜索空间\\" tabindex=\\"-1\\">规划问题有很大的搜索空间 <a class=\\"header-anchor\\" href=\\"#规划问题有很大的搜索空间\\" aria-label=\\"Permalink to &quot;规划问题有很大的搜索空间&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>一个规划问题有许多解决方案。有几类解决方案:</p>\\n<ul>\\n<li>\\n<p>一个可能的解决方案是任何解决方案，无论它是否打破了任何数量的约束。规划问题往往有大量可能的解决方案。这些解决方案中的许多都是毫无价值的。</p>\\n</li>\\n<li>\\n<p>可行的解决方案是不打破任何(消极的)硬约束的解决方案。可行解决方案的数量趋向于相对于可能解决方案的数量。有时没有可行的解决方案。每个可行的解决方案都是一个可能的解决方案。</p>\\n</li>\\n<li>\\n<p>最优解是得分最高的解。规划问题往往有一个或几个最优解决方案。总有至少一个最优解，即使没有可行解且最优解不可行。</p>\\n</li>\\n<li>\\n<p>找到的最佳解决方案是实现在给定时间内找到的得分最高的解决方案。找到的最佳解决方案很可能是可行的，而且只要有足够的时间，它就是最优解决方案。</p>\\n</li>\\n</ul>\\n<p>与直觉相反的是，即使使用小数据集，可能的解决方案的数量也是巨大的(如果计算正确的话)。正如您在示例中看到的，大多数实例的可能解决方案比已知宇宙中的最小原子数(10^80)多得多。因为没有找到最优解决方案的灵丹妙药，任何实现都被迫评估所有这些可能解决方案的至少一个子集。</p>\\n<p>OptaPlanner支持多种优化算法，可以有效地处理大量可能的解决方案。根据用例的不同，一些优化算法会比其他算法表现得更好，但这是不可能提前判断的。使用OptaPlanner，通过在几行XML或代码中更改求解器配置，很容易切换优化算法。</p>\\n<h2 id=\\"快速入门\\" tabindex=\\"-1\\">快速入门 <a class=\\"header-anchor\\" href=\\"#快速入门\\" aria-label=\\"Permalink to &quot;快速入门&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>快速入门都使用OptaPlanner来优化学生和教师的学校时间表。</p>\\n<h3 id=\\"java快速入门\\" tabindex=\\"-1\\">Java快速入门 <a class=\\"header-anchor\\" href=\\"#java快速入门\\" aria-label=\\"Permalink to &quot;Java快速入门&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>构建一个简单的Java应用程序，使用OptaPlanner为学生和教师优化学校时间表。</p>\\n<h4 id=\\"你将建造什么\\" tabindex=\\"-1\\">你将建造什么？ <a class=\\"header-anchor\\" href=\\"#你将建造什么\\" aria-label=\\"Permalink to &quot;你将建造什么？&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>您将构建一个命令行应用程序，为学生和教师优化学校时间表:</p>\\n<div class=\\"language-log vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">log</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">INFO</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  Solving ended: time spent (</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">5000</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">), best score (0hard/8soft), ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">INFO</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">INFO</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  |            | Room A     | Room B     | Room C     |</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">INFO</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  |</span></span></code></pre>\\n</div>","date":{"time":1682337600000,"string":"April 24, 2023"}},{"categories":"Java","title":"SkyWalking","url":"/category/java/SkyWalking.html","excerpt":"","date":{"time":1678795200000,"string":"March 14, 2023"}},{"categories":"Spring","title":"Spring Quartz","url":"/category/spring/Spring Quartz.html","excerpt":"","date":{"time":1673870400000,"string":"January 16, 2023"}},{"categories":"Linux","title":"Redis","url":"/category/linux/Redis.html","excerpt":"","date":{"time":1666958400000,"string":"October 28, 2022"}},{"categories":"Java","title":"Kafka","url":"/category/java/Kafka.html","excerpt":"","date":{"time":1664020800000,"string":"September 24, 2022"}},{"categories":"Java","title":"RabbitMQ","url":"/category/java/RabbitMQ.html","excerpt":"","date":{"time":1663934400000,"string":"September 23, 2022"}},{"categories":"Java","title":"Java 四种类型的引用","url":"/category/java/Java 四种类型的引用.html","excerpt":"","date":{"time":1662465600000,"string":"September 6, 2022"}},{"categories":"Java","title":"Netty","url":"/category/java/Netty.html","excerpt":"","date":{"time":1661515200000,"string":"August 26, 2022"}},{"categories":"Java","title":"RocketMQ","url":"/category/java/RocketMQ.html","excerpt":"","date":{"time":1660996800000,"string":"August 20, 2022"}},{"categories":"Spring","title":"Spring Cloud Data Flow","url":"/category/spring/Spring Cloud Data Flow.html","excerpt":"","date":{"time":1660910400000,"string":"August 19, 2022"}},{"categories":"Java","title":"Java 应用部署到 Docker","url":"/category/java/Java 应用部署到 Docker.html","excerpt":"<h1 id=\\"java-应用部署到-docker\\" tabindex=\\"-1\\">Java 应用部署到 Docker <a class=\\"header-anchor\\" href=\\"#java-应用部署到-docker\\" aria-label=\\"Permalink to &quot;Java 应用部署到 Docker&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>从采用最原始的做法手工部署，到集成 Maven 插件半自动部署，最终使用 Jenkins 流水线实现自动化部署。</p>\\n<h2 id=\\"最原始的做法-手工部署\\" tabindex=\\"-1\\">最原始的做法：手工部署 <a class=\\"header-anchor\\" href=\\"#最原始的做法-手工部署\\" aria-label=\\"Permalink to &quot;最原始的做法：手工部署&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>最原始的做法一般为：</p>\\n<ol>\\n<li>\\n<p>打 JAR 包</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> mvn</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> clean</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> package</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>将 JAR 包上传到服务器（宿主机）</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ls</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">deploy-docker-sample-0.0.1-SNAPSHOT.jar</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>编写 Dockerfile 文件：</p>\\n<div class=\\"language-dockerfile vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">dockerfile</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">FROM</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> eclipse-temurin:17-jdk-alpine</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">COPY</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> deploy-docker-sample-0.0.1-SNAPSHOT.jar /app.jar</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">ENTRYPOINT</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> [</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"java\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"-jar\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"/app.jar\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">EXPOSE</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> 8080</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>在服务器上创建 Docker 镜像</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> build</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -t</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> localhost:5000/deploy-docker-sample:0.0.1-SNAPSHOT</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> .</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>基于此镜像启动 Docker 容器</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> run</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -d</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -p</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 8080:8080</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> --name</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> deploy-docker-sample</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> localhost:5000/deploy-docker-sample:0.0.1-SNAPSHOT</span></span></code></pre>\\n</div></li>\\n</ol>\\n<h2 id=\\"集成-maven-插件-半自动部署\\" tabindex=\\"-1\\">集成 Maven 插件：半自动部署 <a class=\\"header-anchor\\" href=\\"#集成-maven-插件-半自动部署\\" aria-label=\\"Permalink to &quot;集成 Maven 插件：半自动部署&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"使用-dockerfile-maven-plugin\\" tabindex=\\"-1\\">使用 dockerfile-maven-plugin <a class=\\"header-anchor\\" href=\\"#使用-dockerfile-maven-plugin\\" aria-label=\\"Permalink to &quot;使用 dockerfile-maven-plugin&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ol>\\n<li>\\n<p>Maven 项目集成 <code>dockerfile-maven-plugin</code> 插件</p>\\n<div class=\\"language-xml vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">xml</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">build</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">plugins</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">plugin</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">groupId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>com.spotify&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">groupId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">artifactId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>dockerfile-maven-plugin&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">artifactId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">version</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>1.4.13&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">version</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">executions</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t\\t&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">execution</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t\\t&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">id</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>default&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">id</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t\\t&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">goals</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t\\t\\t&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">goal</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>build&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">goal</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t\\t\\t&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">goal</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>push&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">goal</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t\\t&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">goals</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t\\t&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">execution</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">executions</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">configuration</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t\\t&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">repository</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>localhost:5000/${project.artifactId}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">repository</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t\\t&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">tag</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>${project.version}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">tag</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t\\t&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">buildArgs</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t\\t\\t&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">JAR_FILE</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>target/${project.build.finalName}.jar&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">JAR_FILE</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t\\t&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">buildArgs</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">configuration</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">plugin</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">plugins</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">build</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></li>\\n<li>\\n<p>在项目下编写 Dockerfile 文件：</p>\\n<div class=\\"language-dockerfile vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">dockerfile</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">FROM</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> eclipse-temurin:17-jdk-alpine</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">ARG</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> JAR_FILE</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">COPY</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ${JAR_FILE} /app.jar</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">ENTRYPOINT</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> [</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"java\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"-jar\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"/app.jar\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">EXPOSE</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> 8080</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>将项目提交到 Git 或 SVN</p>\\n</li>\\n<li>\\n<p>拉取项目到服务器本地</p>\\n</li>\\n<li>\\n<p>运行 Maven 打包命令</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> mvn</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> clean</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> package</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">[INFO]</span></span></code></pre>\\n</div></li>\\n</ol>\\n","date":{"time":1657368000000,"string":"July 9, 2022"}},{"categories":"Java","title":"Jenkins","url":"/category/java/Jenkins.html","excerpt":"","date":{"time":1656676800000,"string":"July 1, 2022"}},{"categories":"Spring","title":"Spring Session","url":"/category/spring/Spring Session.html","excerpt":"","date":{"time":1646913600000,"string":"March 10, 2022"}},{"categories":"Java","title":"Apache ActiveMQ Artemis","url":"/category/java/Apache ActiveMQ Artemis.html","excerpt":"","date":{"time":1641556800000,"string":"January 7, 2022"}},{"categories":"Other","title":"Eclipse","url":"/other/Eclipse.html","excerpt":"","date":{"time":1635768000000,"string":"November 1, 2021"}},{"categories":"Java","title":"MapStruct","url":"/category/java/MapStruct.html","excerpt":"<h1 id=\\"mapstruct\\" tabindex=\\"-1\\">MapStruct <a class=\\"header-anchor\\" href=\\"#mapstruct\\" aria-label=\\"Permalink to &quot;MapStruct&quot;\\">&ZeroWidthSpace;</a></h1>\\n<h2 id=\\"mapstruct-简介\\" tabindex=\\"-1\\">MapStruct 简介 <a class=\\"header-anchor\\" href=\\"#mapstruct-简介\\" aria-label=\\"Permalink to &quot;MapStruct 简介&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>MapStruct 是一个 Java 注释处理器，用于生成类型安全的 bean 映射类。</p>\\n<p>您所要做的就是定义一个映射器接口，该接口声明任何必需的映射方法。在编译期间，MapStruct 将生成该接口的实现。这个实现使用普通的 Java 方法调用在源和目标对象之间进行映射，即没有反射或类似。</p>\\n<h2 id=\\"mapstruct-依赖\\" tabindex=\\"-1\\">MapStruct 依赖 <a class=\\"header-anchor\\" href=\\"#mapstruct-依赖\\" aria-label=\\"Permalink to &quot;MapStruct 依赖&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>MapStruct 包含以下依赖：</p>\\n<ul>\\n<li><code>org.mapstruct:mapstruct</code> - 包含必需的注解，如 <code>@Mapping</code></li>\\n<li><code>org.mapstruct:mapstruct-processor</code> - 包含生成 mapper 实现的注解处理器</li>\\n</ul>\\n<div class=\\"language-xml vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">xml</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">properties</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">org.mapstruct.version</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>1.4.2.Final&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">org.mapstruct.version</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">properties</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">dependencies</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">dependency</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">groupId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>org.mapstruct&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">groupId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">artifactId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>mapstruct&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">artifactId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">version</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>${org.mapstruct.version}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">version</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    &#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">dependency</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">dependency</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">groupId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>org.mapstruct&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">groupId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">artifactId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>mapstruct-processor&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">artifactId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">version</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>${org.mapstruct.version}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">version</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">scope</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>provided&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">scope</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    &#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">dependency</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">dependencies</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><h2 id=\\"基本映射\\" tabindex=\\"-1\\">基本映射 <a class=\\"header-anchor\\" href=\\"#基本映射\\" aria-label=\\"Permalink to &quot;基本映射&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>要创建一个映射器，只需用所需的映射方法定义一个 Java 接口，并用 <code>org.mapstruct.Mapper</code> 注解它。<code>@Mapper</code> 注解导致 MapStruct 代码生成器在构建期间创建一个 Mapper 接口的实现。</p>\\n<p>在生成的方法实现中，源类型的所有可读属性将被复制到目标类型的相应属性中：</p>\\n<ul>\\n<li>当一个属性与它的目标实体对应物具有相同的名称时，它将被隐式映射。</li>\\n<li>当属性在目标实体中具有不同的名称时，可以通过 <code>@Mapping</code> 注释指定它的名称。</li>\\n</ul>\\n<h3 id=\\"相同属性名\\" tabindex=\\"-1\\">相同属性名 <a class=\\"header-anchor\\" href=\\"#相同属性名\\" aria-label=\\"Permalink to &quot;相同属性名&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ul>\\n<li>\\n<p>Source</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">package</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> study.helloworld.mapstruct_samples.same_name;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> java.time.LocalDate;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Source</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> String name;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Integer age;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> LocalDate birthday;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>Target</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">package</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> study.helloworld.mapstruct_samples.same_name;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> java.time.LocalDate;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Target</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> String name;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Integer age;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> LocalDate birthday;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>Mapper</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">package</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> study.helloworld.mapstruct_samples.same_name;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> org.mapstruct.Mapper;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> org.mapstruct.factory.Mappers;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">@</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Mapper</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> interface</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> SourceTargetMapper</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    SourceTargetMapper INSTANCE </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Mappers.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getMapper</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(SourceTargetMapper.class);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    Target </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">toTarget</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Source </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">source</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>Demo</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">package</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> study.helloworld.mapstruct_samples.same_name;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> java.time.LocalDate;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> SameNameDemo</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> static</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> void</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> main</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">String</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">[] </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">args</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        Source source </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Source</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        source.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setName</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"小明\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        source.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setAge</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">18</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        source.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setBirthday</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(LocalDate.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">now</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">());</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(source);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        Target target </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> SourceTargetMapper.INSTANCE.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">toTarget</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(source);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(target);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><div class=\\"language-log vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">log</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">Source [name=小明, age=</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">18</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, birthday=</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">2021-10-29</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">Target [name=小明, age=</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">18</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, birthday=</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">2021-10-29</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">]</span></span></code></pre>\\n</div></li>\\n</ul>\\n<h3 id=\\"不同属性名\\" tabindex=\\"-1\\">不同属性名 <a class=\\"header-anchor\\" href=\\"#不同属性名\\" aria-label=\\"Permalink to &quot;不同属性名&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ul>\\n<li>\\n<p>Source</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">package</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> study.helloworld.mapstruct_samples.different_name;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> java.time.LocalDate;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Source</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> String sourceName;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Integer sourceAge;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> LocalDate sourceBirthday;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>Target</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">package</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> study.helloworld.mapstruct_samples.different_name;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> java.time.LocalDate;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Target</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> String targetName;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Integer targetAge;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> LocalDate targetBirthday;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>Mapper</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">package</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> study.helloworld.mapstruct_samples.different_name;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> org.mapstruct.Mapper;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> org.mapstruct.Mapping;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> org.mapstruct.factory.Mappers;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">@</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Mapper</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> interface</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> SourceTargetMapper</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    SourceTargetMapper INSTANCE </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Mappers.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getMapper</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(SourceTargetMapper.class);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    @</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Mapping</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">source</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"sourceName\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">target</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"targetName\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    @</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Mapping</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">source</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"sourceAge\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">target</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"targetAge\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    @</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Mapping</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">source</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"sourceBirthday\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">target</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"targetBirthday\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    Target </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">toTarget</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Source </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">source</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>Demo</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">package</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> study.helloworld.mapstruct_samples.different_name;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> java.time.LocalDate;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> DifferentNameDemo</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> static</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> void</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> main</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">String</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">[] </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">args</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        Source source </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Source</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        source.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setSourceName</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"小明\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        source.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setSourceAge</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">18</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        source.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setSourceBirthday</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(LocalDate.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">now</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">());</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(source);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        Target target </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> SourceTargetMapper.INSTANCE.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">toTarget</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(source);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(target);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><div class=\\"language-log vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">log</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">Source [sourceName=小明, sourceAge=</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">18</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, sourceBirthday=</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">2021-10-29</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">Target [targetName=小明, targetAge=</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">18</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, targetBirthday=</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">2021-10-29</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">]</span></span></code></pre>\\n</div></li>\\n</ul>\\n<h2 id=\\"多个参数源的映射\\" tabindex=\\"-1\\">多个参数源的映射 <a class=\\"header-anchor\\" href=\\"#多个参数源的映射\\" aria-label=\\"Permalink to &quot;多个参数源的映射&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ul>\\n<li>\\n<p>Source</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">package</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> study.helloworld.mapstruct_samples.several_source;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> java.time.LocalDate;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Source1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> String name;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Integer age;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> LocalDate birthday;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">package</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> study.helloworld.mapstruct_samples.several_source;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Source2</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Double height;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Character gender;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>Target</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">package</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> study.helloworld.mapstruct_samples.several_source;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> java.time.LocalDate;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Target</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> String targetName;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Integer age;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> LocalDate birthday;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Double targetHeight;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    private</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Character gender;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>Mapper</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">package</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> study.helloworld.mapstruct_samples.several_source;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> org.mapstruct.Mapper;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> org.mapstruct.Mapping;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> org.mapstruct.factory.Mappers;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">@</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Mapper</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> interface</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> SourceTargetMapper</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    SourceTargetMapper INSTANCE </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Mappers.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getMapper</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(SourceTargetMapper.class);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    @</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Mapping</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">source</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"source1.name\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">target</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"targetName\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    @</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Mapping</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">source</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"source2.height\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">target</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"targetHeight\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    Target </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">toTarget</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Source1 </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">source1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, Source2 </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">source2</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    @</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Mapping</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">source</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"name\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">target</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"targetName\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    @</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Mapping</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">source</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"height\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">target</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"targetHeight\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    Target </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">toTarget</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Source1 </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">source1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, Source2 </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">source2</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, String </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">name</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, Double </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">height</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>Demo</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">package</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> study.helloworld.mapstruct_samples.several_source;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> java.time.LocalDate;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> SeveralSourceDemo</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> static</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> void</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> main</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">String</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">[] </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">args</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        Source1 source1 </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Source1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        source1.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setName</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"小明\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        source1.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setAge</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">18</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        source1.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setBirthday</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(LocalDate.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">now</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">());</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        Source2 source2 </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Source2</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        source2.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setHeight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">1.75D</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        source2.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setGender</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'男\'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(source1.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">toString</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">+</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\", \\"</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> +</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> source2.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">toString</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">());</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        Target target </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> SourceTargetMapper.INSTANCE.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">toTarget</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(source1, source2);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(target);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span></span></code></pre>\\n</div></li>\\n</ul>\\n","date":{"time":1635508800000,"string":"October 29, 2021"}},{"categories":"Linux","title":"Kubernetes","url":"/category/linux/Kubernetes.html","excerpt":"<h1 id=\\"kubernetes\\" tabindex=\\"-1\\">Kubernetes <a class=\\"header-anchor\\" href=\\"#kubernetes\\" aria-label=\\"Permalink to &quot;Kubernetes&quot;\\">&ZeroWidthSpace;</a></h1>\\n<h2 id=\\"配置-kubernetes-集群\\" tabindex=\\"-1\\">配置 Kubernetes 集群 <a class=\\"header-anchor\\" href=\\"#配置-kubernetes-集群\\" aria-label=\\"Permalink to &quot;配置 Kubernetes 集群&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"用-minikube-运行一个本地单节点-kubernetes-集群\\" tabindex=\\"-1\\">用 Minikube 运行一个本地单节点 Kubernetes 集群 <a class=\\"header-anchor\\" href=\\"#用-minikube-运行一个本地单节点-kubernetes-集群\\" aria-label=\\"Permalink to &quot;用 Minikube 运行一个本地单节点 Kubernetes 集群&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>使用 Minikube 是运行 Kubernetes 集群最简单、最快捷的途径。Minikube 是一个构建单节点集群的工具，对于测试 Kubernetes 和本地开发应用都非常有用。</p>\\n<p>前置条件：</p>\\n<ul>\\n<li>2 核 CPU 或更多</li>\\n<li>2GB 内存或更多</li>\\n<li>20GB 磁盘空间或更多</li>\\n<li>能上网</li>\\n<li>容器或虚拟机管理器，如：<a href=\\"https://minikube.sigs.k8s.io/docs/drivers/docker/\\" target=\\"_blank\\" rel=\\"noreferrer\\">Docker</a></li>\\n</ul>\\n<ol>\\n<li>\\n<p>安装 Minikube</p>\\n<p>要在 x86-64 Linux 上使用二进制下载安装最新的 Minikube 稳定版：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> curl</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -LO</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> sudo</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> install</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> minikube-linux-amd64</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /usr/local/bin/minikube</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>使用 Minikue 启动一个 Kubernetes 集群</p>\\n<p>当你在本地安装了 Minikube 之后，可以立即使用下面的命令启动 Kubernetes 集群：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> minikube</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> start</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> minikube v1.24.0 on Ubuntu 20.04 (</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">amd64</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Automatically selected the docker driver. Other choices: none, ssh</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Using image repository registry.cn-hangzhou.aliyuncs.com/google_containers</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Starting control plane node minikube in cluster minikube</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Pulling base image ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    ></span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> registry.cn-hangzhou.aliyun...:</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 355.77</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> MiB</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 355.78</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> MiB</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">  100.00%</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 5.39</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> MiB</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Creating docker container (CPUs</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">2,</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Memory</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">2200MB</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    ></span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> kubeadm.sha256:</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 64</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> B</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 64</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> B</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> [</span></span></code></pre>\\n</div></li>\\n</ol>\\n","date":{"time":1634731200000,"string":"October 20, 2021"}},{"categories":"Java","title":"Maven","url":"/category/java/Maven.html","excerpt":"<h1 id=\\"maven\\" tabindex=\\"-1\\">Maven <a class=\\"header-anchor\\" href=\\"#maven\\" aria-label=\\"Permalink to &quot;Maven&quot;\\">&ZeroWidthSpace;</a></h1>\\n<h2 id=\\"maven-简介\\" tabindex=\\"-1\\">Maven 简介 <a class=\\"header-anchor\\" href=\\"#maven-简介\\" aria-label=\\"Permalink to &quot;Maven 简介&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>Maven 这个词可以翻译为“知识的积累”，也可以翻译为“专家”或“内行”。Maven 主要服务于基于 Java 平台的项目构建、依赖管理和项目信息管理。</p>\\n<ul>\\n<li>\\n<p>Maven 是优秀的构建工具 - Maven 作为一个构建工具，不仅能帮我们自动化构建，还能够抽象构建过程，提供构建任务实现；它跨平台，对外提供了一致的操作接口，这一切足以使它成为优秀的、流行的构建工具。</p>\\n</li>\\n<li>\\n<p>Maven 不仅仅是构建工具 - Maven 不仅是构建工具，还是一个依赖管理工具和项目信息管理工具。它提供了中央仓库，能帮我们自动下载构件。</p>\\n</li>\\n</ul>\\n<h2 id=\\"什么是-pom\\" tabindex=\\"-1\\">什么是 POM <a class=\\"header-anchor\\" href=\\"#什么是-pom\\" aria-label=\\"Permalink to &quot;什么是 POM&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>POM（Project Object Model，项目对象模型）是 Maven 的基本工作单元。它是一个 XML 文件，包含 Maven 用于构建项目的项目信息和配置细节。</p>\\n<h3 id=\\"最小的-pom\\" tabindex=\\"-1\\">最小的 POM <a class=\\"header-anchor\\" href=\\"#最小的-pom\\" aria-label=\\"Permalink to &quot;最小的 POM&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>POM 的最低要求如下:</p>\\n<ul>\\n<li><code>project</code> - POM 根标签</li>\\n<li><code>modelVersion</code> - 应该设置为 <code>4.0.0</code></li>\\n<li><code>groupId</code> - 项目所在组的 ID</li>\\n<li><code>artifactId</code> - 项目在组中的 ID</li>\\n<li><code>version</code> - 项目在组中的版本</li>\\n</ul>\\n<p>示例：</p>\\n<div class=\\"language-xml vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">xml</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">project</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">modelVersion</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>4.0.0&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">modelVersion</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">groupId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>com.mycompany.app&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">groupId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">artifactId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>my-app&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">artifactId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">version</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>1&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">version</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">project</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>POM 需要配置 <code>groupId</code>、<code>artifactId</code> 和 <code>version</code>。这三个值形成了项目的基本坐标。它的格式是<code>&lt;groupId&gt;:&lt;artifactId&gt;:&lt;version&gt;</code>。对于上面的例子，它的坐标是 <code>com.mycompany.app:my-app:1</code>。</p>\\n<h2 id=\\"maven-标准目录布局\\" tabindex=\\"-1\\">Maven 标准目录布局 <a class=\\"header-anchor\\" href=\\"#maven-标准目录布局\\" aria-label=\\"Permalink to &quot;Maven 标准目录布局&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>Maven 默认约定了一套目录结构，常用的目录结构如下：</p>\\n<p>目录 | 描述</p>\\n","date":{"time":1633608000000,"string":"October 7, 2021"}},{"categories":"Docker","title":"在 Docker 容器中部署","url":"/category/docker/在 Docker 容器中部署.html","excerpt":"","date":{"time":1631016000000,"string":"September 7, 2021"}},{"categories":"Docker","title":"Docker 安装","url":"/category/docker/Docker 安装.html","excerpt":"","date":{"time":1630756800000,"string":"September 4, 2021"}},{"categories":"Spring","title":"Spring Security","url":"/category/spring/Spring Security.html","excerpt":"<h1 id=\\"spring-security\\" tabindex=\\"-1\\">Spring Security <a class=\\"header-anchor\\" href=\\"#spring-security\\" aria-label=\\"Permalink to &quot;Spring Security&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>Spring Security 是一个功能强大且高度可定制的身份验证和访问控制框架。它是用于保护基于 Spring 的应用程序的事实上的标准。</p>\\n<p>主要特点有：</p>\\n<ul>\\n<li>\\n<p>身份验证 —— Spring Security 为身份验证提供了全面的支持。身份验证是我们验证谁试图访问特定资源的身份的方法。验证用户身份的常用方法是要求用户输入用户名和密码。一旦执行了身份验证，我们就会知道身份并可以执行授权。</p>\\n</li>\\n<li>\\n<p>漏洞防护 —— Spring Security 提供了针对常见漏洞（例如：<a href=\\"https://baike.baidu.com/item/CSRF\\" target=\\"_blank\\" rel=\\"noreferrer\\">CSRF</a>）的保护。只要有可能，默认情况下就启用保护。</p>\\n</li>\\n</ul>\\n<h2 id=\\"启用-spring-security\\" tabindex=\\"-1\\">启用 Spring Security <a class=\\"header-anchor\\" href=\\"#启用-spring-security\\" aria-label=\\"Permalink to &quot;启用 Spring Security&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>保护 Spring 应用程序的第一步是将 <code>spring-boot-starter-security</code> 依赖项添加到构建中。在项目的 <em>pom.xml</em> 文件中，添加以下依赖：</p>\\n<div class=\\"language-xml vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">xml</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">dependency</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">groupId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>org.springframework.boot&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">groupId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">artifactId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>spring-boot-starter-security&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">artifactId</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">dependency</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>现在，启动应用程序并访问主页（或任何页面）：\\n<img src=\\"https://cdn.jsdelivr.net/gh/panxingcheng/static/image/20210905221445.png\\" alt=\\"\\">\\n（数据来源：自己截得）</p>\\n<p>将提示使用 HTTP 基本身份验证对话框进行身份验证。要想通过认证，需要提供用户名和密码。用户名是 user。至于密码，它是随机生成并写入了应用程序日志文件。日志条目应该是这样的：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">2021-07-22</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 17:20:58.787</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">  INFO</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 8240</span></span></code></pre>\\n</div>","date":{"time":1618833600000,"string":"April 19, 2021"}},{"categories":"Spring","title":"Spring 循环依赖","url":"/category/spring/Spring 循环依赖.html","excerpt":"","date":{"time":1610712000000,"string":"January 15, 2021"}},{"categories":"Other","title":"云和微服务","url":"/other/云和微服务.html","excerpt":"","date":{"time":1608379200000,"string":"December 19, 2020"}},{"categories":"Spring","title":"Spring Cloud 微服务","url":"/category/spring/Spring Cloud 微服务.html","excerpt":"<h1 id=\\"spring-cloud-微服务\\" tabindex=\\"-1\\">Spring Cloud 微服务 <a class=\\"header-anchor\\" href=\\"#spring-cloud-微服务\\" aria-label=\\"Permalink to &quot;Spring Cloud 微服务&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>Spring Boot 和 Spring Cloud 为 Java 开发者提供了一条从开发传统的单体的 Spring 应用到开发可以部署在云端的微服务应用的迁移路径。</p>\\n<h2 id=\\"什么是微服务\\" tabindex=\\"-1\\">什么是微服务 <a class=\\"header-anchor\\" href=\\"#什么是微服务\\" aria-label=\\"Permalink to &quot;什么是微服务&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>微服务的概念最初是在 2014 年前后悄悄蔓延到软件开发社区的意识中，它是对在技术上和组织上扩大大型单体应用程序所面临的诸多挑战的直接回应。记住，微服务是一个小的、松耦合的<strong>分布式服务</strong>。微服务允许将一个大型的应用分解为具有严格职责定义的便于管理的组件。微服务通过将大型代码分解为小型的精确定义的部分，帮助解决大型代码库中传统的复杂问题。在思考微服务时，一个需要信奉的重要概念就是：分解和分离应用程序的功能，使它们完全彼此独立。</p>\\n<p>微服务架构具有以下特征：</p>\\n<ul>\\n<li>\\n<p>应用程序逻辑分解为具有明确定义了职责范围的细粒度组件，这些组件互相协调提供解决方案。</p>\\n</li>\\n<li>\\n<p>每个组件都有一个小的职责领域，并且完全独立部署。微服务应该对业务领域的单个部分负责。此外，一个微服务应该可以跨多个应用程序复用。</p>\\n</li>\\n<li>\\n<p>微服务通信基于一些基本的原则（注意，是原则而不是标准），并采用 HTTP 和 JSON（JavaScript Object Notation）这样的轻量级通信协议，在服务消费者和服务提供者之间进行数据交换。</p>\\n</li>\\n<li>\\n<p>服务的底层采用什么技术实现并没有什么影响，因为应用程序始终使用技术中立的协议（JSON 是最常见的）进行通信。这意味着构建在微服务之上的应用程序能够使用多种编程语言和技术进行构建。</p>\\n</li>\\n<li>\\n<p>微服务利用其小、独立和分布式的性质，使组织拥有明确责任领域的小型开发团队。这些团队可能为同一个目标工作，如交付一个应用程序，但是每个团队只负责他们在做的服务。</p>\\n</li>\\n</ul>\\n<h2 id=\\"什么是-spring-为什么它与微服务有关\\" tabindex=\\"-1\\">什么是 Spring，为什么它与微服务有关 <a class=\\"header-anchor\\" href=\\"#什么是-spring-为什么它与微服务有关\\" aria-label=\\"Permalink to &quot;什么是 Spring，为什么它与微服务有关&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>在基于 Java 的应用程序构建中，Spring 已经成为了事实上的标准开发框架。<a href=\\"https://spring.io/\\" target=\\"_blank\\" rel=\\"noreferrer\\">Spring</a> 的核心是建立在<strong>依赖注入</strong>的概念上的。依赖注入框架（如 Spring），允许用户通过约定（以及注解）将应用程序对象之间的关系外部化，而不是在对象内部彼此硬编码实例化代码，以便更轻松地管理大型 Java 项目。Spring 在应用程序的不同的 Java 类之间充当一个中间人，管理着它们的依赖关系。</p>\\n<p>Spring 团队发现，许多开发团队正在从将应用程序的展现、业务和数据访问逻辑打包在一起并部署为单个制品的单体应用程序模型中迁移，正转向高度分布式的模型，服务能够被构建成可以轻松部署到云端的小型分布式服务。为了响应这种转变，Spring 开发团队启动了两个项目，即 <a href=\\"https://spring.io/projects/spring-boot/\\" target=\\"_blank\\" rel=\\"noreferrer\\">Spring Boot</a> 和 <a href=\\"https://spring.io/projects/spring-cloud/\\" target=\\"_blank\\" rel=\\"noreferrer\\">Spring Cloud</a>。</p>\\n<p>Spring Boot 是对 Spring 框架理念重新思考的结果。虽然 Spring Boot 包含了 Spring 的核心特性，但它剥离了 Spring 中的许多“企业”特性，而提供了一个基于 Java 的、面向REST [1] 的微服务框架。只需一些简单的注解，Java 开发者就能够快速构建一个可打包和部署的 REST 微服务，这个微服务并不需要外部的应用容器。</p>\\n<p>在构建基于云的应用时，微服务已经成为更常见的架构模式之一，因此 Spring 社区为开发者提供了 Spring Cloud。Spring Cloud 框架使实施和部署微服务到私有云或公有云变得更加简单。Spring Cloud 在一个公共框架之下封装了多个流行的云管理微服务框架，并且让这些技术的使用和部署像为代码添加注解一样简便。</p>\\n<h2 id=\\"使用-spring-cloud-构建微服务\\" tabindex=\\"-1\\">使用 Spring Cloud 构建微服务 <a class=\\"header-anchor\\" href=\\"#使用-spring-cloud-构建微服务\\" aria-label=\\"Permalink to &quot;使用 Spring Cloud 构建微服务&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>从零开始实现所有这些模式将是一项巨大的工作。幸好，Spring 团队将大量经过实战检验的开源项目整合到一个称为 Spring Cloud 的 Spring 子项目中。</p>\\n<p>Spring Cloud 将 Pivotal、HashiCorp 和 Netflix 等开源公司的工作封装在一起。Spring Cloud 简化了将这些项目设置和配置到 Spring 应用程序中的工作，以便开发人员可以专注于编写代码，而不会陷入配置构建和部署微服务应用程序的所有基础设施的细节中。</p>\\n<p><img src=\\"https://cdn.jsdelivr.net/gh/panxingcheng/static/image/20210124172110.png\\" alt=\\"\\"></p>\\n<p>（图片来源：Spring 微服务实战）</p>\\n<p>下面让我们更详细地了解一下这些技术。</p>\\n<h3 id=\\"spring-boot\\" tabindex=\\"-1\\">Spring Boot <a class=\\"header-anchor\\" href=\\"#spring-boot\\" aria-label=\\"Permalink to &quot;Spring Boot&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>Spring Boot 是微服务实现中使用的核心技术。Spring Boot 通过简化构建基于 REST 的微服务的核心任务，大大简化了微服务开发。Spring Boot 还极大地简化了将 HTTP 类型的动词（GET、PUT、POST 和 DELETE）映射到URL、JSON 协议序列化与 Java 对象的相互转化，以及将 Java 异常映射回标准 HTTP 错误代码的工作。</p>\\n<h3 id=\\"spring-cloud-config\\" tabindex=\\"-1\\">Spring Cloud Config <a class=\\"header-anchor\\" href=\\"#spring-cloud-config\\" aria-label=\\"Permalink to &quot;Spring Cloud Config&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>Spring Cloud Config 通过集中式服务来处理应用程序配置数据的管理，因此应用程序配置数据（特别是环境特定的配置数据）与部署的微服务完全分离。这确保了无论启动多少个微服务实例，这些微服务实例始终具有相同的配置。Spring Cloud Config 拥有自己的属性管理存储库，也可以与以下开源项目集成。</p>\\n<ul>\\n<li>\\n<p><strong>Git</strong> —— Git 是一个开源版本控制系统，它允许开发人员管理和跟踪任何类型的文本文件的更改。Spring Cloud Config 可以与 Git 支持的存储库集成，并读出存储库中的应用程序的配置数据。</p>\\n</li>\\n<li>\\n<p><strong>Consul</strong> —— Consul 是一种开源的服务发现工具，允许服务实例向该服务注册自己。服务客户端可以向Consul 咨询服务实例的位置。Consul 还包括可以被 Spring Cloud Config 使用的基于键值存储的数据库，能够用来存储应用程序的配置数据。</p>\\n</li>\\n<li>\\n<p><strong>Eureka</strong> —— Eureka 是一个开源的 Netflix 项目，像 Consul 一样，提供类似的服务发现功能。Eureka 同样有一个可以被 Spring Cloud Config 使用的键值数据库。</p>\\n</li>\\n</ul>\\n<h3 id=\\"spring-cloud-服务发现\\" tabindex=\\"-1\\">Spring Cloud 服务发现 <a class=\\"header-anchor\\" href=\\"#spring-cloud-服务发现\\" aria-label=\\"Permalink to &quot;Spring Cloud 服务发现&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>通过 Spring Cloud 服务发现，开发人员可以从客户端消费的服务中抽象出部署服务器的物理位置（IP 或服务器名称）。服务消费者通过逻辑名称而不是物理位置来调用服务器的业务逻辑。Spring Cloud 服务发现也处理服务实例的注册和注销（在服务实例启动和关闭时）。Spring Cloud 服务发现可以使用 Consul 和 Eureka 作为服务发现引擎。</p>\\n<h3 id=\\"spring-cloud-与-netflix-hystrix-和-netflix-ribbon\\" tabindex=\\"-1\\">Spring Cloud 与 Netflix Hystrix 和 Netflix Ribbon <a class=\\"header-anchor\\" href=\\"#spring-cloud-与-netflix-hystrix-和-netflix-ribbon\\" aria-label=\\"Permalink to &quot;Spring Cloud 与 Netflix Hystrix 和 Netflix Ribbon&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>Spring Cloud 与 Netflix 的开源项目进行了大量整合。对于微服务客户端弹性模式，Spring Cloud 封装了Netflix Hystrix 库和 Netflix Ribbon 项目，开发人员可以轻松地在微服务中使用它们。</p>\\n<p>使用 Netflix Hystrix 库，开发人员可以快速实现服务客户端弹性模式，如断路器模式和舱壁模式。</p>\\n<p>虽然 Netflix Ribbon 项目简化了与诸如 Eureka 这样的服务发现代理的集成，但它也为服务消费者提供了客户端对服务调用的负载均衡。即使在服务发现代理暂时不可用时，客户端也可以继续进行服务调用。</p>\\n<h3 id=\\"spring-cloud-与-netflix-zuul\\" tabindex=\\"-1\\">Spring Cloud 与 Netflix Zuul <a class=\\"header-anchor\\" href=\\"#spring-cloud-与-netflix-zuul\\" aria-label=\\"Permalink to &quot;Spring Cloud 与 Netflix Zuul&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>Spring Cloud 使用 Netflix Zuul 项目为微服务应用程序提供服务路由功能。Zuul 是代理服务请求的服务网关，确保在调用目标服务之前，对微服务的所有调用都经过一个“前门”。通过集中的服务调用，开发人员可以强制执行标准服务策略，如安全授权验证、内容过滤和路由规则。</p>\\n<h3 id=\\"spring-cloud-stream\\" tabindex=\\"-1\\">Spring Cloud Stream <a class=\\"header-anchor\\" href=\\"#spring-cloud-stream\\" aria-label=\\"Permalink to &quot;Spring Cloud Stream&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>Spring Cloud Stream（<a href=\\"https://spring.io/projects/spring-cloud-stream/%EF%BC%89%E6%98%AF%E4%B8%80%E7%A7%8D%E5%8F%AF%E8%AE%A9%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E8%BD%BB%E6%9D%BE%E5%9C%B0%E5%B0%86%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E9%9B%86%E6%88%90%E5%88%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84%E6%94%AF%E6%8C%81%E6%8A%80%E6%9C%AF%E3%80%82%E5%80%9F%E5%8A%A9\\" target=\\"_blank\\" rel=\\"noreferrer\\">https://spring.io/projects/spring-cloud-stream/）是一种可让开发人员轻松地将轻量级消息处理集成到微服务中的支持技术。借助</a> Spring Cloud Stream，开发人员能够构建智能的微服务，它可以使用在应用程序中出现的异步事件。此外，使用 Spring Cloud Stream 可以快速将微服务与消息代理进行整合，如 RabbitMQ 和 Kafka。</p>\\n<h3 id=\\"spring-cloud-sleuth\\" tabindex=\\"-1\\">Spring Cloud Sleuth <a class=\\"header-anchor\\" href=\\"#spring-cloud-sleuth\\" aria-label=\\"Permalink to &quot;Spring Cloud Sleuth&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>Spring Cloud Sleuth 允许将唯一跟踪标识符集成到应用程序所使用的 HTTP 调用和消息通道（RabbitMQ、Apache Kafka）之中。这些跟踪号码（有时称为关联 ID 或跟踪 ID）能够让开发人员在事务流经应用程序中的不同服务时跟踪事务。有了 Spring Cloud Sleuth，这些跟踪 ID 将自动添加到微服务生成的任何日志记录中。</p>\\n<p>Spring Cloud Sleuth 与日志聚合技术工具（如 Papertrail）和跟踪工具（如 Zipkin）结合时，能够展现出真正的威力。Papertail 是一个基于云的日志记录平台，用于将日志从不同的微服务实时聚合到一个可查询的数据库中。Zipkin 可以获取 Spring Cloud Sleuth 生成的数据，并允许开发人员可视化单个事务涉及的服务调用流程。</p>\\n<h3 id=\\"spring-cloud-security\\" tabindex=\\"-1\\">Spring Cloud Security <a class=\\"header-anchor\\" href=\\"#spring-cloud-security\\" aria-label=\\"Permalink to &quot;Spring Cloud Security&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>Spring Cloud Security 是一个验证和授权框架，可以控制哪些人可以访问服务，以及他们可以用服务做什么。Spring Cloud Security 是基于令牌的，允许服务通过验证服务器发出的令牌彼此进行通信。接收调用的每个服务可以检查 HTTP 调用中提供的令牌，以确认用户的身份以及用户对该服务的访问权限。</p>\\n<p>此外，Spring Cloud Security 支持 JSON Web Token。JSON Web Token（JWT）框架标准化了创建 OAuth2 令牌的格式，并为创建的令牌进行数字签名提供了标准。</p>\\n<h2 id=\\"使用-spring-cloud-配置服务器控制配置\\" tabindex=\\"-1\\">使用 Spring Cloud 配置服务器控制配置 <a class=\\"header-anchor\\" href=\\"#使用-spring-cloud-配置服务器控制配置\\" aria-label=\\"Permalink to &quot;使用 Spring Cloud 配置服务器控制配置&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>先来看一下几个不同的方案选择，并对它们进行比较。</p>\\n<p>项目名称 | 描述 | 特点</p>\\n","date":{"time":1608292800000,"string":"December 18, 2020"}},{"categories":"Linux","title":"Kafka","url":"/category/linux/Kafka.html","excerpt":"","date":{"time":1602936000000,"string":"October 17, 2020"}},{"categories":"Java","title":"Seata","url":"/category/java/Seata.html","excerpt":"<h1 id=\\"seata\\" tabindex=\\"-1\\">Seata <a class=\\"header-anchor\\" href=\\"#seata\\" aria-label=\\"Permalink to &quot;Seata&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p><a href=\\"https://seata.io/zh-cn/index.html\\" target=\\"_blank\\" rel=\\"noreferrer\\">Seata</a>（Simple Extensible Autonomous Transaction Architecture，简单可扩展自治事务框架）是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</p>\\n<p>如下图所示，Seata 中有三大模块，分别是 <code>TM</code>、<code>RM</code> 和 <code>TC</code>。 其中 <code>TM</code> 和 <code>RM</code> 是作为 Seata 的客户端与业务系统集成在一起，<code>TC</code> 作为 Seata 的服务端独立部署。</p>\\n<p><img src=\\"https://cdn.jsdelivr.net/gh/panxingcheng/static/image/20210912180133.png\\" alt=\\"\\">\\n（图片来源：Seata 官网）</p>\\n<ul>\\n<li>\\n<p>TC (Transaction Coordinator) - 事务协调者</p>\\n<p>维护全局和分支事务的状态，驱动全局事务提交或回滚。</p>\\n</li>\\n<li>\\n<p>TM (Transaction Manager) - 事务管理器</p>\\n<p>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p>\\n</li>\\n<li>\\n<p>RM (Resource Manager) - 资源管理器</p>\\n<p>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p>\\n</li>\\n</ul>\\n<p>在 Seata 中，分布式事务的执行流程：</p>\\n<ol>\\n<li>TM 开启分布式事务（TM 向 TC 注册全局事务记录）；</li>\\n<li>按业务场景，编排数据库、服务等事务内资源（RM 向 TC 汇报资源准备状态 ）；</li>\\n<li>TM 结束分布式事务，事务一阶段结束（TM 通知 TC 提交/回滚分布式事务）；</li>\\n<li>TC 汇总事务信息，决定分布式事务是提交还是回滚；</li>\\n<li>TC 通知所有 RM 提交/回滚 资源，事务二阶段结束。</li>\\n</ol>\\n<h2 id=\\"分布式事务-seata-解决方案\\" tabindex=\\"-1\\">分布式事务 Seata 解决方案 <a class=\\"header-anchor\\" href=\\"#分布式事务-seata-解决方案\\" aria-label=\\"Permalink to &quot;分布式事务 Seata 解决方案&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>Seata 会有 4 种分布式事务解决方案，分别是 AT 模式、TCC 模式、Saga 模式和 XA 模式。</p>\\n<h3 id=\\"at-模式\\" tabindex=\\"-1\\">AT 模式 <a class=\\"header-anchor\\" href=\\"#at-模式\\" aria-label=\\"Permalink to &quot;AT 模式&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>AT 模式是一种无侵入的分布式事务解决方案。在 AT 模式下，用户只需关注自己的“业务 SQL”，用户的 “业务 SQL” 作为一阶段，Seata 框架会自动生成事务的二阶段提交和回滚操作。</p>\\n<p><img src=\\"https://cdn.jsdelivr.net/gh/panxingcheng/static/image/20210912180237.png\\" alt=\\"\\">\\n（图片来源：Seata 官网）</p>\\n<div class=\\"tip custom-block\\"><p class=\\"custom-block-title\\">AT 模式如何做到对业务的无侵入</p>\\n<ul>\\n<li>\\n<p>一阶段：</p>\\n<p>在一阶段，Seata 会拦截“业务 SQL”，首先解析 SQL 语义，找到“业务 SQL”要更新的业务数据，在业务数据被更新前，将其保存成“before image”，然后执行“业务 SQL”更新业务数据，在业务数据更新之后，再将其保存成“after image”，最后生成行锁。以上操作全部在一个数据库事务内完成，这样保证了一阶段操作的原子性。</p>\\n<p><img src=\\"https://cdn.jsdelivr.net/gh/panxingcheng/static/image/20210912180250.png\\" alt=\\"\\">\\n（图片来源：Seata 官网）</p>\\n</li>\\n<li>\\n<p>二阶段提交：</p>\\n<p>二阶段如果是提交的话，因为“业务 SQL”在一阶段已经提交至数据库， 所以 Seata 框架只需将一阶段保存的快照数据和行锁删掉，完成数据清理即可。</p>\\n<p><img src=\\"https://cdn.jsdelivr.net/gh/panxingcheng/static/image/20210912180302.png\\" alt=\\"\\">\\n（图片来源：Seata 官网）</p>\\n</li>\\n<li>\\n<p>二阶段回滚：</p>\\n<p>二阶段如果是回滚的话，Seata 就需要回滚一阶段已经执行的“业务 SQL”，还原业务数据。回滚方式便是用“before image”还原业务数据；但在还原前要首先要校验脏写，对比“数据库当前业务数据”和 “after image”，如果两份数据完全一致就说明没有脏写，可以还原业务数据，如果不一致就说明有脏写，出现脏写就需要转人工处理。</p>\\n<p><img src=\\"https://cdn.jsdelivr.net/gh/panxingcheng/static/image/20210912180313.png\\" alt=\\"\\">\\n（图片来源：Seata 官网）</p>\\n</li>\\n</ul>\\n<p>AT 模式的一阶段、二阶段提交和回滚均由 Seata 框架自动生成，用户只需编写“业务 SQL”，便能轻松接入分布式事务，AT 模式是一种对业务无任何侵入的分布式事务解决方案。</p>\\n</div>\\n<h2 id=\\"spring-集成分布式事务框架-seata-at-模式\\" tabindex=\\"-1\\">Spring 集成分布式事务框架 Seata（AT 模式） <a class=\\"header-anchor\\" href=\\"#spring-集成分布式事务框架-seata-at-模式\\" aria-label=\\"Permalink to &quot;Spring 集成分布式事务框架 Seata（AT 模式）&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"单机\\" tabindex=\\"-1\\">单机 <a class=\\"header-anchor\\" href=\\"#单机\\" aria-label=\\"Permalink to &quot;单机&quot;\\">&ZeroWidthSpace;</a></h3>\\n<h4 id=\\"seata-server\\" tabindex=\\"-1\\">Seata-Server <a class=\\"header-anchor\\" href=\\"#seata-server\\" aria-label=\\"Permalink to &quot;Seata-Server&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>Server 端存储模式（<code>store.mode</code>）现有 <code>file</code>、<code>db</code>、<code>redis</code> 三种（后续将引入 <code>raft</code>、<code>mongodb</code>）。<code>file</code> 模式无需改动，直接启动即可。</p>\\n<p><strong>注：<code>file</code> 模式为单机模式，全局事务会话信息内存中读写并持久化本地文件 <em>root.data</em>，性能较高。</strong></p>\\n<ol>\\n<li>\\n<p>在 <a href=\\"https://github.com/seata/seata/releases\\" target=\\"_blank\\" rel=\\"noreferrer\\">Releases</a> 页面下载相应版本并解压。</p>\\n</li>\\n<li>\\n<p>启动 seata-server。</p>\\n<ul>\\n<li>在 Linux/Mac 下 - <code>./bin/seata-server.sh</code></li>\\n<li>在 Windows 下 - <code>bin\\\\seata-server.bat</code></li>\\n</ul>\\n<p>支持的启动参数:</p>\\n<p>参数 | 全写 | 作用 | 备注</p>\\n</li>\\n</ol>\\n","date":{"time":1599652800000,"string":"September 9, 2020"}},{"categories":"Linux","title":"Docker","url":"/category/linux/Docker.html","excerpt":"<h1 id=\\"docker\\" tabindex=\\"-1\\">Docker <a class=\\"header-anchor\\" href=\\"#docker\\" aria-label=\\"Permalink to &quot;Docker&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>Docker 是一种<strong>轻量级虚拟化技术</strong>。 最初由 dotCloud 公司在 2013 年发布。自发布以来，其发展速度之快超乎了很多人的想象，一路高歌猛进，2014 年 6 月终于发布了 1.0 稳定版，而 dotCloud 在 2013 年 10 月干脆连公司名字也改为了 Docker, Inc.。</p>\\n<p>与传统的 VM 相比，它更轻量，启动速度更快，单台硬件上可以同时跑成百上千个容器，所以非常适合在业务高峰期通过启动大量容器进行横向扩展。</p>\\n<p>Docker 是可移植（或者说跨平台）的，可以在各种主流 Linux 发布版或者 OS X 以及 Windows 上（需要使用 boot2docker 或者虚拟机）使用。Java 可以做到“一次编译，到处运行”，而 Docker 则可以称为“构建一次，在各平台上运行”（Build once，run anywhere）。</p>\\n<h2 id=\\"简介\\" tabindex=\\"-1\\">简介 <a class=\\"header-anchor\\" href=\\"#简介\\" aria-label=\\"Permalink to &quot;简介&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"docker-简介\\" tabindex=\\"-1\\">Docker 简介 <a class=\\"header-anchor\\" href=\\"#docker-简介\\" aria-label=\\"Permalink to &quot;Docker 简介&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>Docker 是一个能够把开发的应用程序自动部署到容器的开源引擎。</p>\\n<p>那么 Docker 有什么特别之处呢？Docker 在虚拟化的容器执行环境中增加了一个应用程序部署引擎。该引擎的目标就是提供一个轻量、快速的环境，能够运行开发者的程序，并方便高效地将程序从开发者的笔记本部署到测试环境，然后再部署到生产环境。Docker 极其简洁，它所需的全部环境只是一台仅仅安装了兼容版本的 Linux 内核和二进制文件最小限的宿主机。</p>\\n<h3 id=\\"docker-组件\\" tabindex=\\"-1\\">Docker 组件 <a class=\\"header-anchor\\" href=\\"#docker-组件\\" aria-label=\\"Permalink to &quot;Docker 组件&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>Docker 的核心组件：</p>\\n<ul>\\n<li>Docker 客户端和服务器（Docker 引擎）</li>\\n<li>Docker 镜像</li>\\n<li>Registry 仓库</li>\\n<li>Docker 容器</li>\\n</ul>\\n<h4 id=\\"docker-客户端和服务器\\" tabindex=\\"-1\\">Docker 客户端和服务器 <a class=\\"header-anchor\\" href=\\"#docker-客户端和服务器\\" aria-label=\\"Permalink to &quot;Docker 客户端和服务器&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>Docker 是一个客户端/服务器（C/S）架构的程序。Docker 客户端只需向 Docker 服务器或守护进程发出请求，服务器或守护进程将完成所有工作并返回结果。Docker 守护进程有时也称为 Docker 引擎。Docker 提供了一个命令行工具 <code>docker</code> 以及一整套 RESTful API 来与守护进程交互。用户可以在同一台宿主机上运行 Docker 守护进程和客户端，也可以从本地的 Docker 客户端连接到运行在另一台宿主机上的远程 Docker 守护进程。</p>\\n<p><img src=\\"https://cdn.jsdelivr.net/gh/panxingcheng/static/image/20210124213412.png\\" alt=\\"\\"></p>\\n<p>（Docker 的架构。图片来源：THE DOCKER BOOK）</p>\\n<h4 id=\\"docker-镜像\\" tabindex=\\"-1\\">Docker 镜像 <a class=\\"header-anchor\\" href=\\"#docker-镜像\\" aria-label=\\"Permalink to &quot;Docker 镜像&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>镜像是构建 Docker 世界的基石。用户基于镜像来运行自己的容器。镜像也是 Docker 生命周期中的“构建”部分。镜像是基于联合（Union）文件系统的一种层式的结构，由一系列指令一步一步构建出来。例如：</p>\\n<ul>\\n<li>添加一个文件；</li>\\n<li>执行一个命令；</li>\\n<li>打开一个端口。</li>\\n</ul>\\n<p>也可以把镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。</p>\\n<h4 id=\\"registry-仓库\\" tabindex=\\"-1\\">Registry 仓库 <a class=\\"header-anchor\\" href=\\"#registry-仓库\\" aria-label=\\"Permalink to &quot;Registry 仓库&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>Docker 用 Registry 来保存用户构建的镜像。Registry 分为公共和私有两种。</p>\\n<p>Docker 公司运营的公共 Registry 叫作 Docker Hub。用户可以在 Docker Hub 注册账号，分享并保存自己的镜像。</p>\\n<p>用户也可以在 Docker Hub 上保存自己的私有镜像。例如，包含源代码或专利信息等需要保密的镜像，或者只在团队或组织内部可见的镜像。</p>\\n<p>用户甚至可以架设自己的私有 Registry。私有 Registry 可以受到防火墙的保护，将镜像保存在防火墙后面，以满足一些组织的特殊需求。</p>\\n<h4 id=\\"docker-容器\\" tabindex=\\"-1\\">Docker 容器 <a class=\\"header-anchor\\" href=\\"#docker-容器\\" aria-label=\\"Permalink to &quot;Docker 容器&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>Docker 可以帮用户构建和部署容器，用户只需要把自己的应用程序或服务打包放进容器即可。容器是基于镜像启动起来的（就像 Java 中的类和对象），容器中可以运行一个或多个进程。我们可以认为，<strong>镜像是 Docker 生命周期中的构建或打包阶段，而容器则是启动或执行阶段</strong>。</p>\\n<p>总结起来，Docker 容器就是：</p>\\n<ul>\\n<li>一个镜像格式；</li>\\n<li>一系列标准的操作；</li>\\n<li>一个执行环境。</li>\\n</ul>\\n<p>Docker 借鉴了标准集装箱的概念。唯一不同的是：集装箱运输货物，而 Docker 运输软件。</p>\\n<p>每个容器都包含一个软件镜像，也就是容器的“货物”，而且与真正的货物一样，容器里的软件镜像可以进行一些操作。例如，镜像可以被创建、启动、关闭、重启以及销毁。</p>\\n<p>和集装箱一样，Docker 在执行上述操作时，并不关心容器中到底塞进了什么，它不管里面是 Web 服务器，还是数据库，或者是应用程序服务器什么的。所有容器都按照相同的方式将内容“装载”进去。</p>\\n<p>Docker 也不关心用户要把容器运到何方：用户可以在自己的笔记本中构建容器，上传到 Registry，然后下载到一个物理的或者虚拟的服务器来测试，再把容器部署到云主机的集群中去。像标准集装箱一样，Docker 容器方便替换，可以叠加，易于分发，并且尽量通用。</p>\\n<h3 id=\\"能用-docker-做什么\\" tabindex=\\"-1\\">能用 Docker 做什么 <a class=\\"header-anchor\\" href=\\"#能用-docker-做什么\\" aria-label=\\"Permalink to &quot;能用 Docker 做什么&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>Docker的一些应用场景如下。</p>\\n<ul>\\n<li>\\n<p>加速本地开发和构建流程，使其更加高效、更加轻量化。本地开发人员可以构建、运行并分享 Docker 容器。容器可以在开发环境中构建，然后轻松地提交到测试环境中，并最终进入生产环境。</p>\\n</li>\\n<li>\\n<p>能够让独立服务或应用程序在不同的环境中，得到相同的运行结果。这一点在面向服务的架构和重度依赖微型服务的部署中尤其实用。</p>\\n</li>\\n<li>\\n<p>用 Docker 创建隔离的环境来进行测试。例如，用 Jenkins CI 这样的持续集成工具启动一个用于测试的容器。</p>\\n</li>\\n<li>\\n<p>Docker 可以让开发者先在本机上构建一个复杂的程序或架构来进行测试，而不是一开始就在生产环境部署、测试。</p>\\n</li>\\n<li>\\n<p>构建一个多用户的平台即服务（PaaS）基础设施。</p>\\n</li>\\n<li>\\n<p>为开发、测试提供一个轻量级的独立沙盒环境，或者将独立的沙盒环境用于技术教学，如 Unix shell 的使用、编程语言教学。</p>\\n</li>\\n<li>\\n<p>提供软件即服务（SaaS）应用程序。</p>\\n</li>\\n<li>\\n<p>高性能、超大规模的宿主机部署。</p>\\n</li>\\n</ul>\\n<h3 id=\\"docker-与配置管理\\" tabindex=\\"-1\\">Docker 与配置管理 <a class=\\"header-anchor\\" href=\\"#docker-与配置管理\\" aria-label=\\"Permalink to &quot;Docker 与配置管理&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>Docker 一个显著的特点就是，对不同的宿主机、应用程序和服务，可能会表现出不同的特性与架构（或者确切地说，Docker 本就是被设计成这样的）：Docker 可以是短生命周期的，但也可以用于恒定的环境，可以用一次即销毁，也可以提供持久的服务。这些行为并不会给 Docker 增加复杂性，也不会和配置管理工具的需求产生重合。基于这些行为，我们基本不需要担心管理状态的持久性，也不必太担心状态的复杂性，因为容器的生命周期往往比较短，而且重建容器状态的代价通常也比传统的状态修复要低。</p>\\n<p>由于多样化的管理需求，以及管理 Docker 自身的需求，在绝大多数组织中，Docker 和配置管理工具可能都需要部署。</p>\\n<h3 id=\\"docker-的技术组件\\" tabindex=\\"-1\\">Docker 的技术组件 <a class=\\"header-anchor\\" href=\\"#docker-的技术组件\\" aria-label=\\"Permalink to &quot;Docker 的技术组件&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>Docker 可以运行于任何安装了现代 Linux 内核的 x64 主机上。推荐的内核版本是 3.8 或者更高。Docker 的开销比较低，可以用于服务器、台式机或笔记本。它包括以下几个部分。</p>\\n<ul>\\n<li>\\n<p>一个原生的 Linux 容器格式，Docker中称为 libcontainer。</p>\\n</li>\\n<li>\\n<p>Linxu 内核的命名空间（namespace），用于隔离文件系统、进程和网络。</p>\\n</li>\\n<li>\\n<p>文件系统隔离：每个容器都有自己的 root 文件系统。</p>\\n</li>\\n<li>\\n<p>进程隔离：每个容器都运行在自己的进程环境中。</p>\\n</li>\\n<li>\\n<p>网络隔离：容器间的虚拟网络接口和 IP 地址都是分开的。</p>\\n</li>\\n<li>\\n<p>资源隔离和分组：使用 cgroups（即 control group，Linux 的内核特性之一）将 CPU 和内存之类的资源独立分配给每个 Docker 容器。</p>\\n</li>\\n<li>\\n<p>写时复制：文件系统都是通过写时复制创建的，这就意味着文件系统是分层的、快速的，而且占用的磁盘空间更小。</p>\\n</li>\\n<li>\\n<p>日志：容器产生的 STDOUT 、STDERR 和 STDIN 这些 IO 流都会被收集并记入日志，用来进行日志分析和故障排错。</p>\\n</li>\\n<li>\\n<p>交互式 Shell：用户可以创建一个伪 TTY 终端，将其连接到 STDIN ，为容器提供一个交互式的 Shell。</p>\\n</li>\\n</ul>\\n<h2 id=\\"安装-docker\\" tabindex=\\"-1\\">安装 Docker <a class=\\"header-anchor\\" href=\\"#安装-docker\\" aria-label=\\"Permalink to &quot;安装 Docker&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>Docker 的安装既快又简单。目前，Docker 已经支持非常多的 Linux 平台，包括 Ubuntu 和 RHEL（Red Hat Enterprise Linux，Red Hat 企业版 Linux）。除此之外，Docker 还支持 Debian、CentOS、Fedora、Oracle Linux 等衍生系统和相关的发行版。如果使用虚拟环境，甚至也可以在 OS X 和 Microsoft Windows 中运行 Docker。</p>\\n<h3 id=\\"安装-docker-的先决条件\\" tabindex=\\"-1\\">安装 Docker 的先决条件 <a class=\\"header-anchor\\" href=\\"#安装-docker-的先决条件\\" aria-label=\\"Permalink to &quot;安装 Docker 的先决条件&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>和安装其他软件一样，安装 Docker 也需要一些基本的前提条件。Docker 要求的条件具体如下。</p>\\n<ul>\\n<li>\\n<p>运行 64 位 CPU 构架的计算机（目前只能是 x86_64 和 amd64），请注意，Docker 目前不支持32位CPU。</p>\\n</li>\\n<li>\\n<p>运行 Linux 3.8 或更高版本内核。一些老版本的 2.6.x 或其后的内核也能够运行 Docker，但运行结果会有很大的不同。而且，如果需要就老版本内核寻求帮助，通常大家会被建议升级到更高版本的内核。</p>\\n</li>\\n<li>\\n<p>内核必须支持一种适合的存储驱动（Storage Driver），例如：</p>\\n<ul>\\n<li>Device Manager；</li>\\n<li>AUFS；</li>\\n<li>vfs；</li>\\n<li>btrfs；</li>\\n<li>ZFS（在Docker 1.7 中引入）；</li>\\n<li>默认存储驱动通常是 Device Mapper 或 AUFS（在 Docker 1.13.1 中是 overlay2 或 overlay（如果内核支持））。</li>\\n</ul>\\n</li>\\n<li>\\n<p>内核必须支持并开启 cgroup 和命名空间（namespace）功能。</p>\\n</li>\\n</ul>\\n<h3 id=\\"在-red-hat-和-red-hat-系发行版中安装-docker\\" tabindex=\\"-1\\">在 Red Hat 和 Red Hat 系发行版中安装 Docker <a class=\\"header-anchor\\" href=\\"#在-red-hat-和-red-hat-系发行版中安装-docker\\" aria-label=\\"Permalink to &quot;在 Red Hat 和 Red Hat 系发行版中安装 Docker&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>在 Red Hat 企业版 Linux（或者 CentOS 或 Fedora）中，只有少数几个版本可以安装 Docker，包括：</p>\\n<ul>\\n<li>RHEL（和 CentOS）6或以上的版本（64 位）</li>\\n<li>Fedora 19 或以上的版本（64 位）</li>\\n</ul>\\n<h4 id=\\"检查前提条件\\" tabindex=\\"-1\\">检查前提条件 <a class=\\"header-anchor\\" href=\\"#检查前提条件\\" aria-label=\\"Permalink to &quot;检查前提条件&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>在 Red Hat 和 Red Hat 系列的 Linux 发行版中，安装 Docker 所需的前提条件也并不多。</p>\\n<ol>\\n<li>\\n<p>内核</p>\\n<p>使用 <code>uname</code> 命令来确认是否安装了 3.8 或更高的内核版本：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> uname</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -a</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Linux</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> localhost.localdomain</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 3.10.0-1127.el7.x86_64</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> #1 SMP Tue Mar 31 23:36:51 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>检查 Device Mapper（v1.13.1 以下）</p>\\n<p>在 Red Hat 企业版 Linux、CentOS 6 或 Fedora 19 及更高版本宿主机中，应该也都安装了 Device Mapper：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ls</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -l</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /sys/class/misc/device-mapper</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">lrwxrwxrwx.</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 1</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> root</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> root</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 8月</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">  10</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 17:15</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /sys/class/misc/device-mapper</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> -</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ../../devices/virtual/misc/device-mapper</span></span></code></pre>\\n</div><p>同样，也可以在 <em>/proc/devices</em> 文件中检查是否有 device-mapper 条目：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> grep</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> device-mapper</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /proc/devices</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">253</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> device-mapper</span></span></code></pre>\\n</div><p>如果没有检测到 Device Mapper，也可以试着安装 device-mapper 软件包：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> yum</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> install</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -y</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> device-mapper</span></span></code></pre>\\n</div><p>安装完成后，还需要加载 dm_mod 内核模块：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">modprobe</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> dm_mod</span></span></code></pre>\\n</div></li>\\n</ol>\\n<div class=\\"tip custom-block\\"><p class=\\"custom-block-title\\">提示</p>\\n<p><strong>在 Docker v1.13.1 中，默认的 Storage Driver 已经由 Device Mapper 变成了 overlay2 或 overlay（如果内核支持）</strong>。</p>\\n<p><a href=\\"https://github.com/moby/moby/releases/tag/v1.13.1\\" target=\\"_blank\\" rel=\\"noreferrer\\">https://github.com/moby/moby/releases/tag/v1.13.1</a></p>\\n</div>\\n<h4 id=\\"安装-docker-1\\" tabindex=\\"-1\\">安装 Docker <a class=\\"header-anchor\\" href=\\"#安装-docker-1\\" aria-label=\\"Permalink to &quot;安装 Docker&quot;\\">&ZeroWidthSpace;</a></h4>\\n<ul>\\n<li>\\n<p>在 RHEL 7 中安装 Docker</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> yum</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> install</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -y</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span></span></code></pre>\\n</div><p>安装完毕后，查看 Docker 版本：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -v</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> version</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 1.13.1,</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> build</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 64e9980/1.13.1</span></span></code></pre>\\n</div></li>\\n</ul>\\n<h5 id=\\"在-centos-上安装最新版本的-docker\\" tabindex=\\"-1\\">在 CentOS 上安装最新版本的 Docker <a class=\\"header-anchor\\" href=\\"#在-centos-上安装最新版本的-docker\\" aria-label=\\"Permalink to &quot;在 CentOS 上安装最新版本的 Docker&quot;\\">&ZeroWidthSpace;</a></h5>\\n<p>需要 CentOS 7 及以上版本才能安装最新版本的 Docker，具体请参考<a href=\\"https://docs.docker.com/engine/install/centos/\\" target=\\"_blank\\" rel=\\"noreferrer\\">官网</a>。</p>\\n<ol>\\n<li>\\n<p>卸载旧版本的 Docker。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> yum</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> remove</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -y</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> \\\\</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\t\\t\\t\\tdocker-client</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> \\\\</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\t\\t\\t\\tdocker-client-latest</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> \\\\</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\t\\t\\t\\tdocker-common</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> \\\\</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\t\\t\\t\\tdocker-latest</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> \\\\</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\t\\t\\t\\tdocker-latest-logrotate</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> \\\\</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\t\\t\\t\\tdocker-logrotate</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> \\\\</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\t\\t\\t\\tdocker-engine</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>设置 Docker 存储库。之后，可以从存储库安装和更新 Docker。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> yum</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> install</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -y</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> yum-utils</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> yum-config-manager</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> \\\\</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">\\t\\t\\t--add-repo</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> \\\\</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\t\\t\\thttps://download.docker.com/linux/centos/docker-ce.repo</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>安装最新版本的 Docker 引擎和容器。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> yum</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> install</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -y</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker-ce</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker-ce-cli</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> containerd.io</span></span></code></pre>\\n</div></li>\\n</ol>\\n<h4 id=\\"启动-docker-守护进程\\" tabindex=\\"-1\\">启动 Docker 守护进程 <a class=\\"header-anchor\\" href=\\"#启动-docker-守护进程\\" aria-label=\\"Permalink to &quot;启动 Docker 守护进程&quot;\\">&ZeroWidthSpace;</a></h4>\\n<ul>\\n<li>\\n<p>在 RHEL 7 中启动 Docker 服务</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> systemctl</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> start</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span></span></code></pre>\\n</div><p>系统开机自动启动 Docker 服务：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> systemctl</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> enable</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Created</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> symlink</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /etc/systemd/system/multi-user.target.wants/docker.service</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> to</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /usr/lib/systemd/system/docker.service.</span></span></code></pre>\\n</div><p>用 <code>docker info</code> 命令来确认 Docker 是否已经正确安装并运行：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> info</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Client:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Debug</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Mode:</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> false</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Server:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Containers:</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  Running:</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  Paused:</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  Stopped:</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Images:</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Server</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Version:</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 19.03.13</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Storage</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Driver:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> overlay2</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  Backing</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Filesystem:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> extfs</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  Supports</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> d_type:</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> true</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  Native</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Overlay</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Diff:</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> true</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Logging</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Driver:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> json-file</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Cgroup</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Driver:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> cgroupfs</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">（省略）</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span></span></code></pre>\\n</div></li>\\n</ul>\\n<h2 id=\\"docker-入门\\" tabindex=\\"-1\\">Docker 入门 <a class=\\"header-anchor\\" href=\\"#docker-入门\\" aria-label=\\"Permalink to &quot;Docker 入门&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"运行第一个容器\\" tabindex=\\"-1\\">运行第一个容器 <a class=\\"header-anchor\\" href=\\"#运行第一个容器\\" aria-label=\\"Permalink to &quot;运行第一个容器&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>现在，尝试启动第一个 Docker 容器。</p>\\n<p>使用 <code>docker run</code> 命令创建容器。<code>docker run</code> 命令提供了 Docker 容器的创建到启动的功能。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> run</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -i</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -t</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /bin/bash</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Unable</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> to</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> find</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> image</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'ubuntu:latest\'</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> locally</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Trying</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> to</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> repository</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker.io/library/ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">latest:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pulling</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker.io/library/ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">3ff22d22a855:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> complete</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">e7cb79d19722:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> complete</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">323d0d660b6a:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> complete</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">b7f616834fd0:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> complete</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Digest:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> sha256:5d1d5407f353843ecf8b16524bc5565aa332e9e6a1297c73a92d3e754b8a636d</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Status:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Downloaded</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> newer</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> image</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> for</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker.io/ubuntu:latest</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@e1b1f6c2b1fe:/#</span></span></code></pre>\\n</div><ul>\\n<li><code>-i</code>：保证容器中的 STDIN 是开启的</li>\\n<li><code>-t</code>：为要创建的容器分配一个伪 TTY 终端</li>\\n</ul>\\n<p>若要在命令行下创建一个能与之进行交互的容器，而不是一个运行后台服务的容器，则这两个参数已经是最基本的参数了。</p>\\n<p>接下来，告诉 Docker 基于 Ubuntu 镜像来创建容器。</p>\\n<div class=\\"tip custom-block\\"><p class=\\"custom-block-title\\">提示</p>\\n<p>Ubuntu 镜像是一个常备镜像，也可以称为“基础”（Base）镜像，它由 Docker 公司提供，保存在 Docker Hub Registry 上。可以以 Ubuntu 基础镜像（以及类似的 Fedora、Debian、CentOS 等镜像）为基础，在选择的操作系统上构建自己的镜像。</p>\\n</div>\\n<p>那么，在这一切的背后又都发生了什么呢？</p>\\n<p>首先，Docker 会检查本地是否存在 Ubuntu 镜像，如果本地还没有该镜像的话，那么 Docker 就会连接官方维护的 Docker Hub Registry，查看 Docker Hub 中是否有该镜像。Docker 一旦找到该镜像，就会下载该镜像并将其保存到本地宿主机中。</p>\\n<p>随后，Docker 在文件系统内部用这个镜像创建了一个新容器。该容器拥有自己的网络、IP 地址，以及一个用来和宿主机进行通信的桥接网络接口。</p>\\n<p>最后，我们告诉 Docker 在新容器中要运行 <code>/bin/bash</code> 命令启动一个 Bash Shell。</p>\\n<h3 id=\\"使用第一个容器\\" tabindex=\\"-1\\">使用第一个容器 <a class=\\"header-anchor\\" href=\\"#使用第一个容器\\" aria-label=\\"Permalink to &quot;使用第一个容器&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>现在，我们已经以 root 用户登录到了新容器中，容器的ID e1b1f6c2b1fe。这是一个完整的 Ubuntu 系统，可以用它来做任何事情。下面就来研究一下这个容器。</p>\\n<p>首先，我们可以获取该容器的主机名：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@e1b1f6c2b1fe:/#</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> hostname</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">e1b1f6c2b1fe</span></span></code></pre>\\n</div><p>可以看到，容器的主机名就是该容器的 ID。</p>\\n<p>再来看看 <em>/etc/hosts</em> 文件：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@e1b1f6c2b1fe:/#</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> cat</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /etc/hosts</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">127.0.0.1</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">       localhost</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">:1</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">     localhost</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ip6-localhost</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ip6-loopback</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">fe00::0</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ip6-localnet</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">ff00::0</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ip6-mcastprefix</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">ff02::1</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ip6-allnodes</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">ff02::2</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ip6-allrouters</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">172.17.0.2</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">      e1b1f6c2b1fe</span></span></code></pre>\\n</div><p>Docker 已在 hosts 文件中为该容器的 IP 地址添加了一条主机配置项。</p>\\n<p>再来看看容器的网络配置情况：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@e1b1f6c2b1fe:/#</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ip</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> a</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">1:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> lo:</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> &#x3C;</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">LOOPBACK,UP,LOWER_U</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">P</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> mtu</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 65536</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> qdisc</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> noqueue</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> state</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> UNKNOWN</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> group</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> default</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> qlen</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 1000</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    link/loopback</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 00:00:00:00:00:00</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> brd</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 00:00:00:00:00:00</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    inet</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 127.0.0.1/8</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> scope</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> host</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> lo</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">       valid_lft</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> forever</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> preferred_lft</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> forever</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    inet6</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ::1/128</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> scope</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> host</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">       valid_lft</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> forever</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> preferred_lft</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> forever</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">18:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> eth0@if19:</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> &#x3C;</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">BROADCAST,MULTICAST,UP,LOWER_U</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">P</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> mtu</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 1500</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> qdisc</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> noqueue</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> state</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> UP</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> group</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> default</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    link/ether</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 02:42:ac:11:00:02</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> brd</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ff:ff:ff:ff:ff:ff</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> link-netnsid</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    inet</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 172.17.0.2/16</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> scope</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> global</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> eth0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">       valid_lft</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> forever</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> preferred_lft</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> forever</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    inet6</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> fe80::42:acff:fe11:2/64</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> scope</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> link</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">       valid_lft</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> forever</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> preferred_lft</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> forever</span></span></code></pre>\\n</div><p>可以看到，这里有 lo 的环回接口，还有 IP 为 172.17.0.2 的标准 eth0 网络接口，和普通宿主机是完全一样的。</p>\\n<p>还可以查看容器中运行的进程：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@e1b1f6c2b1fe:/#</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ps</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -aux</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">USER</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">       PID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> %CPU</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> %MEM</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">    VSZ</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">   RSS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> TTY</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">      STAT</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> START</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">   TIME</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> COMMAND</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">         1</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">  0.2</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">  0.1</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">   4100</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">  1988</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ?</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        Ss</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">   02:24</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">   0:00</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /bin/bash</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">         8</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">  0.0</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">  0.0</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">   5872</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">  1408</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ?</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        R+</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">   02:24</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">   0:00</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ps</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -aux</span></span></code></pre>\\n</div><p>安装一个软件包怎么样？比如 Vim：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@e1b1f6c2b1fe:/#</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> apt</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> update</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -y</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> &#x26;&#x26; </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">apt</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> install</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -y</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> vim</span></span></code></pre>\\n</div><p>当所有工作都结束时，输入 <code>exit</code> 命令，就可以返回到 Ubuntu 宿主机的命令行提示符了。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@e1b1f6c2b1fe:/#</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> exit</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">exit</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span></span></code></pre>\\n</div><p>这个容器现在怎样了？</p>\\n<p>容器现在已经停止运行了！只有在指定的 <code>/bin/bash</code> 命令处于运行状态的时候，我们的容器也才会相应地处于运行状态。一旦退出容器，<code>/bin/bash</code> 命令也就结束了，这时容器也随之停止了运行。</p>\\n<p>容器虽然停止运行，但容器仍然是存在的。</p>\\n<p>可以用 <code>docker ps -a</code> 命令查看当前系统中容器的列表：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ps</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -a</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">CONTAINER</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        IMAGE</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               COMMAND</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             CREATED</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             STATUS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                     PORTS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               NAMES</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">e1b1f6c2b1fe</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              \\"/bin/bash\\"</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">         22</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> minutes</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ago</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">      Exited</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (0) 1 minutes ago                       frosty_bohr</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"># 容器 ID \\t\\t\\t创建该容器的镜像\\t\\t容器最后执行的命令\\t容器创建时间\\t\\t\\t容器状态（0-正常退出）\\t\\t\\t\\t\\t\\t\\t容器名称</span></span></code></pre>\\n</div><p>默认情况下，当执行 <code>docker ps</code> 命令时，只能看到正在运行的容器。</p>\\n<ul>\\n<li><code>-a</code>：列出所有容器，包括正在运行的和已经停止的</li>\\n</ul>\\n<h3 id=\\"容器的命名\\" tabindex=\\"-1\\">容器的命名 <a class=\\"header-anchor\\" href=\\"#容器的命名\\" aria-label=\\"Permalink to &quot;容器的命名&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>Docker 会为我们创建的每一个容器自动生成一个随机的名称。例如，上面刚刚创建的容器就被命名为 frosty_bohr。</p>\\n<p>如果想为容器指定一个名称，而不是使用自动生成的名称，则可以用 <code>--name</code> 选项来实现：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> run</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> --name</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> my_ubuntu</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -i</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -t</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /bin/bash</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@e8a11190cf34:/#</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> exit</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">exit</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ps</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -a</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">CONTAINER</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        IMAGE</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               COMMAND</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             CREATED</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             STATUS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                      PORTS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               NAMES</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">e8a11190cf34</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              \\"/bin/bash\\"</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">         8</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> seconds</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ago</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">       Exited</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (0) 5 seconds ago                        my_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">e1b1f6c2b1fe</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              \\"/bin/bash\\"</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">         About</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> an</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> hour</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ago</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">   Exited</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (0) 53 minutes ago                       frosty_bohr</span></span></code></pre>\\n</div><p>可以看到，上述命令又新建了一个容器，并且容器的名称是 my_ubuntu。</p>\\n<div class=\\"tip custom-block\\"><p class=\\"custom-block-title\\">提示</p>\\n<p>一个合法的容器名称只能包含以下字符：小写字母 <code>a~z</code>、大写字母 <code>A~Z</code>、数字 <code>0~9</code>、下划线 <code>_</code>、圆点 <code>.</code>、横线 <code>-</code>（如果用正则表达式来表示这些符号，就是[a-zA-Z0-9_.-]）。</p>\\n</div>\\n<p>在很多 Docker 命令中，都可以用容器的名称来替代容器 ID。</p>\\n<p>好处：</p>\\n<ul>\\n<li>有助于分辨容器</li>\\n<li>当构建容器和应用程序之间的逻辑连接时，容器的名称也有助于从逻辑上理解连接关系。</li>\\n</ul>\\n<p>具体的名称（如 web 、db）比容器 ID 和随机容器名好记多了。</p>\\n<p>但是，容器的命名必须是唯一的。如果试图创建两个名称相同的容器，则命令将会失败。如果要使用的容器名称已经存在，可以先用 <code>docker rm</code> 命令删除已有的同名容器后，再来创建新的容器。</p>\\n<h3 id=\\"重新启动已经停止的容器\\" tabindex=\\"-1\\">重新启动已经停止的容器 <a class=\\"header-anchor\\" href=\\"#重新启动已经停止的容器\\" aria-label=\\"Permalink to &quot;重新启动已经停止的容器&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>my_ubuntu 容器已经停止了，如何才能重新启动一个已经停止的容器？</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> start</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> e8a11190cf34</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">e8a11190cf34</span></span></code></pre>\\n</div><p>除了容器 ID，也可以用容器名称来指定容器：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> start</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> my_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">my_ubuntu</span></span></code></pre>\\n</div><p>也可以使用 <code>docker restart</code> 命令来重新启动一个容器：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> restart</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> e8a11190cf34</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">e8a11190cf34</span></span></code></pre>\\n</div><div class=\\"tip custom-block\\"><p class=\\"custom-block-title\\">如何创建一个容器却不运行它？</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> create</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> --name</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> create_ubuntu</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -i</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -t</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /bin/bash</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">5940d36e87d1685c842980fd3d753102da63b30d02620d0a158aa874be1ac45c</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ps</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -a</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">CONTAINER</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        IMAGE</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               COMMAND</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             CREATED</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             STATUS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                         PORTS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               NAMES</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">5940d36e87d1</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              \\"/bin/bash\\"</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">         17</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> seconds</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ago</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">      Created</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                                            create_ubuntu</span></span></code></pre>\\n</div><p>可以看到，容器的状态是 <code>Created</code>。</p>\\n</div>\\n<h3 id=\\"附着到容器上\\" tabindex=\\"-1\\">附着到容器上 <a class=\\"header-anchor\\" href=\\"#附着到容器上\\" aria-label=\\"Permalink to &quot;附着到容器上&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>使用 <code>docker start</code> 或 <code>docker restart</code> 启动容器后，如何才能进入容器的会话中呢？</p>\\n<p>可以用 <code>docker attach</code> 命令，重新附着到该容器的会话上：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ps</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">CONTAINER</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        IMAGE</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               COMMAND</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             CREATED</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             STATUS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              PORTS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               NAMES</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">e8a11190cf34</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              \\"/bin/bash\\"</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">         2</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> hours</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ago</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">         Up</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 4</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> seconds</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                            my_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> attach</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> my_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@e8a11190cf34:/#</span></span></code></pre>\\n</div><p>同样，也可以使用容器 ID，重新附着到容器的会话上：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@e8a11190cf34:/#</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> exit</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">exit</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> start</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> my_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">my_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ps</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">CONTAINER</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        IMAGE</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               COMMAND</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             CREATED</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             STATUS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              PORTS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               NAMES</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">e8a11190cf34</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              \\"/bin/bash\\"</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">         2</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> hours</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ago</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">         Up</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 6</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> seconds</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                            my_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> attach</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> my_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@e8a11190cf34:/#</span></span></code></pre>\\n</div><div class=\\"warning custom-block\\"><p class=\\"custom-block-title\\">警告</p>\\n<p>需要注意的是，<strong>使用 <code>docker attach</code> 命令进入的容器会话，使用 <code>exit</code> 命令退出容器后容器也会随之停止运行</strong>。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@e8a11190cf34:/#</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> exit</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">exit</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ps</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">CONTAINER</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        IMAGE</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               COMMAND</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             CREATED</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             STATUS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              PORTS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               NAMES</span></span></code></pre>\\n</div><p>想要退出但还想保持容器的运行状态？请查看 <a href=\\"#在容器内部运行进程\\"><code>docker exec</code></a></p>\\n</div>\\n<h3 id=\\"创建守护式容器\\" tabindex=\\"-1\\">创建守护式容器 <a class=\\"header-anchor\\" href=\\"#创建守护式容器\\" aria-label=\\"Permalink to &quot;创建守护式容器&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>除了这些交互式运行的容器（Interactive Container），也可以创建长期运行的容器。守护式容器（Daemonized Container）没有交互式会话，非常适合运行应用程序和服务。大多数时候我们都需要以守护式来运行我们的容器。</p>\\n<p>启动一个守护式容器：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> run</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> --name</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> daemon_ubuntu</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -d</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /bin/bash</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -c</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"while true; do echo hello world; sleep 1; done\\"</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">45bf553af8d52b798246b6463cbfe20d7ac65546af2efe103dc6810ba9e99219</span></span></code></pre>\\n</div><ul>\\n<li><code>-d</code>：Docker 会将容器放到后台运行</li>\\n</ul>\\n<p>而且还在容器要运行的命令里使用了一个 <code>while</code> 循环，该循环会一直打印 “hello world”，直到容器或其进程停止运行。</p>\\n<p>执行docker ps 命令，可以看到一个正在运行的容器：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ps</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">CONTAINER</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        IMAGE</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               COMMAND</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                  CREATED</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             STATUS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              PORTS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               NAMES</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">45bf553af8d5</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              \\"/bin/bash -c \'whi...\\"</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">   33</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> seconds</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ago</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">      Up</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 32</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> seconds</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                           daemon_ubuntu</span></span></code></pre>\\n</div><h3 id=\\"容器内部都在干些什么\\" tabindex=\\"-1\\">容器内部都在干些什么 <a class=\\"header-anchor\\" href=\\"#容器内部都在干些什么\\" aria-label=\\"Permalink to &quot;容器内部都在干些什么&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>现在已经有了一个在后台运行 <code>while</code> 循环的守护型容器。为了探究该容器内部都在干些什么，可以用 <code>docker logs</code> 命令来获取容器的日志。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> logs</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> daemon_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">（省略））</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span></span></code></pre>\\n</div><p>可以看到 <code>while</code> 循环正在向日志里打印 “hello world”。Docker 会输出最后几条日志项并返回。</p>\\n<p>可以在命令后使用 <code>-f</code> 参数来监控 Docker 的日志，这与 <code>tail -f</code> 命令非常相似：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> logs</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -f</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> daemon_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">（省略））</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">（省略））</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span></span></code></pre>\\n</div><p>也可以跟踪容器日志的某一片段，和之前类似，只需要在 <code>tail</code> 命令后加入 <code>-f --tail</code> 选项即可。</p>\\n<p>可以用 <code>docker logs --tail 10 daemon_ubuntu</code> 获取日志的最后 10 行内容：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> logs</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> --tail</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 10</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> daemon_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span></span></code></pre>\\n</div><p>也可以用 <code>docker logs --tail 0 -f daemon_ubuntu</code> 命令来跟踪某个容器的最新日志而不必读取整个日志文件：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> logs</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> --tail</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -f</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> daemon_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">（省略））</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span></span></code></pre>\\n</div><p>为了让调试更简单，还可以使用 <code>-t</code> 选项为每条日志项加上时间戳：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> logs</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -ft</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> daemon_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">2020-08-08T08:36:03.014655000Z</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">2020-08-08T08:36:04.017475000Z</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">2020-08-08T08:36:05.018863000Z</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">2020-08-08T08:36:06.020292000Z</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">2020-08-08T08:36:07.021458000Z</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">2020-08-08T08:36:08.022631000Z</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">2020-08-08T08:36:09.023815000Z</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">（省略））</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span></span></code></pre>\\n</div><h3 id=\\"查看容器内的进程\\" tabindex=\\"-1\\">查看容器内的进程 <a class=\\"header-anchor\\" href=\\"#查看容器内的进程\\" aria-label=\\"Permalink to &quot;查看容器内的进程&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>使用 <code>docker top</code> 命令查看容器内部运行的进程。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> top</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> daemon_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">UID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                 PID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                 PPID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                C</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                   STIME</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               TTY</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                 TIME</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                CMD</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">                12001</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">               11985</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">               0</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                   16:36</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               ?</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                   00:00:00</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            /bin/bash</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -c</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> while</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> true</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">; </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">do</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> echo</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> hello</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> world</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">; </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">sleep</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">; </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">done</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">                21190</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">               12001</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">               0</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                   17:22</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               ?</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                   00:00:00</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            sleep</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 1</span></span></code></pre>\\n</div><h3 id=\\"docker-统计信息\\" tabindex=\\"-1\\">Docker 统计信息 <a class=\\"header-anchor\\" href=\\"#docker-统计信息\\" aria-label=\\"Permalink to &quot;Docker 统计信息&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>还可以使用 <code>docker stats</code> 命令，它用来显示一个或多个容器的统计信息。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> stats</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> --no-stream</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> daemon_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">CONTAINER</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">           CPU</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> %</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               MEM</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> USAGE</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> LIMIT</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">     MEM</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> %</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               NET</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> I/O</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             BLOCK</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> I/O</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">           PIDS</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">daemon_ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">       0.13%</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">               332</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> KiB</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 1.795</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> GiB</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">   0.02%</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">               656</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> B</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 656</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> B</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">       0</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> B</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> B</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">           2</span></span></code></pre>\\n</div><ul>\\n<li><code>--no-stream</code>：禁用流统计，并且只拉取第一个结果</li>\\n</ul>\\n<h3 id=\\"在容器内部运行进程\\" tabindex=\\"-1\\">在容器内部运行进程 <a class=\\"header-anchor\\" href=\\"#在容器内部运行进程\\" aria-label=\\"Permalink to &quot;在容器内部运行进程&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>可以通过 <code>docker exec</code> 命令在容器内部额外启动新进程。</p>\\n<p>可以在容器内运行的进程有两种类型：后台任务和交互式任务。后台任务在容器内运行且没有交互需求，而交互式任务则保持在前台运行。</p>\\n<p>例如，在 daemon_ubuntu 容器内创建一个空文件，文件名为*/etc/new_config_file*：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> exec</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -d</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> daemon_ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> touch</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /etc/new_config_file</span></span></code></pre>\\n</div><ul>\\n<li><code>-d</code>：Docker 会将容器放到后台运行</li>\\n</ul>\\n<p>也可以在 daemon_ubuntu 容器中启动一个诸如打开 Shell 的交互式任务：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> exec</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -it</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> daemon_ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /bin/bash</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@45bf553af8d5:/#</span></span></code></pre>\\n</div><p>这条命令会在 daemon_ubuntu 容器内创建一个新的 Bash 会话，有了这个会话，就可以在该容器中运行其他命令了。</p>\\n<h3 id=\\"停止守护式容器\\" tabindex=\\"-1\\">停止守护式容器 <a class=\\"header-anchor\\" href=\\"#停止守护式容器\\" aria-label=\\"Permalink to &quot;停止守护式容器&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>要停止守护式容器，只需要执行 <code>docker stop</code> 命令。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ps</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">CONTAINER</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        IMAGE</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               COMMAND</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                  CREATED</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             STATUS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              PORTS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               NAMES</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">45bf553af8d5</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              \\"/bin/bash -c \'whi...\\"</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">   47</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> hours</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ago</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        Up</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 47</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> hours</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                             daemon_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> stop</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> daemon_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">daemon_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ps</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">CONTAINER</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        IMAGE</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               COMMAND</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             CREATED</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             STATUS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              PORTS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               NAMES</span></span></code></pre>\\n</div><p>当然，也可以用容器 ID 来指代容器名称。</p>\\n<div class=\\"tip custom-block\\"><p class=\\"custom-block-title\\">提示</p>\\n<p><code>docker stop</code> 命令会向 Docker 容器进程发送 <code>SIGTERM</code> 信号。如果想快速停止某个容器，也可以使用 <code>docker kill</code> 命令来向容器进程发送 <code>SIGKILL</code> 信号。</p>\\n</div>\\n<h3 id=\\"自动重启容器\\" tabindex=\\"-1\\">自动重启容器 <a class=\\"header-anchor\\" href=\\"#自动重启容器\\" aria-label=\\"Permalink to &quot;自动重启容器&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>如果由于某种错误而导致容器停止运行，还可以通过 <code>--restart</code> 选项，让 Docker自动重新启动该容器。</p>\\n<p><code>--restart</code> 选项会检查容器的退出代码，并据此来决定是否要重启容器。默认的行为是 Docker不会重启容器。</p>\\n<p>例如，在 <code>docker run</code> 命令中使用 <code>--restart</code> 选项：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> run</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> --restart=always</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> --name</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> restart_daemon_ubuntu</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -d</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /bin/bash</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -c</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"while true; do echo hello world; sleep 1; done\\"</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">41a436cac75c3e6b9ad584186b0fd05dd541fc424346db6387c3b3e3c97e0c08</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ps</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">CONTAINER</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        IMAGE</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               COMMAND</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                  CREATED</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             STATUS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              PORTS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               NAMES</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">836d72968127</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              \\"/bin/bash -c \'whi...\\"</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">   31</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> seconds</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ago</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">      Up</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 30</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> seconds</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                                     restart_daemon_ubuntu</span></span></code></pre>\\n</div><ul>\\n<li><code>--restart=always</code>：无论容器的退出代码是什么，Docker都会自动重启该容器</li>\\n<li><code>--restart=on-failure</code>：只有当容器的退出代码为非 0 值的时候，才会自动重启</li>\\n</ul>\\n<p>另外，<code>on-failure</code> 还接受一个可选的重启次数参数：</p>\\n<p><code>--restart=on-failure:5</code></p>\\n<p>这样，当容器退出代码为非 0 时，Docker会尝试自动重启该容器，最多重启 5 次。</p>\\n<h3 id=\\"深入容器\\" tabindex=\\"-1\\">深入容器 <a class=\\"header-anchor\\" href=\\"#深入容器\\" aria-label=\\"Permalink to &quot;深入容器&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>除了通过 <code>docker ps</code> 命令获取容器的信息，还可以使用 <code>docker inspect</code> 来获得更多的容器信息。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> inspect</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> restart_daemon_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">[</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        \\"Id\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"836d7296812719500221fa9658ee6310eaca563134c3cd0c8e44a93c0b0e4823\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        \\"Created\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"2020-08-17T08:14:27.525087834Z\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        \\"Path\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"/bin/bash\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        \\"Args\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: [</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            \\"-c\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            \\"while true; do echo hello world; sleep 1; done\\"</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        ],</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        \\"State\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            \\"Status\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"running\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            \\"Running\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">true</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            \\"Paused\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">false</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            \\"Restarting\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">false</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            \\"OOMKilled\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">false</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            \\"Dead\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">false</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            \\"Pid\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: 29989,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            \\"ExitCode\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: 0,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            \\"Error\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            \\"StartedAt\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"2020-08-17T08:28:38.983253477Z\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            \\"FinishedAt\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"2020-08-17T08:21:43.727147711Z\\"</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        },</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">...（省略））...</span></span></code></pre>\\n</div><p><code>docker inspect</code> 命令会对容器进行详细的检查，然后返回其配置信息，包括名称、命令、网络配置以及很多有用的数据。</p>\\n<p>也可以用 <code>-f</code> 或者 <code>--format</code> 选项来选定查看结果：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> inspect</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -f</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'{{.State.Running}}\'</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> restart_daemon_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">true</span></span></code></pre>\\n</div><h3 id=\\"删除容器\\" tabindex=\\"-1\\">删除容器 <a class=\\"header-anchor\\" href=\\"#删除容器\\" aria-label=\\"Permalink to &quot;删除容器&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>如果容器已经不再使用，可以使用 <code>docker rm</code> 命令来删除它们。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> rm</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> e1b1f6c2b1fe</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">e1b1f6c2b1fe</span></span></code></pre>\\n</div><p><code>docker rm</code> 命令只能删除未启动的容器，想要删除正在运行的容器，需要使用 <code> docker rm -f</code>：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> rm</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -f</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> restart_daemon_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">restart_daemon_ubuntu</span></span></code></pre>\\n</div><p>也可以一次删除多个容器：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> rm</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> daemon_ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> create_ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> my_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">daemon_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">create_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">my_ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ps</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -a</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">CONTAINER</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        IMAGE</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               COMMAND</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             CREATED</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             STATUS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              PORTS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               NAMES</span></span></code></pre>\\n</div><p>删除全部容器</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> rm</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> `</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ps </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">-a</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -q</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">`</span></span></code></pre>\\n</div><h2 id=\\"使用-docker-镜像和仓库\\" tabindex=\\"-1\\">使用 Docker 镜像和仓库 <a class=\\"header-anchor\\" href=\\"#使用-docker-镜像和仓库\\" aria-label=\\"Permalink to &quot;使用 Docker 镜像和仓库&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"什么是docker镜像\\" tabindex=\\"-1\\">什么是Docker镜像 <a class=\\"header-anchor\\" href=\\"#什么是docker镜像\\" aria-label=\\"Permalink to &quot;什么是Docker镜像&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>Docker 镜像是由文件系统叠加而成。最底端是一个引导文件系统，即 bootfs，这很像典型的 Linux/Unix 的引导文件系统。实际上，当一个容器启动后，它将会被移到内存中，而引导文件系统则会被卸载（Unmount），以留出更多的内存供 initrd 磁盘镜像使用。</p>\\n<p>到目前为止，Docker 看起来还很像一个典型的 Linux 虚拟化栈。实际上，Docker 镜像的第二层是 root 文件系统 rootfs ，它位于引导文件系统之上。rootfs 可以是一种或多种操作系统（如 Debian 或者 Ubuntu 文件系统）。</p>\\n<p>在传统的 Linux 引导过程中，root 文件系统会最先以只读的方式加载，当引导结束并完成了完整性检查之后，它才会被切换为读写模式。但是在 Docker 里，root 文件系统永远只能是只读状态，并且 Docker 利用<strong>联合加载</strong>（Union Mount）技术又会在 root 文件系统层上加载更多的只读文件系统。联合加载指的是一次同时加载多个文件系统，但是在外面看起来只能看到一个文件系统。联合加载会将各层文件系统叠加到一起，这样最终的文件系统会包含所有底层的文件和目录。</p>\\n<p>Docker 将这样的文件系统称为镜像。一个镜像可以放到另一个镜像的顶部。位于下面的镜像称为父镜像（Parent Image），可以依次类推，直到镜像栈的最底部，最底部的镜像称为基础镜像（Base Image）。最后，当从一个镜像启动容器时，Docker 会在该镜像的最顶层加载一个读写文件系统。我们想在 Docker 中运行的程序就是在这个读写层中执行的。</p>\\n<p><img src=\\"https://cdn.jsdelivr.net/gh/panxingcheng/static/image/20210124214516.png\\" alt=\\"\\"></p>\\n<p>（Docker 文件系统层。图片来源：THE DOCKER BOOK）</p>\\n<p>当 Docker 第一次启动一个容器时，初始的读写层是空的。当文件系统发生变化时，这些变化都会应用到这一层上。比如，如果想修改一个文件，这个文件首先会从该读写层下面的只读层复制到该读写层。该文件的只读版本依然存在，但是已经被读写层中的该文件副本所隐藏。</p>\\n<p>通常这种机制被称为<strong>写时复制</strong>（Copy On Write），这也是使 Docker 如此强大的技术之一。每个只读镜像层都是只读的，并且以后永远不会变化。当创建一个新容器时，Docker 会构建出一个镜像栈，并在栈的最顶端添加一个读写层。这个读写层再加上其下面的镜像层以及一些配置数据，就构成了一个容器。我们已经知道，容器是可以修改的，它们都有自己的状态，并且是可以启动和停止的。容器的这种特点加上<strong>镜像分层框架</strong>（Image-Layering Framework），使我们可以快速构建镜像并运行包含我们自己的应用程序和服务的容器。</p>\\n<h3 id=\\"列出镜像\\" tabindex=\\"-1\\">列出镜像 <a class=\\"header-anchor\\" href=\\"#列出镜像\\" aria-label=\\"Permalink to &quot;列出镜像&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>可以使用 <code>docker images</code> 命令列出 Docker 主机上可用的镜像。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> images</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">REPOSITORY</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">          TAG</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                 IMAGE</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            CREATED</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             SIZE</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">docker.io/ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">    latest</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              1e4467b07108</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">        3</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> weeks</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ago</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">         73.9</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> MB</span></span></code></pre>\\n</div><p>可以看到，我们已经获得了一个镜像列表，它们都来源于一个名为 ubuntu 的仓库。那么，这些镜像是从何而来的呢？</p>\\n<p>镜像从仓库下载下来。镜像保存在仓库中，而仓库存在于 Registry 中。默认的 Registry 是由 Docker 公司运营的公共 Registry 服务，即 Docker Hub。</p>\\n<p><img src=\\"https://cdn.jsdelivr.net/gh/panxingcheng/static/image/20210124214542.png\\" alt=\\"\\"></p>\\n<p>（Docker Hub。图片来源：自己截得）</p>\\n<p>在 Docker Hub（或者用户自己运营的 Registry）中，镜像是保存在仓库中的。可以将镜像仓库想象为类似 Git 仓库的东西。它包括镜像、层以及关于镜像的元数据（Metadata）。</p>\\n<p>每个镜像仓库都可以存放很多镜像（比如，ubuntu 仓库包含了 Ubuntu 14.04、16.04、18.04 和 20.04 的镜像）。让我们看一下 ubuntu 仓库的另一个镜像：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ubuntu:18.04</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Trying</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> to</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> repository</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker.io/library/ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">18.04:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pulling</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker.io/library/ubuntu</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">7595c8c21622:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> complete</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">d13af8ca898f:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> complete</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">70799171ddba:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> complete</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">b6c12202c5ef:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> complete</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Digest:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> sha256:a61728f6128fb4a7a20efaa7597607ed6e69973ee9b9123e3b4fd28b7bba100b</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Status:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Downloaded</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> newer</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> image</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> for</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker.io/ubuntu:18.04</span></span></code></pre>\\n</div><p>这里使用了 <code>docker pull</code> 命令来拉取 ubuntu 仓库中的 Ubuntu 18.04 镜像。</p>\\n<p>再来看看 <code>docker images</code> 命令现在会显示什么结果：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> images</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">REPOSITORY</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">          TAG</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                 IMAGE</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            CREATED</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             SIZE</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">docker.io/ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">    latest</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              1e4467b07108</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">        3</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> weeks</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ago</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">         73.9</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> MB</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">docker.io/ubuntu</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">    18.04</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">               2eb2d388e1a2</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">        3</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> weeks</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ago</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">         64.2</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> MB</span></span></code></pre>\\n</div><p>可以看到，我们已经得到了 Ubuntu 的 latest 镜像和 18.04 镜像。这表明 ubuntu 镜像实际上是聚集在一个仓库下的一系列镜像。</p>\\n<p>可以通过在仓库名后面加上一个冒号和标签名来指定该仓库中的某一镜像：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> run</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -it</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> --name</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> new_container</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ubuntu:18.04</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /bin/bash</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@a95e35acc6d8:/#</span></span></code></pre>\\n</div><h3 id=\\"拉取镜像\\" tabindex=\\"-1\\">拉取镜像 <a class=\\"header-anchor\\" href=\\"#拉取镜像\\" aria-label=\\"Permalink to &quot;拉取镜像&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>用 <code>docker run</code> 命令从镜像启动一个容器时，如果该镜像不在本地，Docker 会先从 Docker Hub 下载该镜像。如果没有指定具体的镜像标签，那么 Docker 会自动下载 latest 标签的镜像。</p>\\n<p>其实也可以通过 <code>docker pull</code> 命令先发制人地将该镜像拉取到本地。使用 <code>docker pull</code> 命令可以节省从一个新镜像启动一个容器所需的时间。</p>\\n<p>例如，拉取一个 centos:7 基础镜像：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> centos:7</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Trying</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> to</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> repository</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker.io/library/centos</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">7:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pulling</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker.io/library/centos</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">75f829a71a1c:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> complete</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Digest:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> sha256:19a79828ca2e505eaee0ff38c2f3fd9901f4826737295157cc5212b7a372cd2b</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Status:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Downloaded</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> newer</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> image</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> for</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker.io/centos:7</span></span></code></pre>\\n</div><p>可以使用 <code>docker images</code> 命令看到这个新镜像已经下载到本地 Docker 宿主机上了。不过这次我们希望能在镜像列表中只看到 centos 镜像的内容。这可以通过在 docker images 命令后面指定镜像名来实现。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> images</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> centos</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">REPOSITORY</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">          TAG</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                 IMAGE</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            CREATED</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             SIZE</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">docker.io/centos</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">    7</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                   7e6257c9f8d8</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">        7</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> days</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ago</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">          203</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> MB</span></span></code></pre>\\n</div><h3 id=\\"查找镜像\\" tabindex=\\"-1\\">查找镜像 <a class=\\"header-anchor\\" href=\\"#查找镜像\\" aria-label=\\"Permalink to &quot;查找镜像&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>可以通过 <code>docker search</code> 命令来查找所有 Docker Hub 上公共的可用镜像。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> search</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> nginx</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">INDEX</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">       NAME</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                                         DESCRIPTION</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                                     STARS</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">     OFFICIAL</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">   AUTOMATED</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">docker.io</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">   docker.io/nginx</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                              Official</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> build</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> of</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Nginx.</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">                        13627</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">     [OK]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">docker.io</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">   docker.io/jwilder/nginx-proxy</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                Automated</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Nginx</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> reverse</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> proxy</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> for</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> c...</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">   1863</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">                 [OK]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">docker.io</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">   docker.io/richarvey/nginx-php-fpm</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            Container</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> running</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Nginx</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> +</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> PHP-FPM</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> capable</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ...</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">   783</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">                  [OK]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">docker.io</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">   docker.io/linuxserver/nginx</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                  An</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Nginx</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> container,</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> brought</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> to</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> you</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> by</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Linu...</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">   126</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">（省略））</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">...</span></span></code></pre>\\n</div><p>上面的命令在 Docker Hub 上查找了所有带有 nginx 的镜像。这条命令会完成镜像查找工作，并返回如下信息：</p>\\n<ul>\\n<li>仓库名（Name）；</li>\\n<li>镜像描述（Description）；</li>\\n<li>用户评价（Stars）—反应出一个镜像的受欢迎程度；</li>\\n<li>是否官方（Official）—由上游开发者管理的镜像（如 nginx 镜像由 Nginx 团队管理）；</li>\\n<li>自动构建（Automated）—表示这个镜像是由 Docker Hub 的自动构建（Automated Build）流程创建的。</li>\\n</ul>\\n<p>从上面的结果中拉取一个 nginx 镜像：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> nginx</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Using</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> default</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> tag:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> latest</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Trying</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> to</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> repository</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker.io/library/nginx</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">latest:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pulling</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker.io/library/nginx</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">bf5952930446:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> complete</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">cb9a6de05e5a:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> complete</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">9513ea0afb93:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> complete</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">b49ea07d2e93:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> complete</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">a5e4a503d449:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> complete</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Digest:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> sha256:b0ad43f7ee5edbc0effbc14645ae7055e21bc1973aee5150745632a24a752661</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Status:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Downloaded</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> newer</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> image</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> for</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker.io/nginx:latest</span></span></code></pre>\\n</div><p>接着用 <code>docker run</code> 命令来构建一个 nginx 容器并查看 NGINX 的版本：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> run</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -it</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> --name</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> my_nginx</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> nginx</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /bin/bash</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@83c73e8942e2:/#</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> nginx</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -v</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">nginx</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> version:</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> nginx/1.19.2</span></span></code></pre>\\n</div><h3 id=\\"构建镜像\\" tabindex=\\"-1\\">构建镜像 <a class=\\"header-anchor\\" href=\\"#构建镜像\\" aria-label=\\"Permalink to &quot;构建镜像&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>前面已经看到了如何拉取已经构建好的带有定制内容的 Docker 镜像，那么如何修改自己的镜像，并且更新和管理这些镜像呢？构建 Docker 镜像有以下两种方法。</p>\\n<ul>\\n<li>使用 <code>docker commit</code> 命令。</li>\\n<li>使用 <code>docker build</code> 命令和 Dockerfile 文件。</li>\\n</ul>\\n<h4 id=\\"用-docker-的-commit-命令创建镜像\\" tabindex=\\"-1\\">用 Docker 的 commit 命令创建镜像 <a class=\\"header-anchor\\" href=\\"#用-docker-的-commit-命令创建镜像\\" aria-label=\\"Permalink to &quot;用 Docker 的 commit 命令创建镜像&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>创建 Docker 镜像的第一种方法是使用 <code>docker commit</code> 命令。可以将此想象为是在往版本控制系统里提交变更。我们先创建一个容器，并在容器里做出修改，就像修改代码一样，最后再将修改提交为一个新镜像。</p>\\n<p>先从创建一个新容器开始，这个容器基于前面已经见过的 ubuntu 镜像：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> run</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -it</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ubuntu</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /bin/bash</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@33642e204bb3:/#</span></span></code></pre>\\n</div><p>接下来，在容器中安装 Apache：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@33642e204bb3:/#</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> apt</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> update</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -y</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> &#x26;&#x26; </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">apt</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> install</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -y</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> apache2</span></span></code></pre>\\n</div><p>最后，使用 <code>exit</code> 命令从容器里退出，再运行 <code>docker commit</code> 命令：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@33642e204bb3:/#</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> exit</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">exit</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> commit</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 33642e204bb3</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> my_ubuntu/apache</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">sha256:a35d5689b04569b07c580c8c9d77f12ea6e47d4b3960034dc61876a1b58e4f4d</span></span></code></pre>\\n</div><p>可以看到，在 <code>docker commit</code> 命令中，指定了要提交的修改过的容器的 ID（可以通过 <code>docker ps -l -q</code> 命令得到最后创建的容器的 ID），以及一个目标镜像仓库和镜像名，这里是 my_ubuntu/apache。</p>\\n<p>来看看新创建的镜像：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> images</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> my_ubuntu/apache</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">REPOSITORY</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">          TAG</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">                 IMAGE</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ID</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            CREATED</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">             SIZE</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">my_ubuntu/apache</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">    latest</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">              a35d5689b045</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">        4</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> minutes</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ago</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">       210</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> MB</span></span></code></pre>\\n</div><p>也可以在提交镜像时指定更多的数据（包括标签）来详细描述所做的修改。</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> commit</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -a</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'helloworld.study\'</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -m</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'A new custom image\'</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 33642e204bb3</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> my_ubuntu/apache2:1.0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">sha256:8dcf5ceb53bbc2a8999a1a75ac6376baea284bae6e5e5f02c67944917f1d7072</span></span></code></pre>\\n</div><ul>\\n<li><code>-a</code>：作者</li>\\n<li><code>-m</code>：提交信息</li>\\n</ul>\\n<p>可以用 <code>docker inspect</code> 命令来查看新创建的镜像的详细信息：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> inspect</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> my_ubuntu/apache2:1.0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">[</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        \\"Id\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"sha256:8dcf5ceb53bbc2a8999a1a75ac6376baea284bae6e5e5f02c67944917f1d7072\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        \\"RepoTags\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: [</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">            \\"my_ubuntu/apache2:1.0\\"</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        ],</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        \\"RepoDigests\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: [],</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        \\"Parent\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"sha256:1e4467b07108685c38297025797890f0492c4ec509212e2e4b4822d367fe6bc8\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        \\"Comment\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"A new custom image\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        ……（省略）……</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">        \\"Author\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"helloworld.study\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">……（省略）……</span></span></code></pre>\\n</div><p>现在就可以使用 <code>docker run</code> 命令从刚创建的新镜像运行一个容器了：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">  docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> run</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -it</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> my_ubuntu/apache2:1.0</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /bin/bash</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">root@a11753b0b1d1:/#</span></span></code></pre>\\n</div><h4 id=\\"用-dockerfile-构建镜像\\" tabindex=\\"-1\\">用 Dockerfile 构建镜像 <a class=\\"header-anchor\\" href=\\"#用-dockerfile-构建镜像\\" aria-label=\\"Permalink to &quot;用 Dockerfile 构建镜像&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>Dockerfile 使用基本的基于 DSL（Domain Specific Language）语法的指令来构建一个 Docker 镜像，推荐使用 Dockerfile 方法来代替 <code>docker commit</code>，因为通过前者来构建镜像更具备可重复性、透明性以及幂等性。</p>\\n<p>一旦有了 Dockerfile，就可以使用 <code>docker build</code> 命令基于该 Dockerfile 中的指令构建一个新的镜像。</p>\\n<h5 id=\\"第一个-dockerfile\\" tabindex=\\"-1\\">第一个 Dockerfile <a class=\\"header-anchor\\" href=\\"#第一个-dockerfile\\" aria-label=\\"Permalink to &quot;第一个 Dockerfile&quot;\\">&ZeroWidthSpace;</a></h5>\\n<p>例如创建一个包含简单 Web 服务器的 Docker 镜像。</p>\\n<p>创建一个目录并在里面创建初始的 Dockerfile：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> mkdir</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> my_nginx</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> cd</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> my_nginx/</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> touch</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Dockerfile</span></span></code></pre>\\n</div><p>static_web 目录用来保存 Dockerfile，这个目录就是构建环境（Build Environment），Docker 则称此环境为上下文（Context）或者构建上下文（Build context）。Docker 会在构建镜像时将构建上下文和该上下文中的文件和目录上传到 Docker 守护进程。这样 Docker 守护进程就能直接访问用户想在镜像中存储的任何代码、文件或者其他数据。</p>\\n<p>在 Dockerfile 中构建一个能作为 Web 服务器的 Docker 镜像：</p>\\n<div class=\\"language-dockerfile vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">dockerfile</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"># Version: 0.0.1</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">FROM</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ubuntu:18.04</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">RUN</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apt update -y</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">RUN</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apt install -y nginx</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">RUN</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> echo </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'Hi, I am in your container\'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> > /var/www/html/index.nginx-debian.html</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">EXPOSE</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> 80</span></span></code></pre>\\n</div><p>该 Dockerfile 由一系列指令和参数组成。每条指令，如 <code>FROM</code>，都必须为大写字母，且后面要跟随一个参数：<code>FROM ubuntu:18.04</code>。Dockerfile 中的指令会按顺序从上到下执行，所以应该根据需要合理安排指令的顺序。</p>\\n<p>每条指令都会创建一个新的镜像层并对镜像进行提交。Docker 大体上按照如下流程执行 Dockerfile 中的指令。</p>\\n<ul>\\n<li>Docker 从基础镜像运行一个容器。</li>\\n<li>执行一条指令，对容器做出修改。</li>\\n<li>执行类似 <code>docker commit</code> 的操作，提交一个新的镜像层。</li>\\n<li>Docker 再基于刚提交的镜像运行一个新容器。</li>\\n<li>执行 Dockerfile 中的下一条指令，直到所有指令都执行完毕。</li>\\n</ul>\\n<p>从上面也可以看出，如果 Dockerfile 由于某些原因（如某条指令失败了）没有正常结束，我们也可以得到一个可以使用的镜像。这对调试非常有帮助：可以基于该镜像运行一个具备交互功能的容器，使用最后创建的镜像对为什么用户的指令会失败进行调试。</p>\\n<p>注意，<strong>每个 Dockerfile 的第一条指令必须是 <code>FROM</code></strong>。<code>FROM</code> 指令指定一个已经存在的镜像，后续指令都将基于该镜像进行，这个镜像被称为基础镜像（Base Iamge）。</p>\\n<p>在上面的例子中，我们指定了 ubuntu:18.04 作为新镜像的基础镜像。基于这个 Dockerfile 构建的新镜像将以 Ubuntu 18.04 操作系统为基础。</p>\\n<p>在 <code>FROM</code> 指令之后，又指定了两条 <code>RUN</code> 指令。<code>RUN</code> 指令会在当前镜像中运行指定的命令。</p>\\n<p>在这个例子里，我们通过 <code>RUN</code> 指令更新了已经安装的 APT 仓库并安装了 nginx 包，之后创建了 <em>/var/www/html/index.nginx-debian.html</em> 文件，并将 <code>echo</code> 输出的内容写入到此文件中 。像前面说的那样，每条 <code>RUN</code> 指令都会创建一个新的镜像层，如果该指令执行成功，就会将此镜像层提交，之后继续执行 Dockerfile 中的下一条指令。</p>\\n<div class=\\"tip custom-block\\"><p class=\\"custom-block-title\\">提示</p>\\n<p>默认情况下，<code>RUN</code> 指令会在 Shell 里使用命令包装器 <code>/bin/sh -c</code> 来执行。如果是在一个不支持 Shell 的平台上运行或者不希望在 Shell 中运行（比如避免 Shell 字符串篡改），也可以使用 exec 格式的 <code>RUN</code> 指令。</p>\\n<div class=\\"language-dockerfile vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">dockerfile</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">RUN</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> [</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"apt\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"install\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"-y\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"nginx\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">]</span></span></code></pre>\\n</div><p>在这种方式中，使用一个数组来指定要运行的命令和传递给该命令的每个参数。</p>\\n</div>\\n<p>接着设置了 <code>EXPOSE</code> 指令，这条指令告诉 Docker 该容器内的应用程序将会使用容器的指定端口。出于安全的原因，Docker 并不会自动打开该端口，而是需要在使用 <code>docker run</code> 运行容器时来指定需要打开哪些端口。</p>\\n<p>可以指定多个 <code>EXPOSE</code> 指令来向外部公开多个端口。</p>\\n<h5 id=\\"基于-dockerfile-构建新镜像\\" tabindex=\\"-1\\">基于 Dockerfile 构建新镜像 <a class=\\"header-anchor\\" href=\\"#基于-dockerfile-构建新镜像\\" aria-label=\\"Permalink to &quot;基于 Dockerfile 构建新镜像&quot;\\">&ZeroWidthSpace;</a></h5>\\n<p>执行 <code>docker build</code> 命令时，Dockerfile 中的所有指令都会被执行并且提交，并且在该命令成功结束后返回一个新镜像。</p>\\n<p>下面就来看看如何构建一个新镜像：</p>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> cd</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> my_nginx/</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> build</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -t</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> my_ubuntu/nginx</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> .</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Sending</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> build</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> context</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> to</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> Docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> daemon</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 2.048</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> kB</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">Step</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 1/5</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> :</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> FROM</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> ubuntu:18.04</span></span></code></pre>\\n</div>","date":{"time":1596888000000,"string":"August 8, 2020"}},{"categories":"Java","title":"Gson 反序列化会将 int 转换为 double 类型的问题与解决方案","url":"/category/java/Gson 反序列化会将 int 转换为 double 类型的问题与解决方案.html","excerpt":"","date":{"time":1595764800000,"string":"July 26, 2020"}},{"categories":"Java","title":"Java 消息服务","url":"/category/java/Java 消息服务.html","excerpt":"","date":{"time":1595332800000,"string":"July 21, 2020"}},{"categories":"Spring","title":"Java 发送 Email 并与 Spring 集成","url":"/category/spring/Java 发送 Email 并与 Spring 集成.html","excerpt":"","date":{"time":1595073600000,"string":"July 18, 2020"}},{"categories":".NET","title":"C# 入门","url":"/category/dotnet/csharp 入门.html","excerpt":"","date":{"time":1594641600000,"string":"July 13, 2020"}},{"categories":"Java","title":"Java BigDecimal","url":"/category/java/Java BigDecimal.html","excerpt":"<h1 id=\\"java-bigdecimal\\" tabindex=\\"-1\\">Java BigDecimal <a class=\\"header-anchor\\" href=\\"#java-bigdecimal\\" aria-label=\\"Permalink to &quot;Java BigDecimal&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>在带有小数的数值计算（<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>）中，<code>float</code> 和 <code>double</code> 类型的计算结果往往不如人意。</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">1.1</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> +</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0.1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">); </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 1.2000000000000002</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">1.1</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> -</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0.1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">); </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 1.0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">1.1</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> *</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0.1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">); </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 0.11000000000000001</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">1.1</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> /</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0.1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">); </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 11.0</span></span></code></pre>\\n</div><p>这是因为现在的计算机主要采用的是<a href=\\"https://ieeexplore.ieee.org/document/8766229\\" target=\\"_blank\\" rel=\\"noreferrer\\">754 - IEEE 浮点算术标准</a>来表示浮点数，对小数的存储只能尽量做到精确，却做不到完全精确。</p>\\n<p>《Effective Java》这本书中对 <code>float</code> 和 <code>double</code> 的使用总结的很好：</p>\\n<blockquote>\\n<p><code>float</code> 和 <code>double</code> 类型主要用于科学和工程计算。 它们执行二进制浮点运算，经过精心设计，可在很宽的范围内快速提供准确的近似值。 但是，它们不能提供准确的结果，不应在需要确切结果的地方使用。 <strong><code>float</code> 和 <code>double</code> 类型特别不适合进行货币计算</strong>，因为不可能将 0.1(或任何其他 10 的负次方)精确地表示为 <code>float</code> 或 <code>double</code>。</p>\\n</blockquote>\\n<p>解决此问题的正确方法是使用 <code>BigDecimal</code>，<code>int</code> 或 <code>long</code> 进行货币计算。也就是说，可以将小数转成 <code>BigDecimal</code>，或将小数乘以一个固定的倍率转换为 <code>int</code> 或 <code>long</code>，计算完成后再除以倍率转换回来。</p>\\n<h2 id=\\"bigdecimal-简介\\" tabindex=\\"-1\\">BigDecimal 简介 <a class=\\"header-anchor\\" href=\\"#bigdecimal-简介\\" aria-label=\\"Permalink to &quot;BigDecimal 简介&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p><code>BigDecimal</code> 的全类名为 <code>java.math.BigDecimal</code>。根据 Java API 文档说明，<code>BigDecimal</code> 的特点如下：</p>\\n<ul>\\n<li>不可变的、任意精度的有符号小数</li>\\n<li>提供用于算术、数值范围处理、舍入、比较、哈希和格式转换的操作</li>\\n<li>完全控制舍入行为</li>\\n</ul>\\n<h2 id=\\"bigdecimal-构造方法\\" tabindex=\\"-1\\">BigDecimal 构造方法 <a class=\\"header-anchor\\" href=\\"#bigdecimal-构造方法\\" aria-label=\\"Permalink to &quot;BigDecimal 构造方法&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p><code>BigDecimal</code> 类提供了多个构造方法供我们实例化 <code>BigDecimal</code>，常用的是下面几种：</p>\\n<ul>\\n<li><code>public BigDecimal(int val)</code> 将 <code>int</code> 转换为 <code>BigDecimal</code></li>\\n<li><code>public BigDecimal(double val)</code> 将 <code>double</code> 转换为 <code>BigDecimal</code>（不建议）</li>\\n<li><code>public BigDecimal(String val)</code> 将 <code>String</code> 转换为 <code>BigDecimal</code></li>\\n</ul>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 实例化 BigDecimal</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">BigDecimal bigDecimal </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> BigDecimal</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">10</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">); </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 将 int 转换为 BigDecimal</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">BigDecimal bigDecimal1 </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> BigDecimal</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">10.0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">); </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 将 double 转换为 BigDecimal（不建议）</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">BigDecimal bigDecimal2 </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> BigDecimal</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"10.0\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">); </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 将 String 转换为 BigDecimal</span></span></code></pre>\\n</div><p>为什么不建议使用 <code>BigDecimal(double val)</code> 来实例化 <code>BigDecimal</code>：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 不建议使用 double 构造 BigDecimal</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">BigDecimal bigDecimal </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> BigDecimal</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0.1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(bigDecimal);</span></span></code></pre>\\n</div><p>打印结果为：</p>\\n<p><code>0.1000000000000000055511151231257827021181583404541015625</code></p>\\n<p>可以看到，这比我们直接使用 <code>double</code> 类型还要糟糕。对此，Java API 文档做了注释：</p>\\n<blockquote>\\n<ol>\\n<li>\\n<p><strong>这个构造函数的结果可能有些不可预测</strong>。您可能会假设在 Java 中写入新的 <code>BigDecimal(0.1)</code> 会创建一个完全等于 0.1 的 <code>BigDecimal(一个未缩放的值 1，刻度为 1)</code>，但是它实际上等于 0.1000000000000000055511151231257827021181583404541015625。这是因为 0.1 不能精确地表示为一个双精度数(或者说，任何有限长度的二进制分数)。因此，传递给构造函数的值并不完全等于 0.1，尽管看起来是这样。</p>\\n</li>\\n<li>\\n<p>另一方面，字符串构造函数是完全可预测的：编写新的 <code>BigDecimal(&quot;0.1&quot;)</code> 将创建一个完全等于 0.1 的 <code>BigDecimal</code>，这与预期的一样。因此，<strong>通常建议优先使用字符串构造函数</strong>。</p>\\n</li>\\n<li>\\n<p>当 <code>double</code> 必须用作 <code>BigDecimal</code> 的源时，请注意此构造函数提供了精确的转换;与使用 <code>double.tostring(double)</code> 方法将 <code>double</code> 转换为字符串，然后使用 <code>BigDecimal(String)</code> 构造函数得到的结果不同。要得到这个结果，<strong>使用静态 <code>valueOf(double)</code> 方法</strong>。</p>\\n</li>\\n</ol>\\n</blockquote>\\n<p>也就是说，必须使用 <code>double</code> 创建一个 <code>BigDecimal</code> 时，可以使用 <code>BigDecimal.valueOf(double)</code> 静态方法生成 <code>BigDecimal</code> 对象：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 使用 BigDecimal.valueOf(double) 静态方法生成 BigDecimal</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">BigDecimal bigDecimal </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> BigDecimal.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">valueOf</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0.1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(bigDecimal); </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 0.1</span></span></code></pre>\\n</div><h2 id=\\"bigdecimal-算术运算-加减乘除\\" tabindex=\\"-1\\">BigDecimal 算术运算（加减乘除） <a class=\\"header-anchor\\" href=\\"#bigdecimal-算术运算-加减乘除\\" aria-label=\\"Permalink to &quot;BigDecimal 算术运算（加减乘除）&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p><code>BigDecimal</code> 提供了 <code>add</code>、<code>subtract</code>、<code>multiply</code>、<code>divide</code> 方法进行“加减乘除”运算操作。</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// BigDecimal 加减乘除</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">BigDecimal x </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> BigDecimal</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"1.1\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">BigDecimal y </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> BigDecimal</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"0.1\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"x + y = \\"</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> +</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> x.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">add</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(y)); </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// x + y = 1.2</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"x - y = \\"</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> +</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> x.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">subtract</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(y)); </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// x - y = 1.0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"x * y = \\"</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> +</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> x.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">multiply</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(y)); </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// x * y = 0.11</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"x / y = \\"</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> +</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> x.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">divide</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(y)); </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// x / y = 11</span></span></code></pre>\\n</div><p>可以看到，这样的结果才是我们想要的。</p>\\n<div class=\\"warning custom-block\\"><p class=\\"custom-block-title\\">注意</p>\\n<p>就像 <code>String</code> 一样，<code>BigDecimal</code> 也是不可变的类型。这意味着“加减乘除”的运算结果都会返回一个全新的 <code>BigDecimal</code>。</p>\\n</div>\\n<h2 id=\\"bigdecimal-中的除法\\" tabindex=\\"-1\\">BigDecimal 中的除法 <a class=\\"header-anchor\\" href=\\"#bigdecimal-中的除法\\" aria-label=\\"Permalink to &quot;BigDecimal 中的除法&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>对于 “10 / 3” 的结果，数学中可以表示为 “≈3.33” ，而在 Java 中会直接舍去小数部分，只取商。</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">10</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> /</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 3</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">); </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 3</span></span></code></pre>\\n</div><p>想要保留小数部分，需要除数或被除数为小数形式：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">10.0</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> /</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 3</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">); </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 3.3333333333333335</span></span></code></pre>\\n</div><p>可是 <code>float</code> 和 <code>double</code> 运算结果的精度是无法预料的，那使用 <code>BigDecimal</code> 呢？</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">BigDecimal i </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> BigDecimal.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">valueOf</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">10</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">BigDecimal j </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> BigDecimal.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">valueOf</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">3</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"i / j = \\"</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> +</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> i.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">divide</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(j)); </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</span></span></code></pre>\\n</div><p>“10 / 3”的结果是一个无穷小数，不抛异常才怪（原来刚才计算“1.1 / 0.1”正常，完全是运气好 o(∩_∩)o 哈哈）。</p>\\n<p><code>BigDecimal divide(BigDecimal divisor)</code> 方法的描述如下：</p>\\n<blockquote>\\n<p>返回一个 <code>BigDecimal</code>，其值为(this / divisor)，其首选<strong>数值范围</strong>为(this.scale() - divisor.scale());如果不能表示精确的商(由于它是无限小数)，则抛出 <code>ArithmeticException</code> 异常。</p>\\n</blockquote>\\n<p>为了解决除不尽的问题，需要使用 <code>divide</code> 的重载（overload）方法：</p>\\n<p><code>BigDecimal divide(BigDecimal divisor, int scale, RoundingMode roundingMode)</code></p>\\n<p>方法参数含义为：</p>\\n<blockquote>\\n<p>divisor - 除数</p>\\n<p>scale - 小数的数值范围（小数点后几位）</p>\\n<p>roundingMode - 舍入模式（八种舍入模式）</p>\\n</blockquote>\\n<p>例如，要保留两位小数，且舍去（截断）后面的小数：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">BigDecimal i </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> BigDecimal.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">valueOf</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">10</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">BigDecimal j </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> BigDecimal.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">valueOf</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">3</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"i / j = \\"</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> +</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> i.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">divide</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(j, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">2</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, RoundingMode.DOWN)); </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 3.33</span></span></code></pre>\\n</div><h2 id=\\"bigdecimal-中的舍入模式\\" tabindex=\\"-1\\">BigDecimal 中的舍入模式 <a class=\\"header-anchor\\" href=\\"#bigdecimal-中的舍入模式\\" aria-label=\\"Permalink to &quot;BigDecimal 中的舍入模式&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p><code>RoundingMode</code> 类是一个枚举类，其中有八种枚举类型（<code>UP</code>、<code>DOWN</code>、<code>CEILING</code>、<code>FLOOR</code>、<code>HALF_UP</code>、<code>HALF_DOWN</code>、<code>HALF_EVEN</code>、<code>UNNECESSARY</code>），分别代表八种不同的舍入模式。</p>\\n<h3 id=\\"roundingmode-up\\" tabindex=\\"-1\\">RoundingMode.UP <a class=\\"header-anchor\\" href=\\"#roundingmode-up\\" aria-label=\\"Permalink to &quot;RoundingMode.UP&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>进一。以 0 为基准，舍入后的数字远离 0。</p>\\n<p>输入数字 | 远离 0 取整</p>\\n","date":{"time":1593864000000,"string":"July 4, 2020"}},{"categories":"Spring","title":"Spring 事务传播行为","url":"/category/spring/Spring 事务传播行为.html","excerpt":"<h1 id=\\"spring-事务传播行为\\" tabindex=\\"-1\\">Spring 事务传播行为 <a class=\\"header-anchor\\" href=\\"#spring-事务传播行为\\" aria-label=\\"Permalink to &quot;Spring 事务传播行为&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p><code>Propagation</code>枚举，该枚举表示与<code>@Transactional</code>事务注解一起使用的事务传播行为，对应于<code>TransactionDefinition</code>接口。</p>\\n<h2 id=\\"required\\" tabindex=\\"-1\\">REQUIRED <a class=\\"header-anchor\\" href=\\"#required\\" aria-label=\\"Permalink to &quot;REQUIRED&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>支持当前事务，如果不存在则创建一个新事务。这是<code>@Transactional</code>事务注解的默认设置。</p>\\n<p>假设Service A中的a方法调用Service B中的b方法，这里分为两种情况：</p>\\n<h3 id=\\"a方法有-transactional事务注解\\" tabindex=\\"-1\\">a方法有<code>@Transactional</code>事务注解 <a class=\\"header-anchor\\" href=\\"#a方法有-transactional事务注解\\" aria-label=\\"Permalink to &quot;a方法有`@Transactional`事务注解&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>如果b方法有<code>Propagation.REQUIRED</code>，结果如下：</p>\\n<ul>\\n<li>\\n<p>b加入a的事务</p>\\n</li>\\n<li>\\n<p>无论哪个方法抛出异常，a和b都会回滚</p>\\n</li>\\n<li>\\n<p>不能捕获b抛出的异常，否则出现<code>org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only</code>。除非在<code>catch</code>中加上<code>TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</code>，但a和b仍然都会回滚</p>\\n</li>\\n</ul>\\n<h3 id=\\"a方法没有-transactional事务注解\\" tabindex=\\"-1\\">a方法没有<code>@Transactional</code>事务注解 <a class=\\"header-anchor\\" href=\\"#a方法没有-transactional事务注解\\" aria-label=\\"Permalink to &quot;a方法没有`@Transactional`事务注解&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>如果b方法有<code>Propagation.REQUIRED</code>，结果如下：</p>\\n<ul>\\n<li>b创建一个新事务</li>\\n</ul>\\n<h2 id=\\"supports\\" tabindex=\\"-1\\">SUPPORTS <a class=\\"header-anchor\\" href=\\"#supports\\" aria-label=\\"Permalink to &quot;SUPPORTS&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>支持当前事务，如果不存在则以非事务方式执行。</p>\\n<p>假设Service A中的a方法调用Service B中的b方法，这里分为两种情况：</p>\\n<h3 id=\\"a方法有-transactional事务注解-1\\" tabindex=\\"-1\\">a方法有<code>@Transactional</code>事务注解 <a class=\\"header-anchor\\" href=\\"#a方法有-transactional事务注解-1\\" aria-label=\\"Permalink to &quot;a方法有`@Transactional`事务注解&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>如果b方法有<code>Propagation.SUPPORTS</code>，结果如下：</p>\\n<ul>\\n<li>\\n<p>b加入a的事务</p>\\n</li>\\n<li>\\n<p>无论哪个方法抛出异常，a和b都会回滚</p>\\n</li>\\n<li>\\n<p>不能捕获b抛出的异常，否则出现<code>org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only</code>。除非在<code>catch</code>中加上<code>TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</code>，但a和b仍然都会回滚</p>\\n</li>\\n</ul>\\n<h3 id=\\"a方法没有-transactional事务注解-1\\" tabindex=\\"-1\\">a方法没有<code>@Transactional</code>事务注解 <a class=\\"header-anchor\\" href=\\"#a方法没有-transactional事务注解-1\\" aria-label=\\"Permalink to &quot;a方法没有`@Transactional`事务注解&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>如果b方法有<code>Propagation.SUPPORTS</code>，结果如下：</p>\\n<ul>\\n<li>b以非事务方式执行</li>\\n</ul>\\n<h2 id=\\"mandatory\\" tabindex=\\"-1\\">MANDATORY <a class=\\"header-anchor\\" href=\\"#mandatory\\" aria-label=\\"Permalink to &quot;MANDATORY&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>支持当前事务，如果不存在则抛出异常。</p>\\n<p>假设Service A中的a方法调用Service B中的b方法，这里分为两种情况：</p>\\n<h3 id=\\"a方法有-transactional事务注解-2\\" tabindex=\\"-1\\">a方法有<code>@Transactional</code>事务注解 <a class=\\"header-anchor\\" href=\\"#a方法有-transactional事务注解-2\\" aria-label=\\"Permalink to &quot;a方法有`@Transactional`事务注解&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>如果b方法有<code>Propagation.MANDATORY</code>，结果如下：</p>\\n<ul>\\n<li>\\n<p>b加入a的事务</p>\\n</li>\\n<li>\\n<p>无论哪个方法抛出异常，a和b都会回滚</p>\\n</li>\\n<li>\\n<p>不能捕获b抛出的异常，否则出现<code>org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only</code>。除非在<code>catch</code>中加上<code>TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</code>，但a和b仍然都会回滚</p>\\n</li>\\n</ul>\\n<h3 id=\\"a方法没有-transactional事务注解-2\\" tabindex=\\"-1\\">a方法没有<code>@Transactional</code>事务注解 <a class=\\"header-anchor\\" href=\\"#a方法没有-transactional事务注解-2\\" aria-label=\\"Permalink to &quot;a方法没有`@Transactional`事务注解&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>如果b方法有<code>Propagation.MANDATORY</code>，结果如下：</p>\\n<ul>\\n<li>在调用b时会出现<code>org.springframework.transaction.IllegalTransactionStateException: No existing transaction found for transaction marked with propagation \'mandatory\'</code></li>\\n</ul>\\n<h2 id=\\"requires-new\\" tabindex=\\"-1\\">REQUIRES_NEW <a class=\\"header-anchor\\" href=\\"#requires-new\\" aria-label=\\"Permalink to &quot;REQUIRES_NEW&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>创建一个新事务，如果存在当前事务，则挂起当前事务。</p>\\n<p>假设Service A中的a方法调用Service B中的b方法，这里分为两种情况：</p>\\n<h3 id=\\"a方法有-transactional事务注解-3\\" tabindex=\\"-1\\">a方法有<code>@Transactional</code>事务注解 <a class=\\"header-anchor\\" href=\\"#a方法有-transactional事务注解-3\\" aria-label=\\"Permalink to &quot;a方法有`@Transactional`事务注解&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>如果b方法有<code>Propagation.REQUIRES_NEW</code>，结果如下：</p>\\n<ul>\\n<li>\\n<p>b创建一个新事务，a抛出的异常不会导致b回滚</p>\\n</li>\\n<li>\\n<p>b抛出的异常会导致a回滚，可以捕获b抛出的异常来避免a回滚</p>\\n</li>\\n</ul>\\n<h3 id=\\"a方法没有-transactional事务注解-3\\" tabindex=\\"-1\\">a方法没有<code>@Transactional</code>事务注解 <a class=\\"header-anchor\\" href=\\"#a方法没有-transactional事务注解-3\\" aria-label=\\"Permalink to &quot;a方法没有`@Transactional`事务注解&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>如果b方法有<code>Propagation.REQUIRES_NEW</code>，结果如下：</p>\\n<ul>\\n<li>b创建一个新事务</li>\\n</ul>\\n<h2 id=\\"not-supported\\" tabindex=\\"-1\\">NOT_SUPPORTED <a class=\\"header-anchor\\" href=\\"#not-supported\\" aria-label=\\"Permalink to &quot;NOT_SUPPORTED&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>以非事务方式执行，如果存在当前事务，则暂停当前事务。</p>\\n<p>假设Service A中的a方法调用Service B中的b方法，这里分为两种情况：</p>\\n<h3 id=\\"a方法有-transactional事务注解-4\\" tabindex=\\"-1\\">a方法有<code>@Transactional</code>事务注解 <a class=\\"header-anchor\\" href=\\"#a方法有-transactional事务注解-4\\" aria-label=\\"Permalink to &quot;a方法有`@Transactional`事务注解&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>如果b方法有<code>Propagation.NOT_SUPPORTED</code>，结果如下：</p>\\n<ul>\\n<li>\\n<p>b以非事务方式执行</p>\\n</li>\\n<li>\\n<p>b抛出的异常会导致a回滚，可以捕获b抛出的异常来避免a回滚</p>\\n</li>\\n</ul>\\n<h3 id=\\"a方法没有-transactional事务注解-4\\" tabindex=\\"-1\\">a方法没有<code>@Transactional</code>事务注解 <a class=\\"header-anchor\\" href=\\"#a方法没有-transactional事务注解-4\\" aria-label=\\"Permalink to &quot;a方法没有`@Transactional`事务注解&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>如果b方法有<code>Propagation.NOT_SUPPORTED</code>，结果如下：</p>\\n<ul>\\n<li>b以非事务方式执行</li>\\n</ul>\\n<h2 id=\\"never\\" tabindex=\\"-1\\">NEVER <a class=\\"header-anchor\\" href=\\"#never\\" aria-label=\\"Permalink to &quot;NEVER&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>以非事务方式执行，如果存在事务则抛出异常。</p>\\n<p>假设Service A中的a方法调用Service B中的b方法，这里分为两种情况：</p>\\n<h3 id=\\"a方法有-transactional事务注解-5\\" tabindex=\\"-1\\">a方法有<code>@Transactional</code>事务注解 <a class=\\"header-anchor\\" href=\\"#a方法有-transactional事务注解-5\\" aria-label=\\"Permalink to &quot;a方法有`@Transactional`事务注解&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>如果b方法有<code>Propagation.NEVER</code>，结果如下：</p>\\n<ul>\\n<li>\\n<p>在调用b时会出现<code>org.springframework.transaction.IllegalTransactionStateException: Existing transaction found for transaction marked with propagation \'never\'</code></p>\\n</li>\\n<li>\\n<p>b抛出的异常会导致a回滚，可以捕获b抛出的异常来避免a回滚</p>\\n</li>\\n</ul>\\n<h3 id=\\"a方法没有-transactional事务注解-5\\" tabindex=\\"-1\\">a方法没有<code>@Transactional</code>事务注解 <a class=\\"header-anchor\\" href=\\"#a方法没有-transactional事务注解-5\\" aria-label=\\"Permalink to &quot;a方法没有`@Transactional`事务注解&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>如果b方法有<code>Propagation.NEVER</code>，结果如下：</p>\\n<ul>\\n<li>b以非事务方式执行</li>\\n</ul>\\n<h2 id=\\"nested\\" tabindex=\\"-1\\">NESTED <a class=\\"header-anchor\\" href=\\"#nested\\" aria-label=\\"Permalink to &quot;NESTED&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>如果当前事务存在，则在嵌套事务中执行，否则表现为<code>REQUIRED</code>。</p>\\n<p>假设Service A中的a方法调用Service B中的b方法，这里分为两种情况：</p>\\n<h3 id=\\"a方法有-transactional事务注解-6\\" tabindex=\\"-1\\">a方法有<code>@Transactional</code>事务注解 <a class=\\"header-anchor\\" href=\\"#a方法有-transactional事务注解-6\\" aria-label=\\"Permalink to &quot;a方法有`@Transactional`事务注解&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>如果b方法有<code>Propagation.NESTED</code>，结果如下：</p>\\n<ul>\\n<li>\\n<p>b在嵌套事务中执行</p>\\n</li>\\n<li>\\n<p>无论哪个方法抛出异常，a和b都会回滚</p>\\n</li>\\n<li>\\n<p>可以捕获b的异常来避免a回滚</p>\\n</li>\\n</ul>\\n<h3 id=\\"a方法没有-transactional事务注解-6\\" tabindex=\\"-1\\">a方法没有<code>@Transactional</code>事务注解 <a class=\\"header-anchor\\" href=\\"#a方法没有-transactional事务注解-6\\" aria-label=\\"Permalink to &quot;a方法没有`@Transactional`事务注解&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>如果b方法有<code>Propagation.NESTED</code>，结果如下：</p>\\n<ul>\\n<li>b创建一个新事务，以<code>Propagation.REQUIRED</code>传播行为执行</li>\\n</ul>\\n<h2 id=\\"总结\\" tabindex=\\"-1\\">总结 <a class=\\"header-anchor\\" href=\\"#总结\\" aria-label=\\"Permalink to &quot;总结&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>a调用b | a有事务且是默认传播行为 | a没有事务</p>\\n","date":{"time":1591876800000,"string":"June 11, 2020"}},{"categories":"Other","title":"TiDB","url":"/other/TiDB.html","excerpt":"<h1 id=\\"tidb\\" tabindex=\\"-1\\">TiDB <a class=\\"header-anchor\\" href=\\"#tidb\\" aria-label=\\"Permalink to &quot;TiDB&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>TiDB 是 <a href=\\"https://pingcap.com/index.html\\" target=\\"_blank\\" rel=\\"noreferrer\\">PingCAP 公司</a>自主设计、研发的开源分布式关系型数据库，是一款同时支持在线事务处理与在线分析处理 (Hybrid Transactional and Analytical Processing, HTAP）的融合型分布式数据库产品，具备水平扩容或者缩容、金融级高可用、实时 HTAP、云原生的分布式数据库、兼容 MySQL 5.7 协议和 MySQL 生态等重要特性。目标是为用户提供一站式 OLTP (Online Transactional Processing)、OLAP (Online Analytical Processing)、HTAP 解决方案。TiDB 适合高可用、强一致要求较高、数据规模较大等各种应用场景。</p>\\n<p>截止到 2020-06-02， TiDB 的最新版本是 TiDB 4.0：</p>\\n<blockquote>\\n<p>发版日期：2020 年 5 月 15 日</p>\\n<p>TiDB 版本：4.0.0-rc.2</p>\\n<p>TiUP 版本：4.0.0-rc.2</p>\\n</blockquote>\\n<h2 id=\\"tidb-数据库单机版的部署\\" tabindex=\\"-1\\">TiDB 数据库单机版的部署 <a class=\\"header-anchor\\" href=\\"#tidb-数据库单机版的部署\\" aria-label=\\"Permalink to &quot;TiDB 数据库单机版的部署&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"准备环境\\" tabindex=\\"-1\\">准备环境 <a class=\\"header-anchor\\" href=\\"#准备环境\\" aria-label=\\"Permalink to &quot;准备环境&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ul>\\n<li>推荐安装 CentOS 7.3 及以上版本</li>\\n<li>Linux 操作系统开放外网访问，用于下载 TiDB 及相关软件安装包</li>\\n<li>部署需要使用部署主机的 root 用户及密码</li>\\n<li>部署需要关闭防火墙或者开放 TiDB 集群的节点间所需端口</li>\\n</ul>\\n<p>最小规模的 TiDB 集群拓扑：</p>\\n<p>实例 | 个数 | IP | 配置</p>\\n","date":{"time":1591099200000,"string":"June 2, 2020"}},{"categories":"JavaScript","title":"使用原生 JS 解决 uni-app 中的 uni.chooseVideo 在手机上无法准确获取到上传视频时长的问题","url":"/category/js/使用原生 JS 解决 uni-app 中的 uni.chooseVideo 在手机上无法准确获取到上传视频时长的问题.html","excerpt":"","date":{"time":1590408000000,"string":"May 25, 2020"}},{"categories":"Java","title":"Java 8","url":"/category/java/Java 8.html","excerpt":"<h1 id=\\"java-8\\" tabindex=\\"-1\\">Java 8 <a class=\\"header-anchor\\" href=\\"#java-8\\" aria-label=\\"Permalink to &quot;Java 8&quot;\\">&ZeroWidthSpace;</a></h1>\\n<h2 id=\\"通过行为参数化传递代码\\" tabindex=\\"-1\\">通过行为参数化传递代码 <a class=\\"header-anchor\\" href=\\"#通过行为参数化传递代码\\" aria-label=\\"Permalink to &quot;通过行为参数化传递代码&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p><strong>行为参数化</strong>就是可以帮助你处理频繁变更的需求的一种软件开发模式。一言以蔽之，它意味着拿出一个代码块，把它准备好却不去执行它。这个代码块以后可以被你程序的其他部分调用，这意味着你可以推迟这块代码的执行。例如，你可以将代码块作为参数传递给另一个方法，稍后再去执行它。这样，这个方法的行为就基于那块代码被参数化了。</p>\\n<h3 id=\\"应对不断变化的需求\\" tabindex=\\"-1\\">应对不断变化的需求 <a class=\\"header-anchor\\" href=\\"#应对不断变化的需求\\" aria-label=\\"Permalink to &quot;应对不断变化的需求&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>编写能够应对变化的需求的代码并不容易。</p>\\n<p>让我们来看一个筛选苹果的例子：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\tprivate</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> String color;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\tprivate</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Integer weight;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\tpublic</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\tpublic</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(String </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">color</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, Integer </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">weight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">\\t\\tthis</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.color </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> color;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">\\t\\tthis</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.weight </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> weight;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t@</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Override</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\tpublic</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> String </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">toString</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\t\\treturn</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"Apple{\\"</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> +</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"color=\'\\"</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> +</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> color </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">+</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">\\\\\'</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\'</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> +</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\", weight=\\"</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> +</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> weight </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">+</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \'}\'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\tpublic</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> String </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getColor</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\t\\treturn</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> color;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\tpublic</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> void</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> setColor</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(String </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">color</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">\\t\\tthis</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.color </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> color;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\tpublic</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Integer </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getWeight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\t\\treturn</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> weight;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\tpublic</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> void</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> setWeight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Integer </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">weight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">\\t\\tthis</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.weight </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> weight;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>这有一些苹果，有不同颜色的，还有不同重量的。</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">List&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> apples </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Arrays.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">asList</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">                new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"红色\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">158</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">),</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">                new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"红色\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">120</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">),</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">                new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"黄色\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">90</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">),</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">                new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"青色\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">108</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">));</span></span></code></pre>\\n</div><p>现在需要从列表中筛选红苹果。是不是很简单？</p>\\n<h4 id=\\"初出茅庐-筛选红苹果\\" tabindex=\\"-1\\">初出茅庐：筛选红苹果 <a class=\\"header-anchor\\" href=\\"#初出茅庐-筛选红苹果\\" aria-label=\\"Permalink to &quot;初出茅庐：筛选红苹果&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>第一种解决方案可能是下面这样的：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * 筛选红苹果</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> apples</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@return</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> static</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> List</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">Apple</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filterRedApples</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(List</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">Apple</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apples) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ArrayList&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> result </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ArrayList&#x3C;>();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    for</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (Apple apple </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">:</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apples) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">        if</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (apple.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getColor</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">().</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">equals</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"红色\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)) { </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 只筛选红苹果</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">            result.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">add</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apple);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> result;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>但是还想要筛选青苹果该怎么做呢？简单，复制这个方法，把方法名改成 <code>filterGreenApples</code>，然后更改 <code>if</code> 条件来匹配青苹果。然而，要是还想要筛选其他颜色的苹果，什么黄的啦、青的啦等，难道再复制几个方法出来更改匹配条件吗？这个时候我们就需要尝试将其抽象化，将共性的地方剥离出来。</p>\\n<h4 id=\\"小试牛刀-将颜色作为参数\\" tabindex=\\"-1\\">小试牛刀：将颜色作为参数 <a class=\\"header-anchor\\" href=\\"#小试牛刀-将颜色作为参数\\" aria-label=\\"Permalink to &quot;小试牛刀：将颜色作为参数&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>第二种做法是给方法加一个参数，把颜色变成参数，这样就能灵活地适应需求的变化了：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * 将颜色作为参数</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> *</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> apples</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> color</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@return</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> static</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> List</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">Apple</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filterApplesByColor</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(List</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">Apple</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apples,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        String color) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ArrayList&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> result </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ArrayList&#x3C;>();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    for</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (Apple apple </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">:</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apples) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">        if</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (apple.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getColor</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">().</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">equals</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(color)) { </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 只筛选指定颜色的苹果</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">            result.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">add</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apple);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> result;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>现在，可以按照不同的颜色来筛选苹果了：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">List&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> redApples </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filterApplesByColor</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apples, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"红色\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">List&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> greenApples </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filterApplesByColor</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apples, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"青色\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span></code></pre>\\n</div><p>太简单了对吧？好，现在需求又变了：需要根据重量来区分，比如重量大于 150 的。</p>\\n<p>作为一名专业的“程序猿”，怎么可能想不到应该大概可能会根据重量来筛选呢。于是“复制/粘贴”走你，用另一个参数来表示重量：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * 将重量作为参数</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> *</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> apples</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> weight</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@return</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> static</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> List</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">Apple</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filterApplesByWeight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(List</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">Apple</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apples,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">        int</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> weight) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ArrayList&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> result </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ArrayList&#x3C;>();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    for</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (Apple apple </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">:</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apples) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">        if</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (apple.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getWeight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> weight) { </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 只筛选大于指定重量的苹果</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">            result.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">add</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apple);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> result;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>解决方案不错，可是这样合适吗？遍历的代码都是一样的（对所有的苹果进行筛选），只是筛选条件不同（颜色还是重量）。这不符合 <strong>DRY（Don\'t Repeat Yourself，不要重复自己）</strong> 的软件工程原则。如果想要改变筛选遍历方式以提升性能，该怎么办？那就得修改所有方法的实现，而不是只改一个。从工程工作量的角度来看，这代价太大了。</p>\\n<p>有了！可以将颜色和重量结合为一个方法，就叫 <code>filterApples</code>。不过还需要加上一个标志来区分对颜色和重量的查询（想一想真的合适吗？）。</p>\\n<h4 id=\\"登堂入室-将每个可能的筛选条件作为参数\\" tabindex=\\"-1\\">登堂入室：将每个可能的筛选条件作为参数 <a class=\\"header-anchor\\" href=\\"#登堂入室-将每个可能的筛选条件作为参数\\" aria-label=\\"Permalink to &quot;登堂入室：将每个可能的筛选条件作为参数&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>第三种是把所有的属性作为条件结合起来：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * 将每个可能的筛选条件作为参数</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> *</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> apples</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> color</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> weight</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> flag</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@return</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> static</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> List</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">Apple</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filterApples</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(List</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">Apple</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apples, String color,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">        int</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> weight, </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">boolean</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> flag) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ArrayList&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> result </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ArrayList&#x3C;>();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    for</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (Apple apple </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">:</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apples) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">        if</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ((flag </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x26;&#x26;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apple.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getColor</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">().</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">equals</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(color))</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">                ||</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">!</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">flag </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x26;&#x26;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apple.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getWeight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> weight)) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">            result.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">add</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apple);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> result;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>可以这样用：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">List&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> redApples </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filterApples</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apples, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"红色\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">true</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">List&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> heavyApples </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filterApples</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apples, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">150</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">false</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span></code></pre>\\n</div><p>最差代码不过如此。首先，<code>true</code> 和 <code>false</code> 表示什么可能都要猜上一会儿。其次，如果苹果还有别的属性，比如大小、形状、产地等，还要按照这些属性做筛选又怎么办？此外，可能还会有更复杂的组合条件查询，比如：大于 120 的红苹果，小于 100 的青苹果等。难道要挨个“复制/粘贴”然后再修改吗？</p>\\n<h3 id=\\"行为参数化\\" tabindex=\\"-1\\">行为参数化 <a class=\\"header-anchor\\" href=\\"#行为参数化\\" aria-label=\\"Permalink to &quot;行为参数化&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>让我们先退一步来好好想一想：不变的是什么？变的又是什么？</p>\\n<p>不变的是需要对苹果进行筛选，变的是筛选条件不一样。好，那能不能根据苹果的筛选条件（比如它是红色的吗？重量超过 150 吗？）来返回一个 <code>boolean</code> 值呢？可以把它称为<strong>谓词</strong>（Predicate，即一个返回 <code>boolean</code>值的函数）。</p>\\n<p>先定义一个 <code>Predicate</code> 接口<strong>对选择标准建模</strong>：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * 根据条件筛选苹果的接口</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> interface</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ApplePredicate</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    /**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     * 检查苹果是否满足指定的条件</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     *</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> apple</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@return</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    boolean</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> test</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Apple </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>不同的选择标准就是不同的筛选条件：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> RedColorApplePredicate</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> implements</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ApplePredicate</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    /**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     * 检查苹果颜色是否是红色</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     *</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> apple</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@return</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    @</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Override</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> boolean</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> test</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Apple </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">        return</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"红色\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">equals</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apple.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getColor</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">());</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> HeavyWeightApplePredicate</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> implements</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ApplePredicate</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    /**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     * 检查苹果重量是否大于 150</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     *</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> apple</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@return</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    @</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Override</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> boolean</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> test</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Apple </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">        return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apple.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getWeight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 150</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>我们可以把这些标准看作 <code>filterApples</code> 方法的不同行为。你刚做的这些和“策略设计模式”相关，它让你定义一族算法，把它们封装起来（称为“策略”），然后在运行时选择一个算法。在这里，算法族就是 <code>ApplePredicate</code>，不同的策略就是<code>RedColorApplePredicate</code> 和 <code>HeavyWeightApplePredicate</code>。</p>\\n<p>要筛选苹果，就将 <code>ApplePredicate</code> 传入 <code>filterApples</code> 方法对每一个苹果做条件筛选。这就是<strong>行为参数化：让方法接受多种行为（策略）作为参数，并在内部使用，来完成不同的行为</strong>。</p>\\n<h4 id=\\"游刃有余-根据抽象条件筛选\\" tabindex=\\"-1\\">游刃有余：根据抽象条件筛选 <a class=\\"header-anchor\\" href=\\"#游刃有余-根据抽象条件筛选\\" aria-label=\\"Permalink to &quot;游刃有余：根据抽象条件筛选&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>这是第四种解决方案，<code>filterApples</code> 方法看起来是这样的：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * 将筛选苹果的条件作为参数</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> *</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> apples</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> applePredicate</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@return</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> static</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> List</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">Apple</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filterApples</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(List</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">Apple</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apples, ApplePredicate applePredicate) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ArrayList&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> result </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ArrayList&#x3C;>();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    for</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (Apple apple </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">:</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apples) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">        if</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (applePredicate.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">test</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apple)) { </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 只筛选满足指定条件的苹果</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">            result.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">add</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apple);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> result;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>现在可以创建不同的 <code>ApplePredicate</code>，并将它们传递给 <code>filterApples</code> 方法。比如，要找出所有重量大于 150 的红苹果：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> RedColorAndHeavyWeightApplePredicate</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\t\\t\\timplements</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ApplePredicate</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    /**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     * 检查苹果颜色是否是红色并且重量大于 150</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     *</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> apple</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@return</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    @</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Override</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> boolean</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> test</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Apple </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">        return</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"红色\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">equals</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apple.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getColor</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">())</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">                &#x26;&#x26;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apple.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getWeight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 150</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">List&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> redColorAndHeavyWeightApples </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filterApples</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apples,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\t\\t\\t\\tnew</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> RedColorAndHeavyWeightApplePredicate</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">());</span></span></code></pre>\\n</div><p>太酷了！<code>filterApples</code> 方法的行为取决于通过 <code>ApplePredicate</code> <strong>传递的代码</strong>。换句话说，我们把 <code>filterApples</code> 方法的<strong>行为参数化</strong>了！</p>\\n<p>可是，如果还有新的行为，就得声明好几个实现 <code>ApplePredicate</code> 接口的类，然而这些类大部分都只会被实例化一次，岂不浪费。</p>\\n<p>费这么大劲儿真没必要，能不能做得更好呢？</p>\\n<h4 id=\\"炉火纯青-使用匿名类\\" tabindex=\\"-1\\">炉火纯青：使用匿名类 <a class=\\"header-anchor\\" href=\\"#炉火纯青-使用匿名类\\" aria-label=\\"Permalink to &quot;炉火纯青：使用匿名类&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>Java 有一个机制称为<strong>匿名类</strong>，它可以同时声明和实例化一个类。</p>\\n<p>下面的代码展示了如何通过创建一个用匿名类实现 <code>ApplePredicate</code> 的对象，筛选红苹果的例子：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">List&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> redApples </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filterApples</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apples, </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ApplePredicate</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    @</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Override</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> boolean</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> test</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Apple </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">        return</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"红色\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">equals</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apple.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getColor</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">());</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">});</span></span></code></pre>\\n</div><p>但匿名类还是不够好。每当定义一个新的行为时，还是得先创建一个对象，才能实现具体的方法（例如 <code>ApplePredicate</code> 接口中的 <code>test</code> 方法）。</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">List&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> redApples </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filterApples</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apples, </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ApplePredicate</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    @</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Override</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> boolean</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> test</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Apple </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">        return</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"红色\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">equals</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apple.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getColor</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">());</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">});</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">List&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> redColorAndHeavyWeightApples </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filterApples</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apples,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">        new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ApplePredicate</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">            @</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Override</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">            public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> boolean</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> test</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Apple </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">                return</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"红色\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">equals</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apple.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getColor</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">())</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">                        &#x26;&#x26;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apple.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getWeight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 150</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">            }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        });</span></span></code></pre>\\n</div><p>简而言之，模板代码太多。当然，那是在 Java 8 之前。</p>\\n<h4 id=\\"登峰造极-使用-lambda-表达式\\" tabindex=\\"-1\\">登峰造极：使用 Lambda 表达式 <a class=\\"header-anchor\\" href=\\"#登峰造极-使用-lambda-表达式\\" aria-label=\\"Permalink to &quot;登峰造极：使用 Lambda 表达式&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>Java 8 通过引入 <strong><a href=\\"#lambda-表达式\\">Lambda 表达式</a></strong>，一种更简洁的传递代码的方式，解决了这个问题。</p>\\n<p>上面的代码在 Java 8 里可以用 Lambda 表达式重写为下面的样子：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">List&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> redApples </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filterApples</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apples,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        (Apple apple) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">-></span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"红色\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">equals</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apple.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getColor</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">()));</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">List&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> redColorAndHeavyWeightApples </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filterApples</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apples,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        (Apple apple) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">-></span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"红色\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">equals</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apple.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getColor</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">())</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">                &#x26;&#x26;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> apple.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getWeight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 150</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span></code></pre>\\n</div><p>不得不承认现在的代码看上去比先前干净很多。而且它看起来更像问题陈述本身了。</p>\\n<p>到此为止了么？假如还要筛选香蕉、桔子甚至是 Integer 或是 String，难道还要再写一个对应的 <code>filter</code> 方法？</p>\\n<h4 id=\\"返璞归真-将类型抽象化\\" tabindex=\\"-1\\">返璞归真：将类型抽象化 <a class=\\"header-anchor\\" href=\\"#返璞归真-将类型抽象化\\" aria-label=\\"Permalink to &quot;返璞归真：将类型抽象化&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>Java 的另外一个机制称为<strong>泛型</strong>，它可以使 <code>List</code> 和 <code>Predicate</code> 类型参数化，而不必拘泥于其中一种类型。</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * 根据条件筛选指定元素的接口</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> interface</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Predicate</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">T</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    /**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     * 检查指定元素是否满足指定的条件</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     *</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> t</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@return</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">     */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    boolean</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> test</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(T </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">t</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * 将筛选指定元素的条件作为参数</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> *</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> list</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> p</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@return</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> static</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> &#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">T</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> List</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">T</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filter</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(List</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">T</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> list, Predicate</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">T</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> p) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ArrayList&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">T</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> result </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ArrayList&#x3C;>();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    for</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (T t </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">:</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> list) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">        if</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (p.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">test</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(t)) { </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 只筛选满足指定条件的元素</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">            result.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">add</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(t);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> result;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>使用 Lambda 表达式的例子：</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">List&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> redApples </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filter</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apples,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        (Apple apple) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">-></span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"红色\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">equals</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(apple.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getColor</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">()));</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">List&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Integer</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> evenNumbers </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> filter</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Arrays.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">asList</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">2</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">3</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">4</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">5</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">6</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">),</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        (Integer integer) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">-></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> integer </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">%</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 2</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> ==</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span></code></pre>\\n</div><p>酷不酷？我们现在在灵活性和简洁性之间找到了最佳平衡点，这在 Java 8 之前是不可能做到的！</p>\\n<h3 id=\\"行为参数化的例子\\" tabindex=\\"-1\\">行为参数化的例子 <a class=\\"header-anchor\\" href=\\"#行为参数化的例子\\" aria-label=\\"Permalink to &quot;行为参数化的例子&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>Java API 中的很多方法都可以用不同的行为来参数化。这些方法往往与匿名类一起使用。</p>\\n<p>下面是几个例子，分别使用<strong>匿名类</strong>和 <strong>Lambda 表达式</strong>来编写。</p>\\n<ul>\\n<li>\\n<p>使用 <code>Comparator</code> 进行排序</p>\\n<p>在 Java 8 中，<code>List</code> 自带了一个 <code>sort</code> 方法（也可以使用原来的 <code>Collections.sort</code>）。<code>sort</code> 的行为可以用 <code>java.util.Comparator</code> 对象来参数化。</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 使用匿名类，根据重量对苹果进行排序</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">apples.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">sort</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">new</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> Comparator&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Apple</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>() {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    @</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Override</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> int</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> compare</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Apple </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">a1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, Apple </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">a2</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">        return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> a1.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getWeight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">().</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">compareTo</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(a2.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getWeight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">());</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">});</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 使用 Lambda 表达式，根据重量对苹果进行排序</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">apples.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">sort</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">((Apple a1, Apple a2) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">-></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> a1.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getWeight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t\\t.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">compareTo</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(a2.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getWeight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">()));</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>使用 <code>Runnable</code> 执行代码块</p>\\n<p>在 Java 里，使用 <code>Thread</code> 中的 <code>start</code> 方法开启一个新线程，然后可以将 <code>Runnable</code> 接口中 <code>run</code> 方法里的代码放在新线程执行。</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 使用匿名类，在新线程中输出“Hello, World!”</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Thread</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Runnable</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    @</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Override</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> void</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> run</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"Hello, World!\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}).</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">start</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">();</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 使用 Lambda 表达式，在新线程中输出“Hello, World!”</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Thread</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">-></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"Hello, World!\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)).</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">start</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">();</span></span></code></pre>\\n</div></li>\\n</ul>\\n<p>现在知道了为什么要使用 Lambda 表达式（<strong>Why</strong>），它可以很简洁地表示一个行为或传递代码。那么，什么是 Lambda 表达式 （<strong>What</strong>）？如何使用 Lambda 表达式（<strong>How</strong>）？</p>\\n<h2 id=\\"lambda-表达式\\" tabindex=\\"-1\\">Lambda 表达式 <a class=\\"header-anchor\\" href=\\"#lambda-表达式\\" aria-label=\\"Permalink to &quot;Lambda 表达式&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"什么是-lambda-表达式\\" tabindex=\\"-1\\">什么是 Lambda 表达式 <a class=\\"header-anchor\\" href=\\"#什么是-lambda-表达式\\" aria-label=\\"Permalink to &quot;什么是 Lambda 表达式&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>可以把 <strong>Lambda 表达式</strong>理解为一种简洁的可传递匿名函数：它没有名称，但它有参数列表、函数主体、返回类型，可能还有一个可以抛出的异常列表。</p>\\n<p>是不是很好奇 <strong>Lambda</strong> 这个词是从哪儿来的？其实它来自于数学中的 <strong>λ 演算</strong>，其中的 <code>λ</code> 读作 <code>Lambda</code>（希腊字母表中排序第十一位的字母，大写为 Λ，英语名称为 Lambda）。</p>\\n<h4 id=\\"lambda-表达式的特点\\" tabindex=\\"-1\\">Lambda 表达式的特点 <a class=\\"header-anchor\\" href=\\"#lambda-表达式的特点\\" aria-label=\\"Permalink to &quot;Lambda 表达式的特点&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>理论上来说，你在 Java 8 之前做不了的事情，Lambda 也做不了。但是，现在再也用不着使用匿名类写一堆笨重的代码，来体验行为参数化的好处了！最终结果就是你的代码变得更清晰、更灵活。</p>\\n<p>下面是 Lambda 表达式的几个特点：</p>\\n<ul>\\n<li>\\n<p>匿名</p>\\n<p>说它是匿名的，是因为它不像普通的方法那样有一个明确的名称，这样就不会因为写得少而想得多了（起名字脑阔疼）！</p>\\n</li>\\n<li>\\n<p>函数</p>\\n<p>说它是一种函数，是因为 Lambda 函数不像方法那样属于某个特定的类。但和方法一样，Lambda 有参数列表、函数主体、返回类型，还可能有可以抛出的异常列表。</p>\\n</li>\\n<li>\\n<p>传递</p>\\n<p>Lambda 表达式可以作为参数传递给方法或存储在变量中。</p>\\n</li>\\n<li>\\n<p>简洁</p>\\n<p>无需像匿名类那样写很多模板代码。</p>\\n</li>\\n</ul>\\n<h4 id=\\"lambda-表达式的组成\\" tabindex=\\"-1\\">Lambda 表达式的组成 <a class=\\"header-anchor\\" href=\\"#lambda-表达式的组成\\" aria-label=\\"Permalink to &quot;Lambda 表达式的组成&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>Lambda 表达式由参数、箭头和主体组成：</p>\\n<p><img src=\\"https://cdn.jsdelivr.net/gh/panxingcheng/static/image/20210124211244.png\\" alt=\\"\\"></p>\\n<p>（Lambda 表达式由参数、箭头和主体组成，图片来源：Java 8 实战）</p>\\n<ul>\\n<li>\\n<p>参数列表</p>\\n<p>这里采用了 <code>Comparator</code> 中 <code>compare</code> 方法的<a href=\\"#行为参数化的例子\\">参数</a>，两个 <code>Apple</code>。</p>\\n</li>\\n<li>\\n<p>箭头</p>\\n<p>箭头 <code>-&gt;</code> 把参数列表与 Lambda 主体分隔开。</p>\\n</li>\\n<li>\\n<p>Lambda 主体</p>\\n<p>比较两个 <code>Apple</code> 的重量。表达式就是 <code>Lambda</code> 的返回值。</p>\\n</li>\\n</ul>\\n<p>Lambda 的基本语法是:</p>\\n<p><strong>表达式分格</strong>的 Lambda <code>(parameters) -&gt; expression</code> 或<strong>块风格</strong> 的 Lambda <code>(parameters) -&gt; { statements; }</code>。</p>\\n<p>为了进一步说明，下面给出了 Java 8 中五个有效的 Lambda 表达式的例子。</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(String s) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">-></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> s.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">length</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 第一个 Lambda 表达式具有一个 String 类型的参数并返回一个 int。没有 return 语句，因为已经隐含了 return</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Apple a) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">-></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> a.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getWeight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 150</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> // 第二个 Lambda 表达式有一个 Apple 类型的参数并返回一个 boolean（苹果的重量是否超过 150）</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">int</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> x, </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">int</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> y) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">-></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 第三个 Lambda 表达式具有两个 int 类型的参数而没有返回值（void 返回）。注意 Lambda 表达式可以包含多行语句，这里是两行</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"Result:\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(x</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">+</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">y);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">-></span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 42</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> // 第四个 Lambda 表达式没有参数， 返回一个 int</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Apple a1, Apple a2) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">-></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> a1.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getWeight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">().</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">compareTo</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(a2.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getWeight</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">()) </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 第五个 Lambda 表达式具有两个 Apple 类型的参数，返回一个 int：比较两个 Apple 的重量</span></span></code></pre>\\n</div><h4 id=\\"lambda-表达式的使用案例\\" tabindex=\\"-1\\">Lambda 表达式的使用案例 <a class=\\"header-anchor\\" href=\\"#lambda-表达式的使用案例\\" aria-label=\\"Permalink to &quot;Lambda 表达式的使用案例&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>使用案例 | Lambda 示例</p>\\n","date":{"time":1589803200000,"string":"May 18, 2020"}},{"categories":"Java","title":"Java 泛型及其陷阱","url":"/category/java/Java 泛型及其陷阱.html","excerpt":"","date":{"time":1589284800000,"string":"May 12, 2020"}},{"categories":"Java","title":"Java 入门","url":"/category/java/Java 入门.html","excerpt":"","date":{"time":1587988800000,"string":"April 27, 2020"}},{"categories":"Other","title":"Markdown 指南","url":"/other/Markdown 指南.html","excerpt":"<h1 id=\\"markdown-指南\\" tabindex=\\"-1\\">Markdown 指南 <a class=\\"header-anchor\\" href=\\"#markdown-指南\\" aria-label=\\"Permalink to &quot;Markdown 指南&quot;\\">&ZeroWidthSpace;</a></h1>\\n<h2 id=\\"什么是-markdown\\" tabindex=\\"-1\\">什么是 Markdown？ <a class=\\"header-anchor\\" href=\\"#什么是-markdown\\" aria-label=\\"Permalink to &quot;什么是 Markdown？&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>Markdown 是一种轻量级<strong>标记语言</strong>，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown 于 2004 年由 <a href=\\"https://daringfireball.net/projects/markdown/\\" target=\\"_blank\\" rel=\\"noreferrer\\">John Gruber</a>（约翰·格鲁伯）创建，现已成为世界上最受欢迎的标记语言之一。</p>\\n<h2 id=\\"为什么使用-markdown\\" tabindex=\\"-1\\">为什么使用 Markdown？ <a class=\\"header-anchor\\" href=\\"#为什么使用-markdown\\" aria-label=\\"Permalink to &quot;为什么使用 Markdown？&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ul>\\n<li>Markdown 可用于所有内容。人们用它来创建网站、文档、笔记、书籍、演示文稿、电子邮件和技术文档等。</li>\\n<li>Markdown 是可移植的。包含 Markdown 格式文本的文档几乎可以使用任何应用程序打开。如果你不喜欢当前使用的 Markdown 应用程序，则可以将 Markdown 文档使用另一个文本编辑器打开。这与像 Microsoft Word 这样的文字处理应用程序形成鲜明对比，这些应用程序将你的内容锁定为专有文件格式。</li>\\n<li>Markdown 是独立于平台的。你可以在 Windows、MacOS、Linux、Android 和 iOS 等操作系统上创建 Markdown 格式的文本。还有一些基于 Web 的应用程序同样也支持编写 Markdown。</li>\\n<li>Markdown 无处不在。GitHub、Gitee 等网站和博客园、简书等博客平台都支持 Markdown，许多基于桌面和 Web 的应用程序都支持它。</li>\\n</ul>\\n<h2 id=\\"如何使用-markdown\\" tabindex=\\"-1\\">如何使用 Markdown？ <a class=\\"header-anchor\\" href=\\"#如何使用-markdown\\" aria-label=\\"Permalink to &quot;如何使用 Markdown？&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>学习 Markdown 语法不会花很长时间，一旦你知道如何使用它，就可以在任何地方使用 Markdown 进行书写。在 Markdown 中书写时，文档存储在以 <strong>.md</strong> 或 <strong>.markdown</strong> 为扩展名的纯文本文件中。</p>\\n<blockquote>\\n<p>Markdown 格式语法的首要设计目标是使其尽可能易读易写。</p>\\n</blockquote>\\n<h2 id=\\"markdown-基本语法\\" tabindex=\\"-1\\">Markdown 基本语法 <a class=\\"header-anchor\\" href=\\"#markdown-基本语法\\" aria-label=\\"Permalink to &quot;Markdown 基本语法&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>几乎所有的 Markdown 应用程序都支持基本语法。不同的 Markdown 应用程序可能存在细微的变化和差异。</p>\\n<h3 id=\\"标题\\" tabindex=\\"-1\\">标题 <a class=\\"header-anchor\\" href=\\"#标题\\" aria-label=\\"Permalink to &quot;标题&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>要创建标题，请在文本前面添加井号 <code>#</code> 并缩进一个或多个空格，井号数量对应标题级别，最高六级。</p>\\n<p>Markdown | HTML | Output</p>\\n","date":{"time":1587470400000,"string":"April 21, 2020"}},{"categories":"Java","title":"Java 子类调用父类方法引发的血案","url":"/category/java/Java 子类调用父类方法引发的血案.html","excerpt":"<h1 id=\\"java-子类调用父类方法引发的血案\\" tabindex=\\"-1\\">Java 子类调用父类方法引发的血案 <a class=\\"header-anchor\\" href=\\"#java-子类调用父类方法引发的血案\\" aria-label=\\"Permalink to &quot;Java 子类调用父类方法引发的血案&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>在 Java 中，子类可以直接调用或<code>重写（override）</code>父类中的<code>非私有方法（public/default/protected）</code>。如果重写后还想调用父类的方法，需要以<code>super.方法名</code>方式进行显式调用。</p>\\n<h2 id=\\"场景\\" tabindex=\\"-1\\">场景 <a class=\\"header-anchor\\" href=\\"#场景\\" aria-label=\\"Permalink to &quot;场景&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>下面假设：</p>\\n<p><strong>子类重写父类所有的公有方法</strong></p>\\n<p><strong>子类调用父类方法</strong></p>\\n<p><strong>被调用的父类方法还在调用父类另一个公有方法</strong></p>\\n<p>调用结果是什么样的？父类调用的方法真的是父类的吗？</p>\\n<h2 id=\\"实战\\" tabindex=\\"-1\\">实战 <a class=\\"header-anchor\\" href=\\"#实战\\" aria-label=\\"Permalink to &quot;实战&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ul>\\n<li>\\n<p>父类方法</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">* 老子</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">* </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@author</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> Pan</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">*</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">*/</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Father</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\tpublic</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> void</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> eat</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\tSystem.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"老子吃饭\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">\\t\\tpay</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\tpublic</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> void</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> pay</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\tSystem.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"老子付钱\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>子类方法</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">* 儿子</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">*</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">*/</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Son</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> extends</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Father</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t@</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Override</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\tpublic</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> void</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> eat</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\tSystem.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"儿子陪老子吃饭\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">\\t\\tsuper</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">eat</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t@</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Override</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\tpublic</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> void</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> pay</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\tSystem.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"儿子付钱\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t}</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>Main 方法</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Main</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">\\tpublic</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> static</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> void</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> main</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">String</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">[] </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">args</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\tFather father </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> Father</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\tfather.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">eat</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\t</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">\\t\\tSystem.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span></span></code></pre>\\n</div></li>\\n</ul>\\n","date":{"time":1586174400000,"string":"April 6, 2020"}},{"categories":"Algorithm","title":"数组元素拆分到多个数组","url":"/category/algorithm/数组元素拆分到多个数组.html","excerpt":"<h1 id=\\"数组元素拆分到多个数组\\" tabindex=\\"-1\\">数组元素拆分到多个数组 <a class=\\"header-anchor\\" href=\\"#数组元素拆分到多个数组\\" aria-label=\\"Permalink to &quot;数组元素拆分到多个数组&quot;\\">&ZeroWidthSpace;</a></h1>\\n<h2 id=\\"需求\\" tabindex=\\"-1\\">需求 <a class=\\"header-anchor\\" href=\\"#需求\\" aria-label=\\"Permalink to &quot;需求&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>一个数组中有若干个元素，需要将这若干个元素拆分到 n 个数组中， 每个数组中的元素数量尽量均等。</p>\\n<h2 id=\\"思路\\" tabindex=\\"-1\\">思路 <a class=\\"header-anchor\\" href=\\"#思路\\" aria-label=\\"Permalink to &quot;思路&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>考虑两种情况：<strong>数组元素可以被均等拆分</strong>和<strong>数组元素不能被均等拆分</strong>。</p>\\n<h3 id=\\"数组元素可以被均等拆分\\" tabindex=\\"-1\\">数组元素可以被均等拆分 <a class=\\"header-anchor\\" href=\\"#数组元素可以被均等拆分\\" aria-label=\\"Permalink to &quot;数组元素可以被均等拆分&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>第一种情况好办，目标数组元素数量 = 原数组元素数量  / 目标数组个数  <code>count = sourceList / n</code>。假设初始下标 i 为 0，循环 n - 1 次，则有目标数组 <code>targetList[i]</code> 的元素为 <code>sourceList[i * count]</code> 到 <code>sourceList[((i + 1) * count) - 1]</code> 之间的元素。</p>\\n<h3 id=\\"数组元素不能被均等拆分\\" tabindex=\\"-1\\">数组元素不能被均等拆分 <a class=\\"header-anchor\\" href=\\"#数组元素不能被均等拆分\\" aria-label=\\"Permalink to &quot;数组元素不能被均等拆分&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>这一种情况就有些复杂了，因为拆分到目标数组的元素并不均等，所有会有剩余的元素。假设剩余元素数量为 remainder，偏移量 offset 为 0，则有目标数组 <code>targetList[i]</code> 的元素为 <code>sourceList[i * count + offset]</code> 到 <code>sourceList[((i + 1) * count + (offset + 1)) - 1]</code> 之间的元素。</p>\\n<h2 id=\\"实现\\" tabindex=\\"-1\\">实现 <a class=\\"header-anchor\\" href=\\"#实现\\" aria-label=\\"Permalink to &quot;实现&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>Java 中的 <code>List</code> 接口有一个 <code>subList</code> 方法，可以便捷的帮我们截取指定区间的元素。</p>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> fromIndex</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> 要截取的起始索引</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> toIndex</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> 要截取的结束索引（不包含此索引）</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@return</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> 返回列表中指定范围的视图（对它的修改会影响到原有的 List，同样，对 List 的修改也会影响到 它）</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">List</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">E</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> subList</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">int</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> fromIndex, </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">int</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> toIndex)</span></span></code></pre>\\n</div><div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * 原数组拆分成指定数量的数组</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> sourceList</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> 原数组</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> n</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> 指定数量</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> &#x3C;T></span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> 数组元素类型</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@return</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> 指定数量的数组</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">private</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> static</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> &#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">T</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> List</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">List</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">T</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">>></span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> averageAssignList</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(List</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">T</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> sourceList, </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">int</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> n) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ArrayList&#x3C;List&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">T</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>> lists </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ArrayList&#x3C;>();</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    int</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> size </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> sourceList.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">size</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    int</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> count </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> size </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">/</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> n;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    int</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> remainder </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> size </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">%</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> n;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    int</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> offset </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    for</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">int</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> i </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">; i </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> n; i</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">++</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        List&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">T</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> list;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">        if</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (remainder </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 数组元素不能被均等拆分</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">            list </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> sourceList.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">subList</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(i </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> count </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">+</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> offset, (i </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">+</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> count </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">+</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> (offset </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">+</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">));</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">            offset</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">++</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">            remainder</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">--</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">else</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 数组元素可以被均等拆分</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">            list </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> sourceList.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">subList</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(i </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> count </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">+</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> offset, (i </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">+</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">*</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> count </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">+</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> offset);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">        lists.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">add</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(list);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> lists;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><h2 id=\\"测试\\" tabindex=\\"-1\\">测试 <a class=\\"header-anchor\\" href=\\"#测试\\" aria-label=\\"Permalink to &quot;测试&quot;\\">&ZeroWidthSpace;</a></h2>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> static</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> void</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> main</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">String</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">[] args) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ArrayList&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Integer</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">> integers </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> new</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ArrayList&#x3C;>();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    integers.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">add</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    integers.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">add</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">2</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    integers.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">add</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">3</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    integers.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">add</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">4</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    integers.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">add</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">5</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    integers.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">add</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">6</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    integers.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">add</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">7</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    integers.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">add</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">8</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    List&#x3C;List&#x3C;</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">Integer</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>> lists </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> averageAssignList</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(integers, </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">3</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"数组元素不可以被均等拆分：\\"</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> +</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> lists);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span></span></code></pre>\\n</div>","date":{"time":1575979200000,"string":"December 10, 2019"}},{"categories":"Algorithm","title":"概率抽奖算法","url":"/category/algorithm/概率抽奖算法.html","excerpt":"","date":{"time":1574769600000,"string":"November 26, 2019"}},{"categories":"Spring","title":"使用 Spring Data Redis 监听 Redis 中的 Key 过期事件","url":"/category/spring/使用 Spring Data Redis 监听 Redis 中的 Key 过期事件.html","excerpt":"","date":{"time":1574769600000,"string":"November 26, 2019"}},{"categories":"Spring","title":"自定义 Spring Data JPA 实现复杂分页","url":"/category/spring/自定义 Spring Data JPA 实现复杂分页.html","excerpt":"","date":{"time":1574769600000,"string":"November 26, 2019"}},{"categories":"Linux","title":"NFS 在 Linux 上的使用","url":"/category/linux/NFS 在 Linux 上的使用.html","excerpt":"<h1 id=\\"nfs-在-linux-上的使用\\" tabindex=\\"-1\\">NFS 在 Linux 上的使用 <a class=\\"header-anchor\\" href=\\"#nfs-在-linux-上的使用\\" aria-label=\\"Permalink to &quot;NFS 在 Linux 上的使用&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>NFS 为 Network FileSystem 的简称，它的目的就是想让不同的机器、不同的操作系统可以彼此分享文件！</p>\\n<h2 id=\\"nfs-server-端的设定\\" tabindex=\\"-1\\">NFS Server 端的设定 <a class=\\"header-anchor\\" href=\\"#nfs-server-端的设定\\" aria-label=\\"Permalink to &quot;NFS Server 端的设定&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"查看是否安装-nfs\\" tabindex=\\"-1\\">查看是否安装 NFS <a class=\\"header-anchor\\" href=\\"#查看是否安装-nfs\\" aria-label=\\"Permalink to &quot;查看是否安装 NFS&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> rpm</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -qa</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> |</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> grep</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> nfs</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> rpm</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> -qa</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> |</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> grep</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> rpcbind</span></span></code></pre>\\n</div><h3 id=\\"安装-nfs\\" tabindex=\\"-1\\">安装 NFS <a class=\\"header-anchor\\" href=\\"#安装-nfs\\" aria-label=\\"Permalink to &quot;安装 NFS&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> yum</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> install</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> nfs-utils</span></span></code></pre>\\n</div><h3 id=\\"配置-nfs\\" tabindex=\\"-1\\">配置 NFS <a class=\\"header-anchor\\" href=\\"#配置-nfs\\" aria-label=\\"Permalink to &quot;配置 NFS&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> vim</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> /etc/exports</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">/www/filestore/</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 192.168.0.0/24</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">rw,sync,no_root_squash</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">[分享目录]      [IP网段(权限)]</span></span></code></pre>\\n</div><ul>\\n<li>权限常见参数值 (就是小括号内的参数)</li>\\n</ul>\\n<p>参数值 | 内容说明</p>\\n","date":{"time":1570795200000,"string":"October 11, 2019"}},{"categories":"Linux","title":"Nginx 在 Linux 上的使用","url":"/category/linux/Nginx 在 Linux 上的使用.html","excerpt":"","date":{"time":1570795200000,"string":"October 11, 2019"}},{"categories":"Algorithm","title":"不同的广告根据对应的播放次数进行顺序播放","url":"/category/algorithm/不同的广告根据对应的播放次数进行顺序播放.html","excerpt":"<h1 id=\\"不同的广告根据对应的播放次数进行顺序播放\\" tabindex=\\"-1\\">不同的广告根据对应的播放次数进行顺序播放 <a class=\\"header-anchor\\" href=\\"#不同的广告根据对应的播放次数进行顺序播放\\" aria-label=\\"Permalink to &quot;不同的广告根据对应的播放次数进行顺序播放&quot;\\">&ZeroWidthSpace;</a></h1>\\n<h2 id=\\"需求\\" tabindex=\\"-1\\">需求 <a class=\\"header-anchor\\" href=\\"#需求\\" aria-label=\\"Permalink to &quot;需求&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>不同的广告，根据对应的播放次数进行顺序播放，直到播放次数为 0。</p>\\n<h2 id=\\"思路\\" tabindex=\\"-1\\">思路 <a class=\\"header-anchor\\" href=\\"#思路\\" aria-label=\\"Permalink to &quot;思路&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ol>\\n<li>过滤掉播放次数小于等于 0 的广告；</li>\\n<li>在每一轮广告结束后进行处理，删除播放次数为 0 的广告；</li>\\n<li>开始新一轮的播放。</li>\\n</ol>\\n<h2 id=\\"实现\\" tabindex=\\"-1\\">实现 <a class=\\"header-anchor\\" href=\\"#实现\\" aria-label=\\"Permalink to &quot;实现&quot;\\">&ZeroWidthSpace;</a></h2>\\n<div class=\\"language-java vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * 不同的广告根据对应的播放次数生成广告播放列表</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@param</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\"> ads</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> 待处理的不同广告</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> * </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">@return</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> 广告播放列表</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">private</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> static</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> String</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">[] </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">sequentialSplit</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(List</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">&#x3C;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">Ad</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ads) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    // 过滤掉播放次数小于等于 0 的广告</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ads </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ads.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">stream</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">().</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">filter</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(ad </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">-></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ad.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getPlayCount</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">></span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> 0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">).</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">collect</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Collectors.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">toList</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">());</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ads.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">forEach</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(ad </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">-></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"广告名称：\\"</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> +</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ad.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getName</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">+</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> \\"，广告播放次数：\\"</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> +</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ad.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">getPlayCount</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">()));</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    int</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> sum </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ads.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">stream</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">().</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">mapToInt</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(Ad</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">::</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">getPlayCount).</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">sum</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"预计播放次数：\\"</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> +</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> sum);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    System.out.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">println</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span></span></code></pre>\\n</div>","date":{"time":1555502400000,"string":"April 17, 2019"}}]'),Pt=["href"],Tt=F({__name:"Category",setup(e){const s=bs().frontmatter.value.categories,i=xt.filter(n=>n.categories===s);return(n,a)=>(t(),r("div",null,[d("h1",null,x(l(s)),1),(t(!0),r(T,null,q(l(i),p=>(t(),r("h2",null,[d("a",{href:p.url},x(p.title),9,Pt)]))),256))]))}}),Lt={extends:_t,enhanceApp({app:e}){e.component("Category",Tt)}};export{Lt as R,re as c,xt as d,A as u};
