import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.BPIbAgMo.js";const o=JSON.parse('{"title":"OpenVPN","description":"","frontmatter":{"title":"OpenVPN","permalink":"1717070130.html","sidebar":"auto","blogs":"Other","date":"2024-05-30"},"headers":[],"relativePath":"other/OpenVPN.md","filePath":"other/OpenVPN.md","lastUpdated":1717072705000}'),p={name:"other/OpenVPN.md"};function t(h,s,l,k,d,F){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="openvpn" tabindex="-1">OpenVPN <a class="header-anchor" href="#openvpn" aria-label="Permalink to &quot;OpenVPN&quot;">​</a></h1><h2 id="步骤1-安装openvpn和easy-rsa" tabindex="-1">步骤1 -安装OpenVPN和Easy-RSA <a class="header-anchor" href="#步骤1-安装openvpn和easy-rsa" aria-label="Permalink to &quot;步骤1 -安装OpenVPN和Easy-RSA&quot;">​</a></h2><p>Easy-RSA是一种公钥基础设施（PKI）管理工具，您将在OpenVPN服务器上使用它来生成证书请求，然后在CA服务器上验证和签名。</p><p>首先，更新OpenVPN服务器的软件包索引并安装OpenVPN和Easy-RSA。这两个包都可以在Ubuntu的默认仓库中找到，所以你可以使用<code>apt</code>来安装：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openvpn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> easy-rsa</span></span></code></pre></div><p>接下来，您需要在OpenVPN服务器上创建一个新目录，作为您的非root用户，称为<code>~/easy-rsa</code>：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/easy-rsa</span></span></code></pre></div><p>现在，您需要从软件包安装到您刚刚创建的<code>easyrsa</code>目录中的<code>~/easy-rsa</code>脚本创建一个符号链接：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/share/easy-rsa/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/easy-rsa/</span></span></code></pre></div><p>一旦这些程序被安装并移动到系统上的正确位置，下一步就是在OpenVPN服务器上创建公钥基础设施（PKI），以便您可以为将连接到您的VPN的客户端和其他服务器请求和管理TLS证书。</p><h2 id="步骤2-为openvpn创建pki-公钥基础设施" tabindex="-1">步骤2 -为OpenVPN创建PKI（公钥基础设施） <a class="header-anchor" href="#步骤2-为openvpn创建pki-公钥基础设施" aria-label="Permalink to &quot;步骤2 -为OpenVPN创建PKI（公钥基础设施）&quot;">​</a></h2><p>在创建OpenVPN服务器的私钥和证书之前，您需要在OpenVPN服务器上创建本地公钥基础设施目录。您将使用此目录来管理服务器和客户端的证书请求，而不是直接在CA服务器上进行请求。</p><p>要在OpenVPN服务器上构建PKI目录，您需要使用一些默认值填充名为<code>vars</code>的文件。首先，您将<code>cd</code>进入<code>easy-rsa</code>目录，然后使用nano或您喜欢的文本编辑器创建和编辑<code>vars</code>文件。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/easy-rsa</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vars</span></span></code></pre></div><p>打开文件后，粘贴以下两行：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>set_var EASYRSA_ALGO &quot;ec&quot;</span></span>
<span class="line"><span>set_var EASYRSA_DIGEST &quot;sha512&quot;</span></span></code></pre></div><p>这是您在OpenVPN服务器上的<code>vars</code>文件中需要的唯一两行，因为它不会用作证书颁发机构。他们将确保您的私钥和证书请求配置为使用现代椭圆曲线加密（ECC）来为您的客户端和OpenVPN服务器生成密钥和安全签名。</p><p>将OpenVPN CA服务器配置为使用ECC意味着当客户端和服务器尝试建立共享对称密钥时，它们可以使用椭圆曲线算法进行交换。使用ECC进行密钥交换比使用普通的Diffie-Hellman和经典的RSA算法要快得多，因为数字要小得多，计算也更快。</p><p>一旦您填充了<code>vars</code>文件，您就可以继续创建PKI目录。为此，请运行带有<code>easyrsa</code>选项的<code>init-pki</code>脚本。虽然您已经在CA服务器上运行此命令作为先决条件的一部分，但仍有必要在此处运行它，因为您的OpenVPN服务器和CA服务器具有单独的PKI目录：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./easyrsa</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init-pki</span></span></code></pre></div><p>请注意，在您的OpenVPN服务器上，无需创建证书颁发机构。您的CA服务器单独负责验证和签署证书。VPN服务器上的PKI仅用作存储证书请求和公共证书的方便和集中的地方。</p><p>在OpenVPN服务器上初始化PKI后，您可以继续进行下一步，即创建OpenVPN服务器证书请求和私钥。</p><h2 id="步骤3-创建openvpn服务器证书请求和私钥" tabindex="-1">步骤3 -创建OpenVPN服务器证书请求和私钥 <a class="header-anchor" href="#步骤3-创建openvpn服务器证书请求和私钥" aria-label="Permalink to &quot;步骤3 -创建OpenVPN服务器证书请求和私钥&quot;">​</a></h2><p>现在您的OpenVPN服务器已安装所有先决条件，下一步是在OpenVPN服务器上生成私钥和证书签名请求（CSR）。之后，您将请求传输到您的CA进行签名，创建所需的证书。一旦你有一个签名的证书，你会把它传输回OpenVPN服务器，并安装它供服务器使用。</p><p>首先，以非root用户身份导航到OpenVPN服务器上的<code>~/easy-rsa</code>目录：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/easy-rsa</span></span></code></pre></div><p>现在，您将使用<code>easyrsa</code>选项调用<code>gen-req</code>，后跟计算机的通用名称（CN）。CN可以是你喜欢的任何东西，但它可以是有帮助的，使它成为描述性的东西。在本教程中，OpenVPN服务器的CN将是<code>server</code>。请确保包含<code>nopass</code>选项。如果不这样做，将对请求文件进行密码保护，这可能会导致以后的权限问题。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./easyrsa</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen-req</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nopass</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Common</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (eg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) [server]:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Keypair</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> certificate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> request</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> completed.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">req:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/easy-rsa/pki/reqs/server.req</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">key:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/easy-rsa/pki/private/server.key</span></span></code></pre></div><p>这将为服务器创建一个私钥和一个名为<code>server.req</code>的证书请求文件。将服务器密钥复制到<code>/etc/openvpn/server</code>目录：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/easy-rsa/pki/private/server.key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/openvpn/server/</span></span></code></pre></div><p>完成这些步骤后，您已成功为OpenVPN服务器创建了私钥。您还为OpenVPN服务器生成了证书签名请求。CSR现在已准备好供CA签名。在本教程的下一节中，您将学习如何使用CA服务器的私钥对CSR进行签名。</p><h2 id="步骤4-签署openvpn服务器的证书请求" tabindex="-1">步骤4 -签署OpenVPN服务器的证书请求 <a class="header-anchor" href="#步骤4-签署openvpn服务器的证书请求" aria-label="Permalink to &quot;步骤4 -签署OpenVPN服务器的证书请求&quot;">​</a></h2><p>在上一步中，您为OpenVPN服务器创建了证书签名请求（CSR）和私钥。现在CA服务器需要知道<code>server</code>证书并验证它。一旦CA验证并将证书中继回OpenVPN服务器，信任您的CA的客户端也将能够信任OpenVPN服务器。</p><p>在OpenVPN服务器上，作为非root用户，使用SCP或其他传输方法将server.req证书请求复制到CA服务器进行签名：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/sammy/easy-rsa/pki/reqs/server.req</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sammy@your_ca_server_ip:/tmp</span></span></code></pre></div><p>如果您遵循了如何在Ubuntu 22.04上设置和配置证书颁发机构（CA）的先决条件教程，下一步是以您创建的用于管理CA的非root用户身份登录CA服务器。您将<code>cd</code>转到创建PK的<code>~/easy-rsa</code>目录，然后使用<code>easyrsa</code>脚本导入证书请求：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/easy-rsa</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./easyrsa</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import-req</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/easy-rsa/pki/reqs/server.req</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">本机作为CA服务器</p><p>要为证书颁发机构创建根公钥和私钥对，请再次运行<code>./easy-rsa</code>命令，这次使用<code>build-ca</code>选项：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/easy-rsa</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./easyrsa</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build-ca</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Enter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> New</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Passphrase:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Re-Enter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> New</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Passphrase:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">You</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> about</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> asked</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> information</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> that</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> will</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> incorporated</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">into</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> certificate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> request.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">What</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> you</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> about</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> what</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> called</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Distinguished</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DN.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">There</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> quite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> few</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fields</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> but</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> you</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> can</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> leave</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> some</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> blank</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">For</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> some</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fields</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> there</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> will</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">If</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> you</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> field</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> will</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> left</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> blank.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-----</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Common</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (eg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) [Easy-RSA CA]:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> creation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> complete</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> you</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> may</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> now</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cert</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> certificate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publishing</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/root/easy-rsa/pki/ca.crt</span></span></code></pre></div><p>在输出中，您将看到一些关于OpenSSL版本的行，并将提示您输入密钥对的密码。一定要选择一个强有力的密码，并把它记在安全的地方。您需要在任何时候与CA交互时输入密码，例如签署或撤销证书。</p><p>系统还将要求您确认CA的通用名称（CN）。CN是用于在证书颁发机构的上下文中引用此计算机的名称。您可以为CA的公用名称输入任何字符串，但为简单起见，请按ENTER键接受默认名称。</p><p>注意事项：如果您不希望每次与CA交互时都提示您输入密码，则可以运行带有<code>build-ca</code>选项的<code>nopass</code>命令，如下所示：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./easyrsa</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build-ca</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nopass</span></span></code></pre></div><p>您现在有两个重要的文件- <code>~/easy-rsa/pki/ca.crt</code>和<code>~/easy-rsa/pki/private/ca.key</code> -它们构成了证书颁发机构的公共和私有组件。</p><ul><li><p><code>ca.crt</code>是CA的公共证书文件。用户、服务器和客户端将使用此证书来验证它们是否属于同一信任网络。使用CA的每个用户和服务器都需要拥有此文件的副本。所有各方都将依赖公共证书来确保不会有人冒充系统并执行中间人攻击。</p></li><li><p><code>ca.key</code>是CA用于为服务器和客户端签署证书的私钥。如果攻击者获得了对您的CA以及您的<code>ca.key</code>文件的访问权限，您将需要销毁您的CA。这就是为什么你的<code>ca.key</code>文件应该只在你的CA机器上，理想情况下，你的CA机器应该保持离线时，不签署证书请求作为一个额外的安全措施。</p></li></ul><p>这样，您的CA就就位了，可以用来签署证书请求和撤销证书。</p></div><p>接下来，通过运行带有<code>easyrsa</code>选项的<code>sign-req</code>脚本，后跟请求类型和通用名称，对请求进行签名。请求类型可以是<code>client</code>或<code>server</code>。由于您正在使用OpenVPN服务器的证书请求，请确保使用<code>server</code>请求类型：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./easyrsa</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign-req</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span></span></code></pre></div><p>在输出中，将提示您验证请求是否来自可信来源。键入yes，然后按ENTER确认：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">You</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> about</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> following</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> certificate.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Please</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> check</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> over</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> details</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shown</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> below</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> accuracy.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Note</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> that</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> request</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> been</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cryptographically</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> verified.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Please</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sure</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> came</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> trusted</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> that</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> you</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> have</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> verified</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> request</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checksum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> with</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sender.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Request</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> subject,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> signed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> as</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> certificate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3650</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> days:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commonName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> word</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;yes&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> continue,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> any</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> other</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> abort.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Confirm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> request</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> details:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yes</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Certificate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> created</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/easy-rsa/pki/issued/server.crt</span></span></code></pre></div><p>请注意，如果您加密了CA私钥，此时将提示您输入密码。</p><p>完成这些步骤后，您已经使用CA服务器的私钥签署了OpenVPN服务器的证书请求。生成的<code>server.crt</code>文件包含OpenVPN服务器的公共加密密钥，以及来自CA服务器的签名。签名的目的是告诉任何信任CA服务器的人，当他们连接到OpenVPN服务器时，他们也可以信任它。</p><p>要完成配置证书，请将<code>server.crt</code>和<code>ca.crt</code>文件从CA服务器复制到OpenVPN服务器：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pki/issued/server.crt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sammy@your_vpn_server_ip:/tmp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pki/ca.crt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sammy@your_vpn_server_ip:/tmp1</span></span></code></pre></div><p>现在回到你的OpenVPN服务器上，将文件从<code>/tmp</code>复制到<code>/etc/openvpn/server</code>：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/{server.crt,ca.crt}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/openvpn/server</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">本机作为CA服务器</p><p>将<code>server.crt</code>和<code>ca.crt</code>文件复制到<code>/etc/openvpn/server</code>：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/easy-rsa/pki/issued/server.crt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/openvpn/server</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/easy-rsa/pki/ca.crt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/openvpn/server</span></span></code></pre></div></div><p>现在您的OpenVPN服务器几乎准备好接受连接。在下一步中，您将执行一些额外的步骤来提高服务器的安全性。</p><h2 id="步骤5-配置openvpn加密材料" tabindex="-1">步骤5 -配置OpenVPN加密材料 <a class="header-anchor" href="#步骤5-配置openvpn加密材料" aria-label="Permalink to &quot;步骤5 -配置OpenVPN加密材料&quot;">​</a></h2><p>对于额外的安全层，添加一个额外的共享密钥，服务器和所有客户端将使用OpenVPN此选项用于混淆服务器和客户端最初相互连接时使用的TLS证书。OpenVPN服务器也使用它来对传入的数据包进行快速检查：如果数据包使用预共享密钥签名，则服务器会处理它;如果它没有签名，则服务器知道它来自不受信任的来源，并且可以丢弃它而无需执行额外的解密工作。</p><p>此选项将有助于确保您的OpenVPN服务器能够科普未经身份验证的流量，端口扫描和拒绝服务攻击，这些攻击可能会占用服务器资源。这也使得识别OpenVPN网络流量变得更加困难。</p><p>要生成<code>tls-crypt</code>预共享密钥，请在OpenVPN服务器上的<code>~/easy-rsa</code>目录中运行以下命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/easy-rsa</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openvpn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --genkey</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --secret</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ta.key</span></span></code></pre></div><p>结果将是一个名为<code>ta.key</code>的文件。将其复制到<code>/etc/openvpn/server/</code>目录：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ta.key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/openvpn/server</span></span></code></pre></div><p>在OpenVPN服务器上放置这些文件后，您就可以为您的用户创建客户端证书和密钥文件，您将使用这些文件连接到VPN。</p><h2 id="步骤6-生成客户端证书和密钥对" tabindex="-1">步骤6 -生成客户端证书和密钥对 <a class="header-anchor" href="#步骤6-生成客户端证书和密钥对" aria-label="Permalink to &quot;步骤6 -生成客户端证书和密钥对&quot;">​</a></h2><p>虽然您可以在客户端计算机上生成私钥和证书请求，然后将其发送到CA进行签名，但本指南概述了在OpenVPN服务器上生成证书请求的过程。这种方法的好处是，您可以创建一个脚本，该脚本将自动生成包含所有必需的密钥和证书的客户端配置文件。这使您不必将密钥、证书和配置文件传输到客户端，并简化了加入VPN的过程。</p><p>您将为本指南生成单个客户端密钥和证书对。如果您有多个客户端，则可以对每个客户端重复此过程。但是请注意，您需要为每个客户端向脚本传递一个唯一的名称值。在本教程中，第一个证书/密钥对称为<code>client1</code>。</p><p>首先，在主目录中创建一个目录结构来存储客户端证书和密钥文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/client-configs/keys</span></span></code></pre></div><p>接下来，导航回EasyRSA目录，并运行带有<code>easyrsa</code>和<code>gen-req</code>选项的<code>nopass</code>脚本，沿着客户端的通用名称：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/easy-rsa</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./easyrsa</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen-req</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nopass</span></span></code></pre></div><p>按ENTER确认通用名称。然后，将<code>client1.key</code>文件复制到之前创建的<code>~/client-configs/keys/</code>目录：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pki/private/client1.key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/client-configs/keys/</span></span></code></pre></div><p>接下来，以与上一步中对服务器所做的相同方式对请求进行签名。不过，这一次请确保指定<code>client</code>请求类型：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./easyrsa</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign-req</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client1</span></span></code></pre></div><p>同样，如果您加密了CA密钥，则会在此处提示您输入密码。</p><p>这将创建一个名为<code>client1.crt</code>的客户端证书文件。将客户端证书复制到<code>~/client-configs/keys/</code>目录：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pki/issued/client1.crt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/client-configs/keys/</span></span></code></pre></div><p>接下来，将<code>ca.crt</code>和<code>ta.key</code>文件也复制到<code>~/client-configs/keys/</code>目录：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/easy-rsa/ta.key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/client-configs/keys/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/openvpn/server/ca.crt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/client-configs/keys/</span></span></code></pre></div><p>这样，您的服务器和客户端的证书和密钥都已生成，并存储在OpenVPN服务器上的相应目录中。仍然有一些操作需要对这些文件执行，但这些操作将在稍后的步骤中进行。现在，您可以继续配置OpenVPN。</p><h2 id="步骤7-配置openvpn" tabindex="-1">步骤7 -配置OpenVPN <a class="header-anchor" href="#步骤7-配置openvpn" aria-label="Permalink to &quot;步骤7 -配置OpenVPN&quot;">​</a></h2><p>像许多其他广泛使用的开源工具一样，OpenVPN有许多配置选项可用于根据您的特定需求自定义服务器。在本节中，我们将提供有关如何根据本软件文档中包含的示例配置文件之一设置OpenVPN服务器配置的说明。</p><p>首先，复制示例<code>server.conf</code>文件作为您自己的配置文件的起点：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/share/doc/openvpn/examples/sample-config-files/server.conf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/openvpn/server/</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">找不到示例<code>server.conf</code>文件的解决方法</p><p><a href="https://github.com/OpenVPN/openvpn/blob/master/sample/sample-config-files/server.conf" target="_blank" rel="noreferrer">server.conf</a></p><p>复制到<code>/etc/openvpn/server/</code>目录下。</p></div><p>使用<code>nano</code>或您选择的文本编辑器打开新文件进行编辑：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/openvpn/server/server.conf</span></span></code></pre></div><p>您需要更改此文件中的几行。首先，通过搜索HMAC指令找到配置的<code>tls-auth</code>部分。默认情况下将启用此行。通过在行首添加;来注释它。然后在它后面添加一个新行，只包含值<code>tls-crypt ta.key</code>：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>;tls-auth ta.key 0 # This file is secret</span></span>
<span class="line"><span>tls-crypt ta.key</span></span></code></pre></div><p>接下来，通过查找cipher行找到关于加密密码的部分。默认值设置为<code>AES-256-CBC</code>，然而，<code>AES-256-GCM</code>密码提供了更好的加密级别，性能，并且在最新的OpenVPN客户端中得到了很好的支持。通过在此行的开头添加;符号来注释掉默认值，然后在它后面添加另一行，其中包含更新后的<code>AES-256-GCM</code>值：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>;cipher AES-256-CBC</span></span>
<span class="line"><span>cipher AES-256-GCM</span></span></code></pre></div><p>就在这一行之后，添加一个<code>auth</code>指令来选择HMAC消息摘要算法。<code>SHA256</code>是一个不错的选择：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>auth SHA256</span></span></code></pre></div><p>接下来，找到包含<code>dh</code>指令的行，该指令定义了Diffie—Hellman参数。由于您将所有证书配置为使用椭圆曲线加密，因此不需要Diffie—Hellman种子文件。注释掉看起来像<code>dh</code> <code>dh2048.pem</code>或<code>dh</code> <code>dh.pem</code>的现有行。Diffie—Hellman密钥的文件名可能与示例服务器配置文件中列出的文件名不同。然后在它后面添加一行内容<code>dh none</code>：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>;dh dh2048.pem</span></span>
<span class="line"><span>dh none</span></span></code></pre></div><h3 id="可选-推送dns更改以通过vpn重定向所有流量" tabindex="-1">（可选）推送DNS更改以通过VPN重定向所有流量 <a class="header-anchor" href="#可选-推送dns更改以通过vpn重定向所有流量" aria-label="Permalink to &quot;（可选）推送DNS更改以通过VPN重定向所有流量&quot;">​</a></h3><p>上述设置将在客户端和服务器之间创建VPN连接，但不会强制任何连接使用隧道。如果您希望使用VPN通过VPN路由所有客户端流量，则可能需要将一些额外设置推送到客户端计算机。</p><p>首先，找到并取消注释包含<code>push &quot;redirect-gateway def1 bypass-dhcp&quot;</code>的行。这样做将告诉您的客户端通过您的OpenVPN服务器重定向其所有流量。请注意，启用此功能可能会导致与其他网络服务（如SSH）的连接问题：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>push &quot;redirect-gateway def1 bypass-dhcp&quot;</span></span></code></pre></div><p>就在这条线下面，找到<code>dhcp-option</code>部分。同样，删除两行开头的<code>;</code>以取消注释：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>push &quot;dhcp-option DNS 208.67.222.222&quot;</span></span>
<span class="line"><span>push &quot;dhcp-option DNS 208.67.220.220&quot;</span></span></code></pre></div><p>这些行将告诉您的客户端在列出的IP地址上使用免费的OpenDNS解析器。如果您更喜欢其他DNS解析器，您可以将其替换为突出显示的IP。</p><p>这将帮助客户端重新配置其DNS设置，以使用VPN隧道作为默认网关。</p><h3 id="可选-调整端口和协议" tabindex="-1">（可选）调整端口和协议 <a class="header-anchor" href="#可选-调整端口和协议" aria-label="Permalink to &quot;（可选）调整端口和协议&quot;">​</a></h3><p>默认情况下，OpenVPN服务器使用端口<code>1194</code>和UDP协议来接受客户端连接。如果由于客户端可能处于限制性网络环境中而需要使用其他端口，则可以更改<code>port</code>选项。如果您没有在OpenVPN服务器上托管Web内容，则端口<code>443</code>是一个受欢迎的选择，因为它通常允许通过防火墙规则。</p><p>要将OpenVPN更改为侦听端口443，请打开<code>server.conf</code>文件并编辑<code>port</code>行，使端口为443：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>port 443</span></span></code></pre></div><p>通常，该协议也仅限于该端口。如果是，请在<code>port</code>行下方找到<code>proto</code>行，并将方案从<code>udp</code>更改为<code>tcp</code>：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>proto tcp</span></span></code></pre></div><p>如果您将协议切换到TCP，则需要将<code>explicit-exit-notify</code>指令的值从<code>1</code>更改为<code>0</code>，因为此指令仅由UDP使用。如果在使用TCP时不这样做，将在启动OpenVPN服务时导致错误。</p><p>找到文件末尾的<code>explicit-exit-notify</code>行，并将值更改为<code>0</code>：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>explicit-exit-notify 0</span></span></code></pre></div><p>如果您不需要使用不同的端口和协议，最好保持这些设置不变。</p><h3 id="可选-指向非默认凭据" tabindex="-1">（可选）指向非默认凭据 <a class="header-anchor" href="#可选-指向非默认凭据" aria-label="Permalink to &quot;（可选）指向非默认凭据&quot;">​</a></h3><p>如果您在前面的<code>./easyrsa gen-req server</code>命令中选择了不同的名称，请修改<code>server.conf\`\`cert</code>配置文件中的<code>cert</code>和<code>key</code>行，使它们指向相应的<code>.crt</code>和<code>.key</code>文件。如果使用默认名称server，则已正确设置：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cert server.crt</span></span>
<span class="line"><span>key server.key</span></span></code></pre></div><p>完成后，保存并关闭文件。</p><p>您现在已经完成了OpenVPN常规设置的配置。在下一步中，您将自定义服务器的网络选项。</p><h2 id="步骤8-调整openvpn服务器网络配置" tabindex="-1">步骤8 -调整OpenVPN服务器网络配置 <a class="header-anchor" href="#步骤8-调整openvpn服务器网络配置" aria-label="Permalink to &quot;步骤8 -调整OpenVPN服务器网络配置&quot;">​</a></h2><p>服务器的网络配置有一些方面需要调整，以便OpenVPN可以通过VPN正确地路由流量。第一个是IP转发，这是一种确定IP流量应路由到何处的方法。这对于您的服务器将提供的VPN功能至关重要。</p><p>要调整OpenVPN服务器的默认IP转发设置，请使用<code>nano</code>或您喜欢的编辑器打开<code>/etc/sysctl.conf</code>文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/sysctl.conf</span></span></code></pre></div><p>然后在文件底部添加以下行：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>net.ipv4.ip_forward = 1</span></span></code></pre></div><p>完成后，保存并关闭文件。</p><p>要读取文件并加载当前会话的新值，请键入以下内容：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sysctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span></span></code></pre></div><p>现在，您的OpenVPN服务器将能够将传入流量从一个以太网设备转发到另一个。此设置确保服务器可以将来自连接到虚拟VPN接口的客户端的流量通过其其他物理以太网设备定向出去。此配置将通过服务器的IP地址路由来自客户端的所有Web流量，并且客户端的公共IP地址将有效地隐藏。</p><p>在下一步中，您将需要配置一些防火墙规则，以确保进出OpenVPN服务器的流量正常流动。</p><h2 id="步骤9-防火墙配置" tabindex="-1">步骤9 -防火墙配置 <a class="header-anchor" href="#步骤9-防火墙配置" aria-label="Permalink to &quot;步骤9 -防火墙配置&quot;">​</a></h2><p>到目前为止，您已经在服务器上安装了OpenVPN，对其进行了配置，并生成了客户端访问VPN所需的密钥和证书。但是，您尚未向OpenVPN提供任何有关将来自客户端的传入Web流量发送到何处的说明。您可以通过建立一些防火墙规则和路由配置来规定服务器应如何处理客户端流量。</p><p>假设您遵循了本教程开始时的先决条件，您应该已经在服务器上安装并运行了ufw。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> allow</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span></span></code></pre></div><p>要允许OpenVPN通过防火墙，您需要启用伪装，这是一个iptables概念，提供动态网络地址转换（NAT）以正确路由客户端连接。</p><p>在打开防火墙配置文件以添加伪装规则之前，必须首先找到计算机的公共网络接口。要执行此操作，请键入：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> route</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default</span></span></code></pre></div><p>你的公共接口是在这个命令的输出中找到的跟在单词“dev”后面的字符串。例如，此结果显示名为<code>eth0</code>的接口，该接口在下面突出显示：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Output</span></span>
<span class="line"><span>default via 159.65.160.1 dev eth0 proto static</span></span></code></pre></div><p>当您拥有与默认路由关联的接口时，打开<code>/etc/ufw/before.rules</code>文件以添加相关配置：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/ufw/before.rules</span></span></code></pre></div><p>UFW规则通常使用<code>ufw</code>命令添加。但是，在加载常规UFW规则之前，读取<code>before.rules</code>文件中列出的规则并将其放置到位。在文件的顶部，添加下面突出显示的行。这将为<code>POSTROUTING</code>表中的<code>nat</code>链设置默认策略，并伪装来自VPN的任何流量。请记住将下面<code>-A POSTROUTING</code>行中的<code>eth0</code>替换为您在上面命令中找到的接口：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#</span></span>
<span class="line"><span># rules.before</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span># Rules that should be run before the ufw command line added rules. Custom</span></span>
<span class="line"><span># rules should be added to one of these chains:</span></span>
<span class="line"><span>#   ufw-before-input</span></span>
<span class="line"><span>#   ufw-before-output</span></span>
<span class="line"><span>#   ufw-before-forward</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span> </span></span>
<span class="line"><span># START OPENVPN RULES</span></span>
<span class="line"><span># NAT table rules</span></span>
<span class="line"><span>*nat</span></span>
<span class="line"><span>:POSTROUTING ACCEPT [0:0]</span></span>
<span class="line"><span># Allow traffic from OpenVPN client to eth0 (change to the interface you discovered!)</span></span>
<span class="line"><span>-A POSTROUTING -s 10.8.0.0/8 -o eth0 -j MASQUERADE</span></span>
<span class="line"><span>COMMIT</span></span>
<span class="line"><span># END OPENVPN RULES</span></span>
<span class="line"><span> </span></span>
<span class="line"><span># Don&#39;t delete these required lines, otherwise there will be errors</span></span>
<span class="line"><span>*filter</span></span>
<span class="line"><span>. . .</span></span></code></pre></div><p>完成后，保存并关闭文件。</p><p>接下来，您需要告诉UFW默认也允许转发数据包。为此，请打开<code>/etc/default/ufw</code>文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/default/ufw</span></span></code></pre></div><p>在里面，找到<code>DEFAULT_FORWARD_POLICY</code>指令并将值从<code>DROP</code>改为<code>ACCEPT</code>：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DEFAULT_FORWARD_POLICY=&quot;ACCEPT&quot;</span></span></code></pre></div><p>完成后，保存并关闭文件。</p><p>接下来，调整防火墙本身以允许流量进入OpenVPN。如果您没有在/etc/openvpn/server.conf文件中更改端口和协议，则需要打开到端口<code>1194</code>的UDP流量。如果修改了端口和/或协议，请替换此处选择的值。</p><p>如果您在遵循先决条件教程时忘记添加SSH端口，请在此处添加：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> allow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 443/tcp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> allow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OpenSSH</span></span></code></pre></div><p>注意：如果您使用的是其他防火墙或自定义了UFW配置，则可能需要添加其他防火墙规则。例如，如果您决定通过VPN连接隧道传输所有网络流量，则需要确保允许端口<code>53</code>流量用于DNS请求，并允许端口<code>80</code>和<code>443</code>分别用于HTTP和HTTPS流量。如果您在VPN上使用其他协议，则还需要为它们添加规则。</p><p>添加这些规则后，禁用并重新启用UFW以重新启动它并从您修改的所有文件加载更改：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> disable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span></span></code></pre></div><p>您的服务器现在已配置为正确处理OpenVPN流量。有了防火墙规则，您就可以在服务器上启动OpenVPN服务。</p><h2 id="步骤10-启动openvpn" tabindex="-1">步骤10 -启动OpenVPN <a class="header-anchor" href="#步骤10-启动openvpn" aria-label="Permalink to &quot;步骤10 -启动OpenVPN&quot;">​</a></h2><p>OpenVPN作为<code>systemd</code>服务运行，因此您可以使用<code>systemctl</code>来管理它。您将配置OpenVPN在靴子时启动，以便只要您的服务器正在运行，您就可以随时连接到VPN。要做到这一点，通过将其添加到<code>systemctl</code>来启用OpenVPN服务：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openvpn-server@server.service</span></span></code></pre></div><p>然后启动OpenVPN服务：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openvpn-server@server.service</span></span></code></pre></div><p>使用以下命令仔细检查OpenVPN服务是否处于活动状态。你应该在输出中看到<code>active (running)</code>：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openvpn-server@server.service</span></span></code></pre></div><p>您现在已经完成了OpenVPN的服务器端配置。接下来，您将配置您的客户端计算机并连接到OpenVPN服务器。</p><h2 id="步骤11-创建客户端配置基础结构" tabindex="-1">步骤11 -创建客户端配置基础结构 <a class="header-anchor" href="#步骤11-创建客户端配置基础结构" aria-label="Permalink to &quot;步骤11 -创建客户端配置基础结构&quot;">​</a></h2><p>为OpenVPN客户端创建配置文件可能会有些复杂，因为每个客户端都必须有自己的配置，并且每个客户端都必须与服务器配置文件中列出的设置保持一致。此步骤不是编写只能在一个客户端上使用的单个配置文件，而是概述了构建客户端配置基础结构的过程，您可以使用该基础结构动态生成配置文件。您将首先创建一个“基本”配置文件，然后构建一个脚本，该脚本将允许您根据需要生成唯一的客户端配置文件、证书和密钥。</p><p>首先创建一个新目录，在此目录中，您将在前面创建的<code>client-configs</code>目录中存储客户端配置文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/client-configs/files</span></span></code></pre></div><p>接下来，将一个示例客户端配置文件复制到<code>client-configs</code>目录中，用作基本配置：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/share/doc/openvpn/examples/sample-config-files/client.conf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/client-configs/base.conf</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">找不到示例<code>client.conf</code>文件的解决方法</p><p><a href="https://github.com/OpenVPN/openvpn/blob/master/sample/sample-config-files/client.conf" target="_blank" rel="noreferrer">client.conf</a></p><p>复制到<code>~/client-configs/</code>目录下并重命名为<code>base.conf</code>。</p></div><p>使用<code>nano</code>或您喜欢的文本编辑器打开此新文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/client-configs/base.conf</span></span></code></pre></div><p>在里面，找到<code>remote</code>指令。这将客户端指向您的OpenVPN服务器地址-您的OpenVPN服务器的公共IP地址。如果您决定更改OpenVPN服务器正在侦听的端口，则还需要将1194更改为您选择的端口：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>. . .</span></span>
<span class="line"><span># The hostname/IP and port of the server.</span></span>
<span class="line"><span># You can have multiple remote entries</span></span>
<span class="line"><span># to load balance between the servers.</span></span>
<span class="line"><span>remote your_server_ip 1194</span></span>
<span class="line"><span>. . .</span></span></code></pre></div><p>确保协议与您在服务器配置中使用的值匹配：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>proto udp</span></span></code></pre></div><p>查找设置<code>ca</code>、<code>cert</code>和<code>key</code>的指令。注释掉这些指令，因为您将很快在文件本身中添加证书和密钥：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># SSL/TLS parms.</span></span>
<span class="line"><span># See the server config file for more</span></span>
<span class="line"><span># description. It&#39;s best to use</span></span>
<span class="line"><span># a separate .crt/.key file pair</span></span>
<span class="line"><span># for each client. A single ca</span></span>
<span class="line"><span># file can be used for all clients.</span></span>
<span class="line"><span>;ca ca.crt</span></span>
<span class="line"><span>;cert client.crt</span></span>
<span class="line"><span>;key client.key</span></span></code></pre></div><p>类似地，注释掉<code>tls-auth</code>指令，因为您将直接将<code>ta.key</code>添加到客户端配置文件中（并且服务器设置为使用<code>tls-crypt</code>）：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># If a tls-auth key is used on the server</span></span>
<span class="line"><span># then every client must also have the key.</span></span>
<span class="line"><span>;tls-auth ta.key 1</span></span></code></pre></div><p>镜像您在<code>/etc/openvpn/server/server.conf</code>文件中设置的<code>cipher</code>和<code>auth</code>设置：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cipher AES-256-GCM</span></span>
<span class="line"><span>auth SHA256</span></span></code></pre></div><p>接下来，将<code>key-direction</code>指令添加到文件中的某个位置。您必须将其设置为“1”，VPN才能在客户端计算机上正常运行：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>key-direction 1</span></span></code></pre></div><p>完成后，保存并关闭文件。</p><p>接下来，您将创建一个脚本，该脚本将使用相关的证书、密钥和加密文件编译基本配置，然后将生成的配置放在<code>~/client-configs/files</code>目录中。在<code>~/client-configs</code>目录中打开一个名为<code>make_config.sh</code>的新文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/client-configs/make_config.sh</span></span></code></pre></div><p>在内部，添加以下内容：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># First argument: Client identifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">KEY_DIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">~/client-configs/keys</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OUTPUT_DIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">~/client-configs/files</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BASE_CONFIG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">~/client-configs/base.conf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${BASE_CONFIG} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;ca&gt;&#39;)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \${KEY_DIR}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/ca.crt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;/ca&gt;\\n&lt;cert&gt;&#39;)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \${KEY_DIR}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">\${1}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.crt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;/cert&gt;\\n&lt;key&gt;&#39;)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \${KEY_DIR}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">\${1}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;/key&gt;\\n&lt;tls-crypt&gt;&#39;)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \${KEY_DIR}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/ta.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;/tls-crypt&gt;&#39;)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${OUTPUT_DIR}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">\${1}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.ovpn</span></span></code></pre></div><p>完成后，保存并关闭文件。</p><p>在继续之前，请确保键入以下命令将此文件标记为可执行文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 700</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/client-configs/make_config.sh</span></span></code></pre></div><p>此脚本将复制您创建的<code>base.conf</code>文件，收集您为客户端创建的所有证书和密钥文件，提取它们的内容，将它们附加到基本配置文件的副本中，并将所有这些内容导出到新的客户端配置文件中。这意味着，不必单独管理客户端的配置、证书和密钥文件，所有必需的信息都存储在一个地方。使用此方法的好处是，如果您将来需要添加客户端，您可以运行此脚本以快速创建新的配置文件，并确保所有重要信息都存储在一个易于访问的位置。</p><p>请注意，无论何时添加新客户端，都需要为其生成新密钥和证书，然后才能运行此脚本并生成其配置文件。在下一步中，您将获得一些使用此脚本的练习。</p><h2 id="步骤12-生成客户端配置文件" tabindex="-1">步骤12 -生成客户端配置文件 <a class="header-anchor" href="#步骤12-生成客户端配置文件" aria-label="Permalink to &quot;步骤12 -生成客户端配置文件&quot;">​</a></h2><p>如果您按照本指南的沿着进行操作，您将在步骤6中创建一个分别名为<code>client1.crt</code>和<code>client1.key</code>的客户端证书和密钥。您可以通过进入到您的<code>~/client-configs</code>目录并运行您在上一步结束时创建的脚本来为这些凭据生成配置文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/client-configs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./make_config.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client1</span></span></code></pre></div><p>这将在您的<code>~/client-configs/files</code>目录中创建一个名为<code>client1.ovpn</code>的文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/client-configs/files</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">client1.ovpn</span></span></code></pre></div><p>您需要将此文件传输到计划用作客户端的设备。例如，这可能是您的本地计算机或移动终端。</p>`,195)]))}const r=i(p,[["render",t]]);export{o as __pageData,r as default};
