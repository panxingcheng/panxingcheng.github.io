import{_ as n,c as i,o as a,ag as p}from"./chunks/framework.BPIbAgMo.js";const c=JSON.parse('{"title":"Jenkins","description":"","frontmatter":{"title":"Jenkins","permalink":"1656741671.html","sidebar":"auto","blogs":"Java","date":"2022-07-01"},"headers":[],"relativePath":"category/java/Jenkins.md","filePath":"category/java/Jenkins.md","lastUpdated":1714213745000}'),e={name:"category/java/Jenkins.md"};function l(t,s,h,k,r,o){return a(),i("div",null,s[0]||(s[0]=[p(`<h1 id="jenkins" tabindex="-1">Jenkins <a class="header-anchor" href="#jenkins" aria-label="Permalink to &quot;Jenkins&quot;">​</a></h1><h2 id="jenkins-是什么" tabindex="-1">Jenkins 是什么 <a class="header-anchor" href="#jenkins-是什么" aria-label="Permalink to &quot;Jenkins 是什么&quot;">​</a></h2><p>Jenkins 是一个独立的开源自动化服务器，可以用来自动化与构建、测试、交付或部署软件相关的各种任务。</p><p>Jenkins 可以通过本地系统包、Docker 安装，甚至可以在任何安装了 Java 运行环境（JRE，Java Runtime Environment）的机器上独立运行。</p><h2 id="安装-jenkins" tabindex="-1">安装 Jenkins <a class="header-anchor" href="#安装-jenkins" aria-label="Permalink to &quot;安装 Jenkins&quot;">​</a></h2><h3 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins/jenkins:lts-jdk11</span></span></code></pre></div><h2 id="安装后的设置向导" tabindex="-1">安装后的设置向导 <a class="header-anchor" href="#安装后的设置向导" aria-label="Permalink to &quot;安装后的设置向导&quot;">​</a></h2><h3 id="解锁-jenkins" tabindex="-1">解锁 Jenkins <a class="header-anchor" href="#解锁-jenkins" aria-label="Permalink to &quot;解锁 Jenkins&quot;">​</a></h3><p>第一次访问一个新的 Jenkins 实例时，需要使用自动生成的密码解锁它。</p><ol><li>浏览到 <a href="http://localhost:8080" target="_blank" rel="noreferrer">http://localhost:8080</a>（或安装时为 Jenkins 配置的任何端口），并等待<strong>解锁 Jenkins</strong> 页面出现。</li></ol><p><img src="https://www.jenkins.io/doc/book/resources/tutorials/setup-jenkins-01-unlock-jenkins-page.jpg" alt="image"> （图片来源：Jenkins 官网）</p><ol start="2"><li><p>从 Jenkins 控制台日志输出中，复制自动生成的字母数字密码（在两组星号之间）。</p><ul><li>Docker</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">···</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2022-07-05</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 02:59:23.345+0000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [id=29]    INFO    jenkins.install.SetupWizard#init: </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*************************************************************</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*************************************************************</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*************************************************************</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Jenkins</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> initial</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> setup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> required.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> An</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> admin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> has</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> been</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> created</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> password</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generated.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Please</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> following</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> password</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> proceed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> installation:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a7f5186a72eb43cfb88a83602ae944ad</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">This</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> may</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> also</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> found</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/jenkins_home/secrets/initialAdminPassword</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*************************************************************</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*************************************************************</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*************************************************************</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">···</span></span></code></pre></div></li><li><p>在<strong>解锁 Jenkins</strong> 页面上，将此<strong>密码</strong>粘贴到管理员密码字段中，然后单击<strong>继续</strong>。</p></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Jenkins 控制台日志显示可以获取密码的位置（在 Jenkins 主目录中）。必须在新 Jenkins 安装中的安装向导中输入此密码才能访问 Jenkins 的主 UI。如果您在设置向导中跳过了后续的用户创建步骤，则此密码还可用作默认 admininstrator 帐户的密码（使用用户名“admin”）。</p></div><h3 id="用插件定制-jenkins" tabindex="-1">用插件定制 Jenkins <a class="header-anchor" href="#用插件定制-jenkins" aria-label="Permalink to &quot;用插件定制 Jenkins&quot;">​</a></h3><p>解锁 Jenkins 后，会出现自定义 Jenkins 页面。</p><ul><li><p>安装推荐的插件 — 安装推荐的插件集，这些插件基于最常见的用例。</p></li><li><p>选择插件来安装 — 选择并安装最合适的插件集。</p></li></ul><h3 id="创建第一个管理员用户" tabindex="-1">创建第一个管理员用户 <a class="header-anchor" href="#创建第一个管理员用户" aria-label="Permalink to &quot;创建第一个管理员用户&quot;">​</a></h3><p>最后，在使用插件自定义 Jenkins 之后，Jenkins 会要求创建第一个管理员用户。</p><ol><li><p>当<strong>创建第一个管理员用户</strong>页面出现时，在各自的字段中指定管理员用户的详细信息，然后单击<strong>保存</strong>和<strong>完成</strong>。</p></li><li><p>当<strong>Jenkins 准备好了</strong>出现时，单击<strong>开始使用 Jenkins</strong>。</p></li><li><p>如果需要，使用您刚刚创建的用户的凭证登录到 Jenkins，您就可以开始使用 Jenkins 了!</p></li></ol><h2 id="使用-jenkins" tabindex="-1">使用 Jenkins <a class="header-anchor" href="#使用-jenkins" aria-label="Permalink to &quot;使用 Jenkins&quot;">​</a></h2><h3 id="第一个流水线" tabindex="-1">第一个流水线 <a class="header-anchor" href="#第一个流水线" aria-label="Permalink to &quot;第一个流水线&quot;">​</a></h3><ol><li><p>如果有要求的话，确保你已登录进 Jenkins。</p></li><li><p>从 Jenkins 主页（即 Jenkins 经典 UI 的工作台），点击左上的<strong>新建Item</strong>。</p></li><li><p>在<strong>输入一个任务名称</strong>字段，填写你新建的流水线项目的名称。</p></li></ol><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Jenkins 使用这个项目名称在磁盘上创建目录。建议不要在项目名称中使用空格，因为这样做可能会触发在脚本中不能正确处理目录路径中的空格的 bug。</p></div><ol start="4"><li><p>向下滚动并点击<strong>流水线</strong>，然后点击页面底部的<strong>确定</strong>打开流水线配置页。</p></li><li><p>点击页面顶部的<strong>流水线</strong>选项卡让页面向下滚动到<strong>流水线</strong>部分。</p></li><li><p>在<strong>流水线</strong>部分, 确保<strong>定义</strong>字段显示<strong>Pipeline script</strong>选项。</p></li><li><p>将你的流水线代码输入到<strong>脚本</strong>文本区域。</p><div class="language-jenkinsfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jenkinsfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pipeline {</span></span>
<span class="line"><span>    agent any // 1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    stages {</span></span>
<span class="line"><span>        stage(&#39;hello&#39;) {</span></span>
<span class="line"><span>            steps {</span></span>
<span class="line"><span>                echo &#39;Hello, Jenkins!&#39; // 2</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ol><li><p>agent 指示 Jenkins 为整个流水线分配一个执行器（在 Jenkins 环境中的任何可用代理/节点上）和工作区。</p></li><li><p>echo 写一个简单的字符串到控制台输出。</p></li></ol></li><li><p>点击<strong>保存</strong>打开流水线项目视图页面。</p></li><li><p>在该页面, 点击左侧的<strong>立即构建</strong>运行流水线。</p></li><li><p>在左侧的 <strong>Build History</strong> 下面，点击 <strong>#1</strong> 来访问这个特定流水线运行的详细信息。</p></li><li><p>点击 <strong>Console Output</strong> 来查看流水线运行的全部输出。下面的输出显示你的流水线已成功运行。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Started</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> by</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> admin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] Start of Pipeline</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] node</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Running</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Jenkins</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/jenkins_home/workspace/hello-world</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] { (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] echo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Jenkins!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] // stage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] // node</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] End of Pipeline</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Finished:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SUCCESS</span></span></code></pre></div></li></ol><h2 id="流水线" tabindex="-1">流水线 <a class="header-anchor" href="#流水线" aria-label="Permalink to &quot;流水线&quot;">​</a></h2><h3 id="什么是-jenkins-流水线" tabindex="-1">什么是 Jenkins 流水线 <a class="header-anchor" href="#什么是-jenkins-流水线" aria-label="Permalink to &quot;什么是 Jenkins 流水线&quot;">​</a></h3><p>Jenkins 流水线 (或简单的带有大写 &quot;P&quot; 的 &quot;Pipeline&quot;) 是一套插件，它支持实现和集成 continuous delivery pipelines 到Jenkins。</p><p>流水线提供了一组可扩展的工具，通过 <a href="https://www.jenkins.io/doc/book/pipeline/syntax/" target="_blank" rel="noreferrer">Pipeline domain-specific language (DSL) syntax</a> 将从简单到复杂的交付管道建模为“代码”。</p><p>Jenkins 流水线的定义被写入一个文本文件(称为 <code>Jenkinsfile</code>)，该文件可以提交给项目的源代码控制存储库。这是“管道即代码”的基础；将 CD（continuous delivery） 流水线作为应用程序的一部分进行版本控制和审查，就像其他代码一样。</p><p>创建一个 <code>Jenkinsfile</code> 并将其提交给源代码控制提供了许多直接的好处：</p><ul><li><p>自动为所有分支和 pull 请求创建一个流水线构建流程。</p></li><li><p>对流水线的代码审查/迭代（包括剩余的源代码）。</p></li><li><p>对流水线进行审计跟踪。</p></li><li><p>该流水线的真正的源代码, 可以被项目的多个成员查看和编辑。</p></li></ul><p>尽管在 web UI 中或在 <code>Jenkinsfile</code> 中定义流水线的语法是相同的，但通常认为在 <code>Jenkinsfile</code> 中定义流水线并将其检入到源代码控制中是最佳实践。</p><h4 id="声明式和脚本式的流水线语法" tabindex="-1">声明式和脚本式的流水线语法 <a class="header-anchor" href="#声明式和脚本式的流水线语法" aria-label="Permalink to &quot;声明式和脚本式的流水线语法&quot;">​</a></h4><p><code>Jenkinsfile</code> 能使用两种语法进行编写 - 声明式和脚本式。</p><p>声明式和脚本式的流水线从根本上是不同的。声明式流水线的是 Jenkins 流水线更近的特性:</p><ul><li><p>相比脚本式的流水线语法，它提供更丰富的语法特性,</p></li><li><p>是为了使编写和读取流水线代码更容易而设计的。</p></li></ul><p>然而，写入 <code>Jenkinsfile</code> 的许多单独的语法组件(或“步骤”)对于声明式管道和脚本式管道都是通用的。</p><h3 id="流水线的概念" tabindex="-1">流水线的概念 <a class="header-anchor" href="#流水线的概念" aria-label="Permalink to &quot;流水线的概念&quot;">​</a></h3><p>下面的概念是 Jenkins 流水线很关键的一方面，它与流水线语法紧密相连。</p><h4 id="pipeline" tabindex="-1">Pipeline <a class="header-anchor" href="#pipeline" aria-label="Permalink to &quot;Pipeline&quot;">​</a></h4><p>流水线是用户定义的一个 CD 流水线模型。流水线的代码定义了整个的构建过程，他通常包括构建、测试和交付应用程序的阶段。</p><p>另外，<code>pipeline</code> 块是<a href="#声明式流水线基础">声明式流水线语法的关键部分</a>。</p><h4 id="node" tabindex="-1">Node <a class="header-anchor" href="#node" aria-label="Permalink to &quot;Node&quot;">​</a></h4><p>节点是一台机器，它是 Jenkins 环境的一部分，能够执行流水线。</p><p>此外，<code>node</code> 块是<a href="#脚本式流水线基础">脚本式流水线语法的关键部分</a>。</p><h4 id="stage" tabindex="-1">Stage <a class="header-anchor" href="#stage" aria-label="Permalink to &quot;Stage&quot;">​</a></h4><p><code>stage</code> 定义了通过整个流水线执行的任务的一个概念上不同的子集（比如 &quot;Build&quot;, &quot;Test&quot; 和 &quot;Deploy&quot; 阶段），许多插件使用它来可视化或呈现 Jenkins 流水线的状态/进度。</p><h4 id="step" tabindex="-1">Step <a class="header-anchor" href="#step" aria-label="Permalink to &quot;Step&quot;">​</a></h4><p>一个单一的任务。从根本上说，<code>step</code> 告诉 Jenkins 在特定时间点(或流程中的“步骤”)要做什么。例如，执行 <code>shell</code> 命令 <code>make</code> 时，需要使用 <code>sh</code> 步骤：<code>sh &#39;make&#39;</code>。当一个插件扩展流水线 DSL 时，通常意味着插件实现了一个新步骤。</p><h3 id="流水线语法概述" tabindex="-1">流水线语法概述 <a class="header-anchor" href="#流水线语法概述" aria-label="Permalink to &quot;流水线语法概述&quot;">​</a></h3><h4 id="声明式流水线基础" tabindex="-1">声明式流水线基础 <a class="header-anchor" href="#声明式流水线基础" aria-label="Permalink to &quot;声明式流水线基础&quot;">​</a></h4><p>在声明式流水线语法中，<code>pipeline</code> 块定义了整个流水线中完成的所有的工作。</p><div class="language-jenkinsfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jenkinsfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Jenkinsfile (Declarative Pipeline)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pipeline {</span></span>
<span class="line"><span>    agent any // 1</span></span>
<span class="line"><span>    stages {</span></span>
<span class="line"><span>        stage(&#39;Build&#39;) { // 2</span></span>
<span class="line"><span>            steps {</span></span>
<span class="line"><span>                // 3</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        stage(&#39;Test&#39;) { // 4</span></span>
<span class="line"><span>            steps {</span></span>
<span class="line"><span>                // 5</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        stage(&#39;Deploy&#39;) { // 6</span></span>
<span class="line"><span>            steps {</span></span>
<span class="line"><span>                // 7</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ol><li><p>在任何可用的代理上，执行流水线或它的任何阶段。</p></li><li><p>定义 &quot;Build&quot; 阶段。</p></li><li><p>执行与 &quot;Build&quot; 阶段相关的步骤。</p></li><li><p>定义 &quot;Test&quot; 阶段。</p></li><li><p>执行与 &quot;Test&quot; 阶段相关的步骤。</p></li><li><p>定义 &quot;Deploy&quot; 阶段。</p></li><li><p>执行与 &quot;Deploy&quot; 阶段相关的步骤。</p></li></ol><h4 id="脚本式流水线基础" tabindex="-1">脚本式流水线基础 <a class="header-anchor" href="#脚本式流水线基础" aria-label="Permalink to &quot;脚本式流水线基础&quot;">​</a></h4><p>在脚本化流水线语法中, 一个或多个 <code>node</code> 块负责整个流水线中的核心工作。虽然这不是脚本化流水线语法的强制性要求, 但将流水线的工作限制在 <code>node</code> 块内会产生两种效果：</p><ol><li><p>通过向 Jenkins 队列添加一个项来调度块中包含的步骤运行。只要节点上的执行器空闲，这些步骤就会运行。</p></li><li><p>创建一个工作区(一个特定于该流水线的目录)，可以在其中对从源代码控制中签出的文件进行处理。</p></li></ol><div class="language-jenkinsfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jenkinsfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Jenkinsfile (Scripted Pipeline)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>node { // 1 </span></span>
<span class="line"><span>    stage(&#39;Build&#39;) { // 2</span></span>
<span class="line"><span>        // 3</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    stage(&#39;Test&#39;) { // 4</span></span>
<span class="line"><span>        // 5</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    stage(&#39;Deploy&#39;) { // 6</span></span>
<span class="line"><span>        // 7</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ol><li><p>在任何可用的代理上，执行流水线或它的任何阶段。</p></li><li><p>定义 &quot;Build&quot; 阶段。 <code>stage</code> 块在脚本化流水线语法中是可选的。然而，在脚本化流水线中实现 <code>stage</code> 块，可以清楚的显示 Jenkins UI 中的每个 <code>stage</code> 的任务子集。</p></li><li><p>执行与 &quot;Build&quot; 阶段相关的步骤。</p></li><li><p>定义 &quot;Test&quot; 阶段。</p></li><li><p>执行与 &quot;Test&quot; 阶段相关的步骤。</p></li><li><p>定义 &quot;Deploy&quot; 阶段。</p></li><li><p>执行与 &quot;Deploy&quot; 阶段相关的步骤。</p></li></ol><h2 id="使用-jenkinsfile" tabindex="-1">使用 Jenkinsfile <a class="header-anchor" href="#使用-jenkinsfile" aria-label="Permalink to &quot;使用 Jenkinsfile&quot;">​</a></h2><p>复杂的流水线很难在流水线配置页面的脚本文本区域进行编写和维护。</p><p>为简化操作，流水线的 <code>Jenkinsfile</code> 可以在文本编辑器或集成开发环境（IDE）中进行编写并提交到源码管理系统（可选择性地与需要 Jenkins 构建的应用程序代码放在一起）。然后 Jenkins 从源代码管理系统中检出 <code>Jenkinsfile</code> 文件作为流水线项目构建过程的一部分并接着执行你的流水线。</p><h3 id="在源代码管理系统中定义流水线" tabindex="-1">在源代码管理系统中定义流水线 <a class="header-anchor" href="#在源代码管理系统中定义流水线" aria-label="Permalink to &quot;在源代码管理系统中定义流水线&quot;">​</a></h3><p>要使用来自源代码管理系统的 <code>Jenkinsfile</code> 文件配置流水线项目：</p><ol><li><p>按照<a href="#第一个流水线">上面的步骤</a>定义你的流水线直到第 5 步（在流水线配置页面访问流水线部分）。</p></li><li><p>从<strong>定义</strong>字段选择 <strong>Pipeline script from SCM</strong> 选项。</p></li><li><p>从 <strong>SCM</strong> 字段，选择包含 <code>Jenkinsfile</code> 文件的仓库的源代码管理系统的类型。</p></li><li><p>填充对应仓库的源代码管理系统的字段。</p><p>Tip: 如果你不确定给定字段应填写什么值，点击它右侧的 <code>?</code> 图标以获取更多信息。</p></li><li><p>在<strong>脚本路径</strong>字段，指定你的 <code>Jenkinsfile</code> 文件的位置（和名称）。这个位置是 Jenkins 检出/克隆包括 <code>Jenkinsfile</code> 文件的仓库的位置，它应该与仓库的文件结构匹配。该字段的默认值采取名称为 <em>Jenkinsfile</em> 的 <code>Jenkinsfile</code> 文件并位于仓库的根路径。</p><div class="language-jenkinsfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jenkinsfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pipeline {</span></span>
<span class="line"><span>    agent any</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    stages {</span></span>
<span class="line"><span>        stage(&#39;hello&#39;) {</span></span>
<span class="line"><span>            steps {</span></span>
<span class="line"><span>                echo &#39;Hello, Jenkins!&#39;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div></li><li><p>点击<strong>保存</strong>打开流水线项目视图页面。</p></li><li><p>在该页面, 点击左侧的<strong>立即构建</strong>运行流水线。</p></li><li><p>在左侧的 <strong>Build History</strong> 下面，点击 <strong>#1</strong> 来访问这个特定流水线运行的详细信息。</p></li><li><p>点击 <strong>Console Output</strong> 来查看流水线运行的全部输出。下面的输出显示你的流水线已成功运行。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Started</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> by</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> admin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Obtained</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Jenkinsfile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/panxingcheng/jenkinsfile.git</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] Start of Pipeline</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] node</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Running</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Jenkins</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/jenkins_home/workspace/hello-world</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] { (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Declarative:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SCM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] checkout</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Selected</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> installation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> does</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exist.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Using</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Default</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> recommended</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NONE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">No</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> credentials</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> specified</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cloning</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repository</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cloning</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repository</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/panxingcheng/jenkinsfile.git</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git init /var/jenkins_home/workspace/hello-world </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># timeout=10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Fetching</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/panxingcheng/jenkinsfile.git</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git --version </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># timeout=10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git --version </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &#39;git version 2.30.2&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git fetch --tags --force --progress -- https://github.com/panxingcheng/jenkinsfile.git +refs/heads/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:refs/remotes/origin/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # timeout=10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git config remote.origin.url https://github.com/panxingcheng/jenkinsfile.git </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># timeout=10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git config --add remote.origin.fetch +refs/heads/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:refs/remotes/origin/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # timeout=10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Avoid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> second</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git rev-parse refs/remotes/origin/main^{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commit}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # timeout=10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Checking</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Revision</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 86873a2d22812873528cb317b2425c8f761f12ef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (refs/remotes/origin/main)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git config core.sparsecheckout </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># timeout=10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git checkout -f 86873a2d22812873528cb317b2425c8f761f12ef </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># timeout=10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Commit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> message:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Create Jenkinsfile&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">First</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> time</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Skipping</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changelog.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] // stage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] withEnv</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] { (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] echo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Jenkins!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] // stage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] // withEnv</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] // node</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Pipeline] End of Pipeline</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Finished:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SUCCESS</span></span></code></pre></div></li></ol><h2 id="在流水线中使用-docker" tabindex="-1">在流水线中使用 Docker <a class="header-anchor" href="#在流水线中使用-docker" aria-label="Permalink to &quot;在流水线中使用 Docker&quot;">​</a></h2><p>从流水线版本 2.5 或以上开始, 流水线内置了与 <code>Jenkinsfile</code> 中的 Docker 进行交互的的支持。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><p>要在 Jenkins 容器使用 Docker，请参见<a href="https://helloworld.study/1630997877.html#jenkins-%E5%AE%B9%E5%99%A8%E4%BD%BF%E7%94%A8%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84-docker" target="_blank" rel="noreferrer">Jenkins 容器使用宿主机的 Docker</a></p></li><li><p>需要安装 <code>docker-workflow</code> 插件，不然报这个错误： <code>org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed: WorkflowScript: 3: Invalid agent type &quot;docker&quot; specified. Must be one of [any, label, none]</code>。</p></li></ul></div><h3 id="自定义执行环境" tabindex="-1">自定义执行环境 <a class="header-anchor" href="#自定义执行环境" aria-label="Permalink to &quot;自定义执行环境&quot;">​</a></h3><div class="language-jenkinsfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jenkinsfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pipeline {</span></span>
<span class="line"><span>    agent {</span></span>
<span class="line"><span>        docker {</span></span>
<span class="line"><span>            image &#39;maven:3.8.6-eclipse-temurin-17-alpine&#39;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    stages {</span></span>
<span class="line"><span>        stage(&#39;Test&#39;) {</span></span>
<span class="line"><span>            steps {</span></span>
<span class="line"><span>                sh &#39;mvn --version&#39;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="为容器缓存数据" tabindex="-1">为容器缓存数据 <a class="header-anchor" href="#为容器缓存数据" aria-label="Permalink to &quot;为容器缓存数据&quot;">​</a></h4><div class="language-jenkinsfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jenkinsfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pipeline {</span></span>
<span class="line"><span>    agent {</span></span>
<span class="line"><span>        docker {</span></span>
<span class="line"><span>            image &#39;maven:3.8.6-eclipse-temurin-17-alpine&#39;</span></span>
<span class="line"><span>            args &#39;-v $HOME/.m2/:/root/.m2/&#39;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    stages {</span></span>
<span class="line"><span>        stage(&#39;Build&#39;) {</span></span>
<span class="line"><span>            steps {</span></span>
<span class="line"><span>                sh &#39;mvn clean package&#39;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="使用多个容器" tabindex="-1">使用多个容器 <a class="header-anchor" href="#使用多个容器" aria-label="Permalink to &quot;使用多个容器&quot;">​</a></h4><div class="language-jenkinsfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jenkinsfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pipeline {</span></span>
<span class="line"><span>    agent none</span></span>
<span class="line"><span>    stages {</span></span>
<span class="line"><span>        stage(&#39;Build&#39;) {</span></span>
<span class="line"><span>            agent {</span></span>
<span class="line"><span>                docker {</span></span>
<span class="line"><span>                    image &#39;maven:3.8.6-eclipse-temurin-17-alpine&#39;</span></span>
<span class="line"><span>                    args &#39;-v $HOME/.m2/:/root/.m2/&#39;</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>            steps {</span></span>
<span class="line"><span>                sh &#39;mvn clean package&#39;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        stage(&#39;Test&#39;) {</span></span>
<span class="line"><span>            agent {</span></span>
<span class="line"><span>                docker {</span></span>
<span class="line"><span>                    image &#39;maven:3.8.6-eclipse-temurin-17-alpine&#39;</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>            steps {</span></span>
<span class="line"><span>                sh &#39;mvn --version&#39;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,75)]))}const g=n(e,[["render",l]]);export{c as __pageData,g as default};
