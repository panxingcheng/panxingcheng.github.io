import{_ as s,c as i,o as e,ag as t}from"./chunks/framework.BPIbAgMo.js";const g=JSON.parse('{"title":"Spring Cloud Data Flow","description":"","frontmatter":{"title":"Spring Cloud Data Flow","permalink":"1660889103.html","sidebar":"auto","blogs":"Spring","date":"2022-08-19"},"headers":[],"relativePath":"category/spring/Spring Cloud Data Flow.md","filePath":"category/spring/Spring Cloud Data Flow.md","lastUpdated":1714213745000}'),l={name:"category/spring/Spring Cloud Data Flow.md"};function p(r,a,h,n,k,o){return e(),i("div",null,a[0]||(a[0]=[t(`<h1 id="spring-cloud-data-flow" tabindex="-1">Spring Cloud Data Flow <a class="header-anchor" href="#spring-cloud-data-flow" aria-label="Permalink to &quot;Spring Cloud Data Flow&quot;">​</a></h1><h2 id="初体验" tabindex="-1">初体验 <a class="header-anchor" href="#初体验" aria-label="Permalink to &quot;初体验&quot;">​</a></h2><ol><li><p>下载可执行包。</p><p>必要：</p><ul><li>(Spring Cloud Data Flow Server)[<a href="https://repo.spring.io/artifactory/release/org/springframework/cloud/spring-cloud-dataflow-server/2.9.5/spring-cloud-dataflow-server-2.9.5.jar" target="_blank" rel="noreferrer">https://repo.spring.io/artifactory/release/org/springframework/cloud/spring-cloud-dataflow-server/2.9.5/spring-cloud-dataflow-server-2.9.5.jar</a>]</li></ul><p>非必要：</p><ul><li><p>(Spring Cloud Data Flow Shell)[<a href="https://repo.spring.io/artifactory/release/org/springframework/cloud/spring-cloud-dataflow-shell/2.9.5/spring-cloud-dataflow-shell-2.9.5.jar" target="_blank" rel="noreferrer">https://repo.spring.io/artifactory/release/org/springframework/cloud/spring-cloud-dataflow-shell/2.9.5/spring-cloud-dataflow-shell-2.9.5.jar</a>]</p></li><li><p>(Spring Cloud Skipper)[<a href="https://repo.spring.io/artifactory/release/org/springframework/cloud/spring-cloud-skipper-server/2.8.5/spring-cloud-skipper-server-2.8.5.jar" target="_blank" rel="noreferrer">https://repo.spring.io/artifactory/release/org/springframework/cloud/spring-cloud-skipper-server/2.8.5/spring-cloud-skipper-server-2.8.5.jar</a>]</p></li></ul></li><li><p>启动。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spring-cloud-dataflow-server-2.8.5.jar</span></span></code></pre></div><p>还可以指定 Maven 仓库路径（默认当前用户目录下的 <code>.m2/repository</code>），后面发布应用需要：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spring-cloud-dataflow-server-2.8.5.jar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --maven.localRepository=C:\\Users\\Pan\\.m2\\repository</span></span></code></pre></div></li><li><p>进入控制面板。</p><p>访问 <a href="http://localhost:9393/dashboard/" target="_blank" rel="noreferrer">http://localhost:9393/dashboard/</a> 进入控制面板。</p></li><li><p>准备一个普通的 Maven 可执行 JAR。</p></li><li><p>在控制面板中添加 <code>Application</code>。</p><p><code>Type</code> 选择 <code>task</code></p><p><code>Uri</code> 填写 <code>maven://study.helloworld:data-flow-sample:jar:0.0.1-SNAPSHOT</code></p></li><li><p>在控制面板中创建 <code>Task</code>。</p><p>选择刚才添加的应用。</p></li><li><p>启动这个 <code>Task</code>。</p></li></ol><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><h3 id="手动安装" tabindex="-1">手动安装 <a class="header-anchor" href="#手动安装" aria-label="Permalink to &quot;手动安装&quot;">​</a></h3><h4 id="下载服务器jar文件" tabindex="-1">下载服务器jar文件 <a class="header-anchor" href="#下载服务器jar文件" aria-label="Permalink to &quot;下载服务器jar文件&quot;">​</a></h4><p>使用如下命令下载Spring Cloud Data Flow Server和shell:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://repo.maven.apache.org/maven2/org/springframework/cloud/spring-cloud-dataflow-server/2.10.2/spring-cloud-dataflow-server-2.10.3.jar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://repo.maven.apache.org/maven2/org/springframework/cloud/spring-cloud-dataflow-shell/2.10.2/spring-cloud-dataflow-shell-2.10.3.jar</span></span></code></pre></div><p>执行以下命令下载Skipper:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://repo.maven.apache.org/maven2/org/springframework/cloud/spring-cloud-skipper-server/2.9.2/spring-cloud-skipper-server-2.9.2.jar</span></span></code></pre></div><h4 id="安装消息传递中间件" tabindex="-1">安装消息传递中间件 <a class="header-anchor" href="#安装消息传递中间件" aria-label="Permalink to &quot;安装消息传递中间件&quot;">​</a></h4><p>这些指令要求RabbitMQ与Skipper、Spring Cloud Data Flow服务器和Shell运行在同一台机器上。</p><p>安装和运行Kafka，使用如下命令:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -zxvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kafka_2.13-3.5.0.tgz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/kafka_2.13-3.5.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start the ZooKeeper service</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin/zookeeper-server-start.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config/zookeeper.properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start the Kafka broker service</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin/kafka-server-start.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config/server.properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span></code></pre></div><h4 id="启动服务器jar" tabindex="-1">启动服务器jar <a class="header-anchor" href="#启动服务器jar" aria-label="Permalink to &quot;启动服务器jar&quot;">​</a></h4><h5 id="skipper" tabindex="-1">Skipper <a class="header-anchor" href="#skipper" aria-label="Permalink to &quot;Skipper&quot;">​</a></h5><p>在下载Skipper的目录下，使用java -jar运行服务器，如下所示:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spring-cloud-skipper-server-2.9.2.jar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> skipper.log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span></code></pre></div><p>要指定远程Maven仓库地址，使用<code>--maven.remote-repositories.repo1.url=https://repo1</code>属性，如下所示:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spring-cloud-skipper-server-2.9.2.jar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --maven.remote-repositories.repo1.url=http://maven.aliyun.com/nexus/content/groups/public/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> skipper.log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span></code></pre></div><h5 id="dataflow" tabindex="-1">Dataflow <a class="header-anchor" href="#dataflow" aria-label="Permalink to &quot;Dataflow&quot;">​</a></h5><p>在下载Data Flow的目录下，使用java -jar运行服务器，如下所示:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spring-cloud-dataflow-server-2.10.3.jar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dataflow.log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span></code></pre></div><p>如果Skipper和Data Flow服务器不在同一台主机上运行，则将spring.cloud.skipper.client.serverUri配置属性设置为Skipper的位置，示例如下:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spring-cloud-dataflow-server-2.10.3.jar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --spring.cloud.skipper.client.serverUri=https://192.51.100.1:7577/api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span></code></pre></div><h5 id="shell" tabindex="-1">Shell <a class="header-anchor" href="#shell" aria-label="Permalink to &quot;Shell&quot;">​</a></h5><p>如果你想使用Spring Cloud Data Flow shell，用下面的命令启动它:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spring-cloud-dataflow-shell-2.10.3.jar</span></span></code></pre></div><p>如果数据流服务器和shell不在同一台主机上运行，您也可以使用shell中的dataflow config Server命令将shell指向数据流服务器的URL，如下所示:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">server-unknown:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dataflow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://198.51.100.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Successfully</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> targeted</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://198.51.100.0</span></span></code></pre></div><p>或者，您可以传入<code>--dataflow.uri</code>命令行选项。shell的<code>--help</code>命令行选项显示了可用的选项。</p><h4 id="访问数据流仪表板" tabindex="-1">访问数据流仪表板 <a class="header-anchor" href="#访问数据流仪表板" aria-label="Permalink to &quot;访问数据流仪表板&quot;">​</a></h4><p>现在可以导航到Spring Cloud Data Flow Dashboard。在浏览器中，导航到<a href="http://localhost:9393/dashboard" target="_blank" rel="noreferrer">Spring Cloud Data Flow Dashboard URL</a>。</p><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><h3 id="应用类型" tabindex="-1">应用类型 <a class="header-anchor" href="#应用类型" aria-label="Permalink to &quot;应用类型&quot;">​</a></h3><h4 id="长生命周期应用" tabindex="-1">长生命周期应用 <a class="header-anchor" href="#长生命周期应用" aria-label="Permalink to &quot;长生命周期应用&quot;">​</a></h4><p>寿命较长的应用程序需要连续运行。如果应用程序停止，平台负责重新启动它。</p><p>Spring Cloud Stream框架提供了一个编程模型来简化连接到公共消息传递系统的消息驱动微服务应用程序的编写。您可以编写与特定中间件无关的核心业务逻辑。要使用的中间件是通过添加Spring Cloud Stream Binder库作为应用程序的依赖项来确定的。</p><p>Data Flow服务器委托Skipper服务器部署长期存在的应用程序。</p><h5 id="带有源、处理器和接收器的流" tabindex="-1">带有源、处理器和接收器的流 <a class="header-anchor" href="#带有源、处理器和接收器的流" aria-label="Permalink to &quot;带有源、处理器和接收器的流&quot;">​</a></h5><p>Spring Cloud Stream定义了绑定接口的概念，它将消息交换模式封装在代码中，即应用程序的输入和输出是什么。Spring Cloud Stream提供了几个绑定接口，这些接口对应于以下常见的消息交换契约:</p><ul><li>源（Source）:将消息发送到目的地的消息生成器。</li><li>接收器（Sink）:从目的地读取消息的消息使用者。</li><li>处理器（Processor）:源和接收的组合。处理器使用来自目的地的消息，并生成要发送到另一个目的地的消息。</li></ul><p>这三种类型的应用程序通过使用源、处理器和接收器来描述正在注册的应用程序的类型，从而在数据流中注册。</p><p>下面的示例显示了注册http源(侦听http请求并将http有效载荷发送到目的地的应用程序)和日志接收器(从目的地消费并记录接收到的消息的应用程序)的shell语法:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dataflow:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> register</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --uri</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> maven://org.springframework.cloud.stream.app:http-source-rabbit:1.2.0.RELEASE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Successfully</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registered</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;source:http&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dataflow:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> register</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sink</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --uri</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> maven://org.springframework.cloud.stream.app:log-sink-rabbit:1.1.0.RELEASE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Successfully</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registered</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;sink:log&#39;</span></span></code></pre></div><p>通过在Data Flow中注册http和log，你可以使用stream Pipeline DSL创建一个流定义，它使用管道和过滤器语法，如下例所示:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dataflow:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">stream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> httpStream</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --definition</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http | log&quot;</span></span></code></pre></div><p>http | log中的管道符号表示源输出到接收输入的连接。Data Flow在部署流时设置适当的属性，以便源可以通过消息传递中间件与接收通信。</p><h4 id="短生命周期应用" tabindex="-1">短生命周期应用 <a class="header-anchor" href="#短生命周期应用" aria-label="Permalink to &quot;短生命周期应用&quot;">​</a></h4><p>短寿命应用程序运行一段时间(通常是几分钟到几小时)，然后终止。它们的运行可能基于一个时间表(例如，每个工作日早上6点)或响应一个事件(例如，一个文件被放入FTP服务器)。</p><p>Spring Cloud Task框架允许您开发一个短寿命的微服务，该微服务记录短寿命应用程序的生命周期事件(如开始时间、结束时间和退出代码)。</p><p>任务应用程序通过使用名称task来描述应用程序的类型，从而在Data Flow中注册。</p><p>下面的例子展示了注册时间戳任务(打印当前时间并退出的应用程序)的shell语法:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dataflow:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> register</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timestamp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> task</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --uri</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> maven://org.springframework.cloud.task.app:timestamp-task:2.1.0.RELEASE</span></span></code></pre></div><p>通过引用任务的名称来创建任务定义，如下面的示例所示:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dataflow:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">task</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsTask</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --definition</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;timestamp&quot;</span></span></code></pre></div><p>Spring Batch框架可能是编写短期应用程序的Spring开发人员想到的。Spring Batch提供了比Spring Cloud Task更丰富的功能集，建议在处理大量数据时使用。用例可能是读取许多CSV文件，转换每一行数据，并将转换后的每一行写入数据库。Spring Batch提供了自己的数据库模式，其中包含关于Spring Batch作业执行的更丰富的信息集。Spring Cloud Task与Spring Batch集成，因此，如果Spring Cloud Task应用程序定义了Spring Batch作业，则会创建Spring Cloud Task和Spring Batch运行表之间的链接。</p><p>使用Spring Batch的任务以前面所示的相同方式注册和创建。</p><p>Spring Cloud Data Flow服务器将任务启动到平台。</p><h3 id="流处理" tabindex="-1">流处理 <a class="header-anchor" href="#流处理" aria-label="Permalink to &quot;流处理&quot;">​</a></h3><p>流处理被定义为在没有交互或中断的情况下处理无限数量的数据。流处理的业务案例包括:</p><ul><li>实时信用卡欺诈检测或预测分析</li><li>用于可操作分析的近实时业务数据处理</li></ul><p>Spring Cloud Data Flow中的流处理在架构上被实现为一组独立的事件驱动流应用程序，这些应用程序使用可选的消息传递中间件(例如RabbitMQ或Apache Kafka)进行连接。独立应用程序的集合在运行时聚集在一起，构成流数据管道。管道可以是线性的，也可以是非线性的，这取决于应用程序之间的数据流。</p><h4 id="消息中间件" tabindex="-1">消息中间件 <a class="header-anchor" href="#消息中间件" aria-label="Permalink to &quot;消息中间件&quot;">​</a></h4><p>已部署的流应用程序通过消息传递中间件产品进行通信。我们提供了预先构建的流应用程序，可以通过RabbitMQ或Kafka进行通信，您可以使用它与各种数据产品集成。</p><h4 id="spring-cloud-stream" tabindex="-1">Spring Cloud Stream <a class="header-anchor" href="#spring-cloud-stream" aria-label="Permalink to &quot;Spring Cloud Stream&quot;">​</a></h4><p>对于Spring开发人员，我们建议使用Spring Cloud Stream框架编写自定义流应用程序。Spring Cloud Stream允许您轻松构建与共享消息传递系统相连的高度可扩展的事件驱动微服务。</p><p>作为一名开发人员，您可以专注于开发应用程序的业务逻辑，同时将底层API复杂性和带有消息代理的连接性样板委托给Spring Cloud Stream。</p><p>在高层次上，流应用程序可以通过消息传递中间件生成、处理或使用事件。</p><h4 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h4><p>如果您对使用预构建的应用程序来创建流数据管道感兴趣，请参阅流入门指南。</p><p>如果你对使用Spring Cloud stream编写和部署自定义流处理应用程序感兴趣，请参阅stream开发者指南。</p><h2 id="预先构建的应用程序" tabindex="-1">预先构建的应用程序 <a class="header-anchor" href="#预先构建的应用程序" aria-label="Permalink to &quot;预先构建的应用程序&quot;">​</a></h2><p>Spring团队提供并支持一系列预打包的应用程序，您可以使用这些应用程序组装各种数据集成和处理管道，并支持Spring Cloud data Flow开发、学习和实验。</p><h3 id="开始入门" tabindex="-1">开始入门 <a class="header-anchor" href="#开始入门" aria-label="Permalink to &quot;开始入门&quot;">​</a></h3><p>所有预打包的流应用程序:</p><ul><li>作为Apache Maven构件或Docker映像可用。</li><li>使用RabbitMQ或Apache Kafka。</li><li>支持通过Prometheus和InfluxDB进行监控。</li><li>包含UI中使用的应用程序属性的元数据和shell中的代码完成。</li></ul><p>您可以通过使用Data Flow UI或shell注册流和任务应用程序。</p><p>可以使用app register命令单独注册应用程序，也可以使用app import命令批量注册应用程序。</p><p>对于流，取决于你是使用Kafka还是RabbitMQ，你可以通过使用它们各自的url来注册应用程序:</p><h4 id="kafka" tabindex="-1">Kafka <a class="header-anchor" href="#kafka" aria-label="Permalink to &quot;Kafka&quot;">​</a></h4><ul><li><a href="https://dataflow.spring.io/kafka-docker-latest" target="_blank" rel="noreferrer">https://dataflow.spring.io/kafka-docker-latest</a></li><li><a href="https://dataflow.spring.io/kafka-maven-latest" target="_blank" rel="noreferrer">https://dataflow.spring.io/kafka-maven-latest</a></li></ul><h4 id="rabbitmq" tabindex="-1">RabbitMQ <a class="header-anchor" href="#rabbitmq" aria-label="Permalink to &quot;RabbitMQ&quot;">​</a></h4><ul><li><a href="https://dataflow.spring.io/rabbitmq-docker-latest" target="_blank" rel="noreferrer">https://dataflow.spring.io/rabbitmq-docker-latest</a></li><li><a href="https://dataflow.spring.io/rabbitmq-maven-latest" target="_blank" rel="noreferrer">https://dataflow.spring.io/rabbitmq-maven-latest</a></li></ul><p>当您使用数据流UI时，预填充包括如下图所示的链接:</p><p>在Data Flow Shell中，您可以批量导入和注册应用程序，如下例所示:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dataflow:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --uri</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://dataflow.spring.io/kafka-maven-latest</span></span></code></pre></div>`,87)]))}const c=s(l,[["render",p]]);export{g as __pageData,c as default};
