import{_ as t,c as s,o as a,ag as e}from"./chunks/framework.BPIbAgMo.js";const o=JSON.parse('{"title":"Java BigDecimal","description":"","frontmatter":{"title":"Java BigDecimal","permalink":"1593847540.html","sidebar":"auto","blogs":"Java","date":"2020-07-04"},"headers":[],"relativePath":"category/java/Java BigDecimal.md","filePath":"category/java/Java BigDecimal.md","lastUpdated":1714213745000}'),l={name:"category/java/Java BigDecimal.md"};function n(h,i,d,k,p,g){return a(),s("div",null,i[0]||(i[0]=[e(`<h1 id="java-bigdecimal" tabindex="-1">Java BigDecimal <a class="header-anchor" href="#java-bigdecimal" aria-label="Permalink to &quot;Java BigDecimal&quot;">​</a></h1><p>在带有小数的数值计算（<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>）中，<code>float</code> 和 <code>double</code> 类型的计算结果往往不如人意。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1.2000000000000002</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.11000000000000001</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 11.0</span></span></code></pre></div><p>这是因为现在的计算机主要采用的是<a href="https://ieeexplore.ieee.org/document/8766229" target="_blank" rel="noreferrer">754 - IEEE 浮点算术标准</a>来表示浮点数，对小数的存储只能尽量做到精确，却做不到完全精确。</p><p>《Effective Java》这本书中对 <code>float</code> 和 <code>double</code> 的使用总结的很好：</p><blockquote><p><code>float</code> 和 <code>double</code> 类型主要用于科学和工程计算。 它们执行二进制浮点运算，经过精心设计，可在很宽的范围内快速提供准确的近似值。 但是，它们不能提供准确的结果，不应在需要确切结果的地方使用。 <strong><code>float</code> 和 <code>double</code> 类型特别不适合进行货币计算</strong>，因为不可能将 0.1(或任何其他 10 的负次方)精确地表示为 <code>float</code> 或 <code>double</code>。</p></blockquote><p>解决此问题的正确方法是使用 <code>BigDecimal</code>，<code>int</code> 或 <code>long</code> 进行货币计算。也就是说，可以将小数转成 <code>BigDecimal</code>，或将小数乘以一个固定的倍率转换为 <code>int</code> 或 <code>long</code>，计算完成后再除以倍率转换回来。</p><h2 id="bigdecimal-简介" tabindex="-1">BigDecimal 简介 <a class="header-anchor" href="#bigdecimal-简介" aria-label="Permalink to &quot;BigDecimal 简介&quot;">​</a></h2><p><code>BigDecimal</code> 的全类名为 <code>java.math.BigDecimal</code>。根据 Java API 文档说明，<code>BigDecimal</code> 的特点如下：</p><ul><li>不可变的、任意精度的有符号小数</li><li>提供用于算术、数值范围处理、舍入、比较、哈希和格式转换的操作</li><li>完全控制舍入行为</li></ul><h2 id="bigdecimal-构造方法" tabindex="-1">BigDecimal 构造方法 <a class="header-anchor" href="#bigdecimal-构造方法" aria-label="Permalink to &quot;BigDecimal 构造方法&quot;">​</a></h2><p><code>BigDecimal</code> 类提供了多个构造方法供我们实例化 <code>BigDecimal</code>，常用的是下面几种：</p><ul><li><code>public BigDecimal(int val)</code> 将 <code>int</code> 转换为 <code>BigDecimal</code></li><li><code>public BigDecimal(double val)</code> 将 <code>double</code> 转换为 <code>BigDecimal</code>（不建议）</li><li><code>public BigDecimal(String val)</code> 将 <code>String</code> 转换为 <code>BigDecimal</code></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实例化 BigDecimal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal bigDecimal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 int 转换为 BigDecimal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal bigDecimal1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 double 转换为 BigDecimal（不建议）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal bigDecimal2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;10.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 String 转换为 BigDecimal</span></span></code></pre></div><p>为什么不建议使用 <code>BigDecimal(double val)</code> 来实例化 <code>BigDecimal</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不建议使用 double 构造 BigDecimal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal bigDecimal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bigDecimal);</span></span></code></pre></div><p>打印结果为：</p><p><code>0.1000000000000000055511151231257827021181583404541015625</code></p><p>可以看到，这比我们直接使用 <code>double</code> 类型还要糟糕。对此，Java API 文档做了注释：</p><blockquote><ol><li><p><strong>这个构造函数的结果可能有些不可预测</strong>。您可能会假设在 Java 中写入新的 <code>BigDecimal(0.1)</code> 会创建一个完全等于 0.1 的 <code>BigDecimal(一个未缩放的值 1，刻度为 1)</code>，但是它实际上等于 0.1000000000000000055511151231257827021181583404541015625。这是因为 0.1 不能精确地表示为一个双精度数(或者说，任何有限长度的二进制分数)。因此，传递给构造函数的值并不完全等于 0.1，尽管看起来是这样。</p></li><li><p>另一方面，字符串构造函数是完全可预测的：编写新的 <code>BigDecimal(&quot;0.1&quot;)</code> 将创建一个完全等于 0.1 的 <code>BigDecimal</code>，这与预期的一样。因此，<strong>通常建议优先使用字符串构造函数</strong>。</p></li><li><p>当 <code>double</code> 必须用作 <code>BigDecimal</code> 的源时，请注意此构造函数提供了精确的转换;与使用 <code>double.tostring(double)</code> 方法将 <code>double</code> 转换为字符串，然后使用 <code>BigDecimal(String)</code> 构造函数得到的结果不同。要得到这个结果，<strong>使用静态 <code>valueOf(double)</code> 方法</strong>。</p></li></ol></blockquote><p>也就是说，必须使用 <code>double</code> 创建一个 <code>BigDecimal</code> 时，可以使用 <code>BigDecimal.valueOf(double)</code> 静态方法生成 <code>BigDecimal</code> 对象：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 BigDecimal.valueOf(double) 静态方法生成 BigDecimal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal bigDecimal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BigDecimal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bigDecimal); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.1</span></span></code></pre></div><h2 id="bigdecimal-算术运算-加减乘除" tabindex="-1">BigDecimal 算术运算（加减乘除） <a class="header-anchor" href="#bigdecimal-算术运算-加减乘除" aria-label="Permalink to &quot;BigDecimal 算术运算（加减乘除）&quot;">​</a></h2><p><code>BigDecimal</code> 提供了 <code>add</code>、<code>subtract</code>、<code>multiply</code>、<code>divide</code> 方法进行“加减乘除”运算操作。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// BigDecimal 加减乘除</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x + y = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x + y = 1.2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x - y = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subtract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x - y = 1.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x * y = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">multiply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x * y = 0.11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x / y = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">divide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x / y = 11</span></span></code></pre></div><p>可以看到，这样的结果才是我们想要的。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>就像 <code>String</code> 一样，<code>BigDecimal</code> 也是不可变的类型。这意味着“加减乘除”的运算结果都会返回一个全新的 <code>BigDecimal</code>。</p></div><h2 id="bigdecimal-中的除法" tabindex="-1">BigDecimal 中的除法 <a class="header-anchor" href="#bigdecimal-中的除法" aria-label="Permalink to &quot;BigDecimal 中的除法&quot;">​</a></h2><p>对于 “10 / 3” 的结果，数学中可以表示为 “≈3.33” ，而在 Java 中会直接舍去小数部分，只取商。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3</span></span></code></pre></div><p>想要保留小数部分，需要除数或被除数为小数形式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3.3333333333333335</span></span></code></pre></div><p>可是 <code>float</code> 和 <code>double</code> 运算结果的精度是无法预料的，那使用 <code>BigDecimal</code> 呢？</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BigDecimal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BigDecimal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i / j = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">divide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(j)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</span></span></code></pre></div><p>“10 / 3”的结果是一个无穷小数，不抛异常才怪（原来刚才计算“1.1 / 0.1”正常，完全是运气好 o(∩_∩)o 哈哈）。</p><p><code>BigDecimal divide(BigDecimal divisor)</code> 方法的描述如下：</p><blockquote><p>返回一个 <code>BigDecimal</code>，其值为(this / divisor)，其首选<strong>数值范围</strong>为(this.scale() - divisor.scale());如果不能表示精确的商(由于它是无限小数)，则抛出 <code>ArithmeticException</code> 异常。</p></blockquote><p>为了解决除不尽的问题，需要使用 <code>divide</code> 的重载（overload）方法：</p><p><code>BigDecimal divide(BigDecimal divisor, int scale, RoundingMode roundingMode)</code></p><p>方法参数含义为：</p><blockquote><p>divisor - 除数</p><p>scale - 小数的数值范围（小数点后几位）</p><p>roundingMode - 舍入模式（八种舍入模式）</p></blockquote><p>例如，要保留两位小数，且舍去（截断）后面的小数：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BigDecimal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BigDecimal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i / j = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">divide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(j, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, RoundingMode.DOWN)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3.33</span></span></code></pre></div><h2 id="bigdecimal-中的舍入模式" tabindex="-1">BigDecimal 中的舍入模式 <a class="header-anchor" href="#bigdecimal-中的舍入模式" aria-label="Permalink to &quot;BigDecimal 中的舍入模式&quot;">​</a></h2><p><code>RoundingMode</code> 类是一个枚举类，其中有八种枚举类型（<code>UP</code>、<code>DOWN</code>、<code>CEILING</code>、<code>FLOOR</code>、<code>HALF_UP</code>、<code>HALF_DOWN</code>、<code>HALF_EVEN</code>、<code>UNNECESSARY</code>），分别代表八种不同的舍入模式。</p><h3 id="roundingmode-up" tabindex="-1">RoundingMode.UP <a class="header-anchor" href="#roundingmode-up" aria-label="Permalink to &quot;RoundingMode.UP&quot;">​</a></h3><p>进一。以 0 为基准，舍入后的数字远离 0。</p><table tabindex="0"><thead><tr><th style="text-align:right;">输入数字</th><th style="text-align:right;">远离 0 取整</th></tr></thead><tbody><tr><td style="text-align:right;">5.5</td><td style="text-align:right;">6</td></tr><tr><td style="text-align:right;">2.5</td><td style="text-align:right;">3</td></tr><tr><td style="text-align:right;">1.6</td><td style="text-align:right;">2</td></tr><tr><td style="text-align:right;">1.1</td><td style="text-align:right;">2</td></tr><tr><td style="text-align:right;">1.0</td><td style="text-align:right;">1</td></tr><tr><td style="text-align:right;">-1.0</td><td style="text-align:right;">-1</td></tr><tr><td style="text-align:right;">-1.1</td><td style="text-align:right;">-2</td></tr><tr><td style="text-align:right;">-1.6</td><td style="text-align:right;">-2</td></tr><tr><td style="text-align:right;">-2.5</td><td style="text-align:right;">-3</td></tr><tr><td style="text-align:right;">-5.5</td><td style="text-align:right;">-6</td></tr></tbody></table><p>总结：<strong><code>RoundingMode.UP</code> 模式下，正数往大舍入，负数往小舍入。</strong></p><h3 id="roundingmode-down" tabindex="-1">RoundingMode.DOWN <a class="header-anchor" href="#roundingmode-down" aria-label="Permalink to &quot;RoundingMode.DOWN&quot;">​</a></h3><p>截断。以 0 为基准，舍入后的数字靠近 0。</p><table tabindex="0"><thead><tr><th style="text-align:right;">输入数字</th><th style="text-align:right;">靠近 0 取整</th></tr></thead><tbody><tr><td style="text-align:right;">5.5</td><td style="text-align:right;">5</td></tr><tr><td style="text-align:right;">2.5</td><td style="text-align:right;">2</td></tr><tr><td style="text-align:right;">1.6</td><td style="text-align:right;">1</td></tr><tr><td style="text-align:right;">1.1</td><td style="text-align:right;">1</td></tr><tr><td style="text-align:right;">1.0</td><td style="text-align:right;">1</td></tr><tr><td style="text-align:right;">-1.0</td><td style="text-align:right;">-1</td></tr><tr><td style="text-align:right;">-1.1</td><td style="text-align:right;">-1</td></tr><tr><td style="text-align:right;">-1.6</td><td style="text-align:right;">-1</td></tr><tr><td style="text-align:right;">-2.5</td><td style="text-align:right;">-2</td></tr><tr><td style="text-align:right;">-5.5</td><td style="text-align:right;">-5</td></tr></tbody></table><p>总结：<strong><code>RoundingMode.DOWN</code> 模式下，正数往小舍入，负数往大舍入。</strong></p><h3 id="roundingmode-ceiling" tabindex="-1">RoundingMode.CEILING <a class="header-anchor" href="#roundingmode-ceiling" aria-label="Permalink to &quot;RoundingMode.CEILING&quot;">​</a></h3><p>舍入后的数字靠近正无穷。</p><table tabindex="0"><thead><tr><th style="text-align:right;">输入数字</th><th style="text-align:right;">靠近正无穷</th></tr></thead><tbody><tr><td style="text-align:right;">5.5</td><td style="text-align:right;">6</td></tr><tr><td style="text-align:right;">2.5</td><td style="text-align:right;">3</td></tr><tr><td style="text-align:right;">1.6</td><td style="text-align:right;">2</td></tr><tr><td style="text-align:right;">1.1</td><td style="text-align:right;">2</td></tr><tr><td style="text-align:right;">1.0</td><td style="text-align:right;">1</td></tr><tr><td style="text-align:right;">-1.0</td><td style="text-align:right;">-1</td></tr><tr><td style="text-align:right;">-1.1</td><td style="text-align:right;">-1</td></tr><tr><td style="text-align:right;">-1.6</td><td style="text-align:right;">-1</td></tr><tr><td style="text-align:right;">-2.5</td><td style="text-align:right;">-2</td></tr><tr><td style="text-align:right;">-5.5</td><td style="text-align:right;">-5</td></tr></tbody></table><p>总结：<strong><code>RoundingMode.CEILING</code> 模式下，正数与负数都往大舍入。</strong></p><h3 id="roundingmode-floor" tabindex="-1">RoundingMode.FLOOR <a class="header-anchor" href="#roundingmode-floor" aria-label="Permalink to &quot;RoundingMode.FLOOR&quot;">​</a></h3><p>舍入后的数字靠近负无穷。</p><table tabindex="0"><thead><tr><th style="text-align:right;">输入数字</th><th style="text-align:right;">靠近负无穷</th></tr></thead><tbody><tr><td style="text-align:right;">5.5</td><td style="text-align:right;">5</td></tr><tr><td style="text-align:right;">2.5</td><td style="text-align:right;">2</td></tr><tr><td style="text-align:right;">1.6</td><td style="text-align:right;">1</td></tr><tr><td style="text-align:right;">1.1</td><td style="text-align:right;">1</td></tr><tr><td style="text-align:right;">1.0</td><td style="text-align:right;">1</td></tr><tr><td style="text-align:right;">-1.0</td><td style="text-align:right;">-1</td></tr><tr><td style="text-align:right;">-1.1</td><td style="text-align:right;">-2</td></tr><tr><td style="text-align:right;">-1.6</td><td style="text-align:right;">-2</td></tr><tr><td style="text-align:right;">-2.5</td><td style="text-align:right;">-3</td></tr><tr><td style="text-align:right;">-5.5</td><td style="text-align:right;">-6</td></tr></tbody></table><p>总结：<strong><code>RoundingMode.FLOOR</code> 模式下，正数与负数都往小舍入。</strong></p><h3 id="roundingmode-half-up" tabindex="-1">RoundingMode.HALF_UP <a class="header-anchor" href="#roundingmode-half-up" aria-label="Permalink to &quot;RoundingMode.HALF_UP&quot;">​</a></h3><p>四舍五入。如果舍去位的值 &gt;= 5,舍入模式同 <code>RoundingMode.UP</code>；否则同 <code>RoundingMode.DOWN</code>。</p><table tabindex="0"><thead><tr><th style="text-align:right;">输入数字</th><th style="text-align:right;">“四舍”靠近 0，“五入”远离 0</th></tr></thead><tbody><tr><td style="text-align:right;">5.5</td><td style="text-align:right;">6</td></tr><tr><td style="text-align:right;">2.5</td><td style="text-align:right;">3</td></tr><tr><td style="text-align:right;">1.6</td><td style="text-align:right;">2</td></tr><tr><td style="text-align:right;">1.1</td><td style="text-align:right;">1</td></tr><tr><td style="text-align:right;">1.0</td><td style="text-align:right;">1</td></tr><tr><td style="text-align:right;">-1.0</td><td style="text-align:right;">-1</td></tr><tr><td style="text-align:right;">-1.1</td><td style="text-align:right;">-1</td></tr><tr><td style="text-align:right;">-1.6</td><td style="text-align:right;">-2</td></tr><tr><td style="text-align:right;">-2.5</td><td style="text-align:right;">-3</td></tr><tr><td style="text-align:right;">-5.5</td><td style="text-align:right;">-6</td></tr></tbody></table><p>总结：<strong><code>RoundingMode.HALF_UP</code> 模式下，“四舍”同 <code>RoundingMode.DOWN</code>，“五入”同 <code>RoundingMode.UP</code>。</strong></p><h3 id="roundingmode-half-down" tabindex="-1">RoundingMode.HALF_DOWN <a class="header-anchor" href="#roundingmode-half-down" aria-label="Permalink to &quot;RoundingMode.HALF_DOWN&quot;">​</a></h3><p>五舍六入。如果舍去位的值 &gt;= 6,舍入模式同 <code>RoundingMode.UP</code>；否则同 <code>RoundingMode.DOWN</code>。</p><table tabindex="0"><thead><tr><th style="text-align:right;">输入数字</th><th style="text-align:right;">“五舍”靠近 0，“六入”远离 0</th></tr></thead><tbody><tr><td style="text-align:right;">5.5</td><td style="text-align:right;">5</td></tr><tr><td style="text-align:right;">2.5</td><td style="text-align:right;">2</td></tr><tr><td style="text-align:right;">1.6</td><td style="text-align:right;">2</td></tr><tr><td style="text-align:right;">1.1</td><td style="text-align:right;">1</td></tr><tr><td style="text-align:right;">1.0</td><td style="text-align:right;">1</td></tr><tr><td style="text-align:right;">-1.0</td><td style="text-align:right;">-1</td></tr><tr><td style="text-align:right;">-1.1</td><td style="text-align:right;">-1</td></tr><tr><td style="text-align:right;">-1.6</td><td style="text-align:right;">-2</td></tr><tr><td style="text-align:right;">-2.5</td><td style="text-align:right;">-2</td></tr><tr><td style="text-align:right;">-5.5</td><td style="text-align:right;">-5</td></tr></tbody></table><p>总结：<strong><code>RoundingMode.HALF_DOWN</code> 模式下，“五舍”同 <code>RoundingMode.DOWN</code>，“六入”同 <code>RoundingMode.UP</code>。</strong></p><h3 id="roundingmode-half-even" tabindex="-1">RoundingMode.HALF_EVEN <a class="header-anchor" href="#roundingmode-half-even" aria-label="Permalink to &quot;RoundingMode.HALF_EVEN&quot;">​</a></h3><p>“银行家的舍入（Banker&#39;s Rounding）”模式。</p><ul><li>如果舍去位的值 &gt; 5,舍入模式同 <code>RoundingMode.UP</code>；</li><li>如果舍去位的值 &lt; 5,舍入模式同 <code>RoundingMode.DOWN</code>；</li><li>如果舍去位的值 = 5 且 5 后不为空且非全 0 时，舍入模式同 <code>RoundingMode.UP</code>；</li><li>如果舍去位的值 = 5 且 5 后为空或全 0 时：如果前位数值为奇数，舍入模式同 <code>RoundingMode.UP</code>；如果前位数值为偶数，舍入模式同 <code>RoundingMode.DOWN</code>。</li></ul><table tabindex="0"><thead><tr><th style="text-align:right;">输入数字</th><th style="text-align:right;">“银行家的舍入”</th></tr></thead><tbody><tr><td style="text-align:right;">5.5</td><td style="text-align:right;">6</td></tr><tr><td style="text-align:right;">2.5</td><td style="text-align:right;">2</td></tr><tr><td style="text-align:right;">1.6</td><td style="text-align:right;">2</td></tr><tr><td style="text-align:right;">1.1</td><td style="text-align:right;">1</td></tr><tr><td style="text-align:right;">1.0</td><td style="text-align:right;">1</td></tr><tr><td style="text-align:right;">-1.0</td><td style="text-align:right;">-1</td></tr><tr><td style="text-align:right;">-1.1</td><td style="text-align:right;">-1</td></tr><tr><td style="text-align:right;">-1.6</td><td style="text-align:right;">-2</td></tr><tr><td style="text-align:right;">-2.5</td><td style="text-align:right;">-2</td></tr><tr><td style="text-align:right;">-5.5</td><td style="text-align:right;">-6</td></tr></tbody></table><p>总结：<strong><code>RoundingMode.HALF_EVEN</code> 模式下，四舍六入五考虑，五后非空就进一，五后为空看奇偶，五前为偶应舍去，五前为奇要进一。</strong></p><h3 id="roundingmode-unnecessary" tabindex="-1">RoundingMode.UNNECESSARY <a class="header-anchor" href="#roundingmode-unnecessary" aria-label="Permalink to &quot;RoundingMode.UNNECESSARY&quot;">​</a></h3><p>断言所请求的操作有确切的结果，因此不需要舍入。如果在产生不精确结果的操作上指定了这种舍入模式，则会抛出 <code>ArithmeticException</code> 异常。</p><table tabindex="0"><thead><tr><th style="text-align:right;">输入数字</th><th style="text-align:right;">不需要舍入</th></tr></thead><tbody><tr><td style="text-align:right;">5.5</td><td style="text-align:right;"><code>throw ArithmeticException</code></td></tr><tr><td style="text-align:right;">2.5</td><td style="text-align:right;"><code>throw ArithmeticException</code></td></tr><tr><td style="text-align:right;">1.6</td><td style="text-align:right;"><code>throw ArithmeticException</code></td></tr><tr><td style="text-align:right;">1.1</td><td style="text-align:right;"><code>throw ArithmeticException</code></td></tr><tr><td style="text-align:right;">1.0</td><td style="text-align:right;">1</td></tr><tr><td style="text-align:right;">-1.0</td><td style="text-align:right;">-1</td></tr><tr><td style="text-align:right;">-1.1</td><td style="text-align:right;"><code>throw ArithmeticException</code></td></tr><tr><td style="text-align:right;">-1.6</td><td style="text-align:right;"><code>throw ArithmeticException</code></td></tr><tr><td style="text-align:right;">-2.5</td><td style="text-align:right;"><code>throw ArithmeticException</code></td></tr><tr><td style="text-align:right;">-5.5</td><td style="text-align:right;"><code>throw ArithmeticException</code></td></tr></tbody></table><p>总结：<strong><code>RoundingMode.UNNECESSARY</code> 模式下，必须保证结果是精确的。</strong></p><h2 id="bigdecimal-比较-compareto-和-equals" tabindex="-1">BigDecimal 比较（compareTo 和 equals） <a class="header-anchor" href="#bigdecimal-比较-compareto-和-equals" aria-label="Permalink to &quot;BigDecimal 比较（compareTo 和 equals）&quot;">​</a></h2><p>对于 <code>float</code>、<code>double</code> 等基本的数值类型，可以通过布尔比较运算符（<code>&lt;</code>、<code>==</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>!=</code>、<code>&lt;=</code>）比较大小及是否相等。而对于它们的包装类型（<code>Float</code>、<code>Double</code> 等），由于 Java 没有重载对应的运算符，所以只能通过 <code>compareTo</code> 和 <code>equals</code> 方法来比较大小及是否相等。</p><p>同样，在 <code>BigDecimal</code> 中，也提供了这两个方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// compareTo 和 equals</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre></div><p><code>compareTo</code> 的返回值是一个 <code>int</code>，具体值只会是 -1、0、1 其中之一。</p><ul><li>如果 x &lt; y，则返回 -1</li><li>如果 x = y，则返回 0</li><li>如果 x &gt; y，则返回 1</li></ul><p>通过使用 <code>compareTo</code>，我们可以自行组合不同的布尔运算，建议方法是:<code>(x.compareTo(y) &lt;op&gt; 0)</code>，其中 <code>&lt;op&gt;</code> 是六个布尔比较运算符（<code>&lt;</code>、<code>==</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>!=</code>、<code>&lt;=</code>）之一。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 组合不同的布尔运算（&lt;, ==, &gt;, &gt;=, !=, &lt;=）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x &lt; y = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x &lt; y = false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x == y = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x == y = false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x &gt; y = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x &gt; y = true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x &gt;= y = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x &gt;= y = true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x != y = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x != y = true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x &lt;= y = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x &lt;= y = false</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">提示</p><blockquote><p>与 <code>compareTo</code> 不同的是，<code>equals</code> 方法只在两个 <code>BigDecimal</code> 对象在<strong>值和数值范围上相等时才认为它们相等</strong>(因此通过该方法进行比较时，2.0 不等于 2.00)。</p></blockquote><p>Java API 文档中的描述并不完整，这句话只对通过字符串构造的 <code>BigDecimal</code> 对象生效。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过字符串构造的 2.0 2.00</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过数值构造的 2.0 2.00</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal xx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal yy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(yy) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(yy)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div></div>`,87)]))}const E=t(l,[["render",n]]);export{o as __pageData,E as default};
