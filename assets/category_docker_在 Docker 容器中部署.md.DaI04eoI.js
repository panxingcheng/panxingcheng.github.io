import{_ as i,c as a,o as e,ag as h}from"./chunks/framework.BPIbAgMo.js";const c=JSON.parse('{"title":"在 Docker 容器中部署","description":"","frontmatter":{"title":"在 Docker 容器中部署","permalink":"1630997877.html","sidebar":"auto","blogs":"Docker","date":"2021-09-07"},"headers":[],"relativePath":"category/docker/在 Docker 容器中部署.md","filePath":"category/docker/在 Docker 容器中部署.md","lastUpdated":1714213745000}'),t={name:"category/docker/在 Docker 容器中部署.md"};function k(n,s,l,r,p,o){return e(),a("div",null,s[0]||(s[0]=[h('<h1 id="在-docker-容器中部署" tabindex="-1">在 Docker 容器中部署 <a class="header-anchor" href="#在-docker-容器中部署" aria-label="Permalink to &quot;在 Docker 容器中部署&quot;">​</a></h1><h2 id="在-docker-容器中部署-postgresql" tabindex="-1">在 Docker 容器中部署 PostgreSQL <a class="header-anchor" href="#在-docker-容器中部署-postgresql" aria-label="Permalink to &quot;在 Docker 容器中部署 PostgreSQL&quot;">​</a></h2><h3 id="启动一个-postgresql-实例" tabindex="-1">启动一个 PostgreSQL 实例 <a class="header-anchor" href="#启动一个-postgresql-实例" aria-label="Permalink to &quot;启动一个 PostgreSQL 实例&quot;">​</a></h3><pre><code>```sh\n$ sudo docker run -d -p 5432:5432 --name postgres-1 -e POSTGRES_PASSWORD=postgres postgres\n```\n</code></pre><h2 id="在-docker-容器中部署-logstash" tabindex="-1">在 Docker 容器中部署 Logstash <a class="header-anchor" href="#在-docker-容器中部署-logstash" aria-label="Permalink to &quot;在 Docker 容器中部署 Logstash&quot;">​</a></h2><h3 id="启动一个-logstash-实例" tabindex="-1">启动一个 Logstash 实例 <a class="header-anchor" href="#启动一个-logstash-实例" aria-label="Permalink to &quot;启动一个 Logstash 实例&quot;">​</a></h3><ul><li><p>拉取 Logstash 镜像</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker.elastic.co/logstash/logstash:7.16.1</span></span></code></pre></div></li><li><p>Pipeline 配置</p><p>将管道配置放在 Logstash 能够找到的地方是非常重要的。默认情况下，容器将在 <em>/usr/share/logstash/pipeline/</em> 中查找管道配置文件。</p><p>在这个例子中，我们使用一个绑定挂载的卷通过 <code>docker run</code> 命令来提供配置：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/pipeline/:/usr/share/logstash/pipeline/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker.elastic.co/logstash/logstash:7.16.1</span></span></code></pre></div><p>Logstash 将主机目录 <em>$HOME/pipeline/</em> 中的每个文件解析为管道配置。</p></li><li><p>设置</p><p>通过绑定挂载提供设置文件。Logstash 希望在 <em>/usr/share/logstash/config/</em> 找到它们。</p><p>可以提供一个包含所有所需文件的完整目录：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/settings/:/usr/share/logstash/config/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker.elastic.co/logstash/logstash:7.16.1</span></span></code></pre></div><p>或者，单个文件也可以挂载：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/settings/logstash.yml:/usr/share/logstash/config/logstash.yml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker.elastic.co/logstash/logstash:7.16.1</span></span></code></pre></div><div class="language-tip vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tip</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>绑定挂载的配置文件将在容器中保留它们在主机系统上拥有的相同权限和所有权。确保设置权限，使文件能够被容器的日志存储用户（UID 1000）读取，理想情况下，文件不能被写入。</span></span></code></pre></div></li></ul><h2 id="在-docker-容器中部署-redis" tabindex="-1">在 Docker 容器中部署 Redis <a class="header-anchor" href="#在-docker-容器中部署-redis" aria-label="Permalink to &quot;在 Docker 容器中部署 Redis&quot;">​</a></h2><h3 id="启动一个-redis-实例" tabindex="-1">启动一个 Redis 实例 <a class="header-anchor" href="#启动一个-redis-实例" aria-label="Permalink to &quot;启动一个 Redis 实例&quot;">​</a></h3><pre><code>```sh\n$ docker run -d -p 6379:6379 --name redis-1 redis redis-server --requirepass password\n```\n</code></pre><h2 id="在-docker-容器中部署-nexus" tabindex="-1">在 Docker 容器中部署 Nexus <a class="header-anchor" href="#在-docker-容器中部署-nexus" aria-label="Permalink to &quot;在 Docker 容器中部署 Nexus&quot;">​</a></h2><h3 id="启动一个-nexus-实例" tabindex="-1">启动一个 Nexus 实例 <a class="header-anchor" href="#启动一个-nexus-实例" aria-label="Permalink to &quot;启动一个 Nexus 实例&quot;">​</a></h3><pre><code>```sh\n$ docker run -d -p 8081:8081 --name nexus sonatype/nexus3\n```\n</code></pre><h2 id="在-docker-容器中部署-jenkins" tabindex="-1">在 Docker 容器中部署 Jenkins <a class="header-anchor" href="#在-docker-容器中部署-jenkins" aria-label="Permalink to &quot;在 Docker 容器中部署 Jenkins&quot;">​</a></h2><h3 id="启动一个-jenkins-实例" tabindex="-1">启动一个 Jenkins 实例 <a class="header-anchor" href="#启动一个-jenkins-实例" aria-label="Permalink to &quot;启动一个 Jenkins 实例&quot;">​</a></h3><pre><code>```sh\n$ docker run -d -p 18080:8080 --name jenkins jenkins/jenkins:lts-jdk11\n```\n</code></pre><h3 id="jenkins-容器使用宿主机的-docker" tabindex="-1">Jenkins 容器使用宿主机的 Docker <a class="header-anchor" href="#jenkins-容器使用宿主机的-docker" aria-label="Permalink to &quot;Jenkins 容器使用宿主机的 Docker&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 18080:8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/run/docker.sock:/var/run/docker.sock</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/docker:/usr/bin/docker</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/docker:/etc/docker</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins/jenkins:lts-jdk11</span></span></code></pre></div><ul><li><p><code>-v /var/run/docker.sock:/var/run/docker.sock</code> - 通过映射主机的套接字文件到容器，让容器内启动 Docker 的时候并不是启动容器内的容器(子容器)，而是启动宿主机上的容器(兄弟容器)。</p></li><li><p><code>-v /usr/bin/docker:/usr/bin/docker</code> - 让容器中直接使用宿主机的 Docker 客户端。</p></li><li><p><code>-v /etc/docker:/etc/docker</code> - 让容器中的 Docker 客户端使用宿主机的 Docker 配置文件, 包括国内镜像 (mirrors) 和 非 SSL 安全访问白名单 等配置。</p></li></ul><div class="tip custom-block"><p class="custom-block-title">解决访问宿主机 <code>docker.sock</code> 的权限问题</p><p>启动容器后, 我们通过 <code>docker exec -it jenkins /bin/bash</code> 命令进入容器, 执行 <code>docker ps</code> 验证 docker 命令是否可正常使用, 结果发现会遇到如下权限问题：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jenkins@79366bf746bd:/$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Got</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> permission</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> denied</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> while</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> trying</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> connect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemon</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> socket</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unix:///var/run/docker.sock:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json&quot;:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dial</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/run/docker.sock:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> connect:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> permission</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> denied</span></span></code></pre></div><p>解决方案：</p><p>启动容器时使用 <code>-u root</code> 选项。</p></div><h2 id="在-docker-容器中部署-maven" tabindex="-1">在 Docker 容器中部署 Maven <a class="header-anchor" href="#在-docker-容器中部署-maven" aria-label="Permalink to &quot;在 Docker 容器中部署 Maven&quot;">​</a></h2><h3 id="在-maven-项目下启动一个-maven-实例" tabindex="-1">在 Maven 项目下启动一个 Maven 实例 <a class="header-anchor" href="#在-maven-项目下启动一个-maven-实例" aria-label="Permalink to &quot;在 Maven 项目下启动一个 Maven 实例&quot;">​</a></h3><pre><code>```sh\n$ docker run -it --rm -v $HOME/.m2/:/root/.m2/ -v $PWD:/mymaven -w /mymaven maven:3.8.6-eclipse-temurin-17-alpine mvn clean package\n```\n</code></pre><h2 id="在-docker-容器中部署-elasticsearch" tabindex="-1">在 Docker 容器中部署 Elasticsearch <a class="header-anchor" href="#在-docker-容器中部署-elasticsearch" aria-label="Permalink to &quot;在 Docker 容器中部署 Elasticsearch&quot;">​</a></h2><h3 id="启动一个-elasticsearch-实例" tabindex="-1">启动一个 Elasticsearch 实例 <a class="header-anchor" href="#启动一个-elasticsearch-实例" aria-label="Permalink to &quot;启动一个 Elasticsearch 实例&quot;">​</a></h3><pre><code>```sh\n$ docker run -d -p 9200:9200 --name es -e &quot;discovery.type=single-node&quot; elasticsearch:8.3.2\n```\n</code></pre><h2 id="在-docker-容器中部署-docker-私有仓库" tabindex="-1">在 Docker 容器中部署 Docker 私有仓库 <a class="header-anchor" href="#在-docker-容器中部署-docker-私有仓库" aria-label="Permalink to &quot;在 Docker 容器中部署 Docker 私有仓库&quot;">​</a></h2><h3 id="启动一个-docker-私有仓库实例" tabindex="-1">启动一个 Docker 私有仓库实例 <a class="header-anchor" href="#启动一个-docker-私有仓库实例" aria-label="Permalink to &quot;启动一个 Docker 私有仓库实例&quot;">​</a></h3><pre><code>```sh\n$ docker run -d -p 5000:5000 --name registry registry:2\n```\n</code></pre><h2 id="在-docker-容器中部署-zookeeper" tabindex="-1">在 Docker 容器中部署 ZooKeeper <a class="header-anchor" href="#在-docker-容器中部署-zookeeper" aria-label="Permalink to &quot;在 Docker 容器中部署 ZooKeeper&quot;">​</a></h2><h3 id="启动一个-zookeeper-实例" tabindex="-1">启动一个 ZooKeeper 实例 <a class="header-anchor" href="#启动一个-zookeeper-实例" aria-label="Permalink to &quot;启动一个 ZooKeeper 实例&quot;">​</a></h3><pre><code>```sh\n$ docker run -d --name zookeeper zookeeper\n```\n</code></pre><h2 id="在-docker-容器中部署-kafka" tabindex="-1">在 Docker 容器中部署 Kafka <a class="header-anchor" href="#在-docker-容器中部署-kafka" aria-label="Permalink to &quot;在 Docker 容器中部署 Kafka&quot;">​</a></h2><h3 id="启动一个-kafka-实例" tabindex="-1">启动一个 Kafka 实例 <a class="header-anchor" href="#启动一个-kafka-实例" aria-label="Permalink to &quot;启动一个 Kafka 实例&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">提示</p><p>通过 Docker 网络 <code>host</code> 模式启动以下实例。不然远程连接会报 <code>java.net.UnknownHostException: 不知道这样的主机。 (aff96a366c15)</code> 异常。</p></div><ol><li><p>启动 Zookeeper 服务实例</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zookeeper</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zookeeper</span></span></code></pre></div></li><li><p>启动 Kafka 服务实例</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9092:9092</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kafka</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ALLOW_PLAINTEXT_LISTENER=yes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> KAFKA_CFG_ZOOKEEPER_CONNECT=localhost:2181</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bitnami/kafka</span></span></code></pre></div></li><li><p>启动 Kafka Web UI 实例（可选）</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9000:9000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kafka-web-ui</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> KAFKA_BROKERCONNECT=localhost:9092</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> obsidiandynamics/kafdrop</span></span></code></pre></div></li></ol><h2 id="在-docker-容器中部署-rabbitmq" tabindex="-1">在 Docker 容器中部署 RabbitMQ <a class="header-anchor" href="#在-docker-容器中部署-rabbitmq" aria-label="Permalink to &quot;在 Docker 容器中部署 RabbitMQ&quot;">​</a></h2><h3 id="启动一个-rabbitmq-实例" tabindex="-1">启动一个 RabbitMQ 实例 <a class="header-anchor" href="#启动一个-rabbitmq-实例" aria-label="Permalink to &quot;启动一个 RabbitMQ 实例&quot;">​</a></h3><pre><code>```sh\n$ docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:3-management\n```\n</code></pre><h2 id="在-docker-容器中部署-skywalking" tabindex="-1">在 Docker 容器中部署 SkyWalking <a class="header-anchor" href="#在-docker-容器中部署-skywalking" aria-label="Permalink to &quot;在 Docker 容器中部署 SkyWalking&quot;">​</a></h2><h3 id="启动一个-skywalking-实例" tabindex="-1">启动一个 SkyWalking 实例 <a class="header-anchor" href="#启动一个-skywalking-实例" aria-label="Permalink to &quot;启动一个 SkyWalking 实例&quot;">​</a></h3><ol><li><p>启动 SkyWalking 服务实例</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 11800:11800</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 12800:12800</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> skywalking</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache/skywalking-oap-server:9.4.0</span></span></code></pre></div></li><li><p>启动 SkyWalking UI 服务实例</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> skywalking-ui</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SW_OAP_ADDRESS=http://localhost:12800</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache/skywalking-ui:9.4.0</span></span></code></pre></div></li></ol>',42)]))}const F=i(t,[["render",k]]);export{c as __pageData,F as default};
